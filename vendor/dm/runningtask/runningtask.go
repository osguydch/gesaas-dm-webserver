// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package runningtask

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

type TaskType int64
const (
  TaskType_Run TaskType = 0
  TaskType_Sequence TaskType = 1
  TaskType_Analysis TaskType = 2
  TaskType_OfflineAnalysis TaskType = 3
)

func (p TaskType) String() string {
  switch p {
  case TaskType_Run: return "Run"
  case TaskType_Sequence: return "Sequence"
  case TaskType_Analysis: return "Analysis"
  case TaskType_OfflineAnalysis: return "OfflineAnalysis"
  }
  return "<UNSET>"
}

func TaskTypeFromString(s string) (TaskType, error) {
  switch s {
  case "Run": return TaskType_Run, nil 
  case "Sequence": return TaskType_Sequence, nil 
  case "Analysis": return TaskType_Analysis, nil 
  case "OfflineAnalysis": return TaskType_OfflineAnalysis, nil 
  }
  return TaskType(0), fmt.Errorf("not a valid TaskType string")
}


func TaskTypePtr(v TaskType) *TaskType { return &v }

func (p TaskType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TaskType) UnmarshalText(text []byte) error {
q, err := TaskTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TaskType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TaskType(v)
return nil
}

func (p * TaskType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - TaskList
//  - TotalCount
//  - CurrentPage
type ReturnData struct {
  TaskList []*RunningTask `thrift:"taskList,1" db:"taskList" json:"taskList,omitempty"`
  TotalCount *int32 `thrift:"totalCount,2" db:"totalCount" json:"totalCount,omitempty"`
  CurrentPage *int32 `thrift:"currentPage,3" db:"currentPage" json:"currentPage,omitempty"`
}

func NewReturnData() *ReturnData {
  return &ReturnData{}
}

var ReturnData_TaskList_DEFAULT []*RunningTask

func (p *ReturnData) GetTaskList() []*RunningTask {
  return p.TaskList
}
var ReturnData_TotalCount_DEFAULT int32
func (p *ReturnData) GetTotalCount() int32 {
  if !p.IsSetTotalCount() {
    return ReturnData_TotalCount_DEFAULT
  }
return *p.TotalCount
}
var ReturnData_CurrentPage_DEFAULT int32
func (p *ReturnData) GetCurrentPage() int32 {
  if !p.IsSetCurrentPage() {
    return ReturnData_CurrentPage_DEFAULT
  }
return *p.CurrentPage
}
func (p *ReturnData) IsSetTaskList() bool {
  return p.TaskList != nil
}

func (p *ReturnData) IsSetTotalCount() bool {
  return p.TotalCount != nil
}

func (p *ReturnData) IsSetCurrentPage() bool {
  return p.CurrentPage != nil
}

func (p *ReturnData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReturnData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RunningTask, 0, size)
  p.TaskList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &RunningTask{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.TaskList = append(p.TaskList, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReturnData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TotalCount = &v
}
  return nil
}

func (p *ReturnData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CurrentPage = &v
}
  return nil
}

func (p *ReturnData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReturnData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReturnData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTaskList() {
    if err := oprot.WriteFieldBegin(ctx, "taskList", thrift.LIST, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:taskList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TaskList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TaskList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:taskList: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTotalCount() {
    if err := oprot.WriteFieldBegin(ctx, "totalCount", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:totalCount: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.TotalCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.totalCount (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:totalCount: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCurrentPage() {
    if err := oprot.WriteFieldBegin(ctx, "currentPage", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:currentPage: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.CurrentPage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.currentPage (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:currentPage: ", p), err) }
  }
  return err
}

func (p *ReturnData) Equals(other *ReturnData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.TaskList) != len(other.TaskList) { return false }
  for i, _tgt := range p.TaskList {
    _src1 := other.TaskList[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if p.TotalCount != other.TotalCount {
    if p.TotalCount == nil || other.TotalCount == nil {
      return false
    }
    if (*p.TotalCount) != (*other.TotalCount) { return false }
  }
  if p.CurrentPage != other.CurrentPage {
    if p.CurrentPage == nil || other.CurrentPage == nil {
      return false
    }
    if (*p.CurrentPage) != (*other.CurrentPage) { return false }
  }
  return true
}

func (p *ReturnData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReturnData(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Message
//  - Data
type Response struct {
  ErrorCode int32 `thrift:"errorCode,1,required" db:"errorCode" json:"errorCode"`
  Message *string `thrift:"message,2" db:"message" json:"message,omitempty"`
  Data *ReturnData `thrift:"data,3" db:"data" json:"data,omitempty"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetErrorCode() int32 {
  return p.ErrorCode
}
var Response_Message_DEFAULT string
func (p *Response) GetMessage() string {
  if !p.IsSetMessage() {
    return Response_Message_DEFAULT
  }
return *p.Message
}
var Response_Data_DEFAULT *ReturnData
func (p *Response) GetData() *ReturnData {
  if !p.IsSetData() {
    return Response_Data_DEFAULT
  }
return p.Data
}
func (p *Response) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Response) IsSetData() bool {
  return p.Data != nil
}

func (p *Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *Response)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorCode = v
}
  return nil
}

func (p *Response)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *Response)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &ReturnData{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *Response) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  }
  return err
}

func (p *Response) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := p.Data.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *Response) Equals(other *Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if p.Message != other.Message {
    if p.Message == nil || other.Message == nil {
      return false
    }
    if (*p.Message) != (*other.Message) { return false }
  }
  if !p.Data.Equals(other.Data) { return false }
  return true
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

// Attributes:
//  - Runname
//  - Creator
//  - Type
//  - PageNum
//  - PageSize
//  - DeviceName
//  - Status
type SearchCriteria struct {
  Runname *string `thrift:"runname,1" db:"runname" json:"runname,omitempty"`
  Creator *string `thrift:"creator,2" db:"creator" json:"creator,omitempty"`
  Type *TaskType `thrift:"type,3" db:"type" json:"type,omitempty"`
  PageNum *int32 `thrift:"pageNum,4" db:"pageNum" json:"pageNum,omitempty"`
  PageSize *int32 `thrift:"pageSize,5" db:"pageSize" json:"pageSize,omitempty"`
  DeviceName *string `thrift:"deviceName,6" db:"deviceName" json:"deviceName,omitempty"`
  Status *int32 `thrift:"status,7" db:"status" json:"status,omitempty"`
}

func NewSearchCriteria() *SearchCriteria {
  return &SearchCriteria{}
}

var SearchCriteria_Runname_DEFAULT string
func (p *SearchCriteria) GetRunname() string {
  if !p.IsSetRunname() {
    return SearchCriteria_Runname_DEFAULT
  }
return *p.Runname
}
var SearchCriteria_Creator_DEFAULT string
func (p *SearchCriteria) GetCreator() string {
  if !p.IsSetCreator() {
    return SearchCriteria_Creator_DEFAULT
  }
return *p.Creator
}
var SearchCriteria_Type_DEFAULT TaskType
func (p *SearchCriteria) GetType() TaskType {
  if !p.IsSetType() {
    return SearchCriteria_Type_DEFAULT
  }
return *p.Type
}
var SearchCriteria_PageNum_DEFAULT int32
func (p *SearchCriteria) GetPageNum() int32 {
  if !p.IsSetPageNum() {
    return SearchCriteria_PageNum_DEFAULT
  }
return *p.PageNum
}
var SearchCriteria_PageSize_DEFAULT int32
func (p *SearchCriteria) GetPageSize() int32 {
  if !p.IsSetPageSize() {
    return SearchCriteria_PageSize_DEFAULT
  }
return *p.PageSize
}
var SearchCriteria_DeviceName_DEFAULT string
func (p *SearchCriteria) GetDeviceName() string {
  if !p.IsSetDeviceName() {
    return SearchCriteria_DeviceName_DEFAULT
  }
return *p.DeviceName
}
var SearchCriteria_Status_DEFAULT int32
func (p *SearchCriteria) GetStatus() int32 {
  if !p.IsSetStatus() {
    return SearchCriteria_Status_DEFAULT
  }
return *p.Status
}
func (p *SearchCriteria) IsSetRunname() bool {
  return p.Runname != nil
}

func (p *SearchCriteria) IsSetCreator() bool {
  return p.Creator != nil
}

func (p *SearchCriteria) IsSetType() bool {
  return p.Type != nil
}

func (p *SearchCriteria) IsSetPageNum() bool {
  return p.PageNum != nil
}

func (p *SearchCriteria) IsSetPageSize() bool {
  return p.PageSize != nil
}

func (p *SearchCriteria) IsSetDeviceName() bool {
  return p.DeviceName != nil
}

func (p *SearchCriteria) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SearchCriteria) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchCriteria)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Runname = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Creator = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TaskType(v)
  p.Type = &temp
}
  return nil
}

func (p *SearchCriteria)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PageNum = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PageSize = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DeviceName = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Status = &v
}
  return nil
}

func (p *SearchCriteria) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SearchCriteria"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchCriteria) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunname() {
    if err := oprot.WriteFieldBegin(ctx, "runname", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:runname: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Runname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runname (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:runname: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreator() {
    if err := oprot.WriteFieldBegin(ctx, "creator", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:creator: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Creator)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creator (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:creator: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageNum() {
    if err := oprot.WriteFieldBegin(ctx, "pageNum", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageNum: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageNum (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageNum: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageSize() {
    if err := oprot.WriteFieldBegin(ctx, "pageSize", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDeviceName() {
    if err := oprot.WriteFieldBegin(ctx, "deviceName", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deviceName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.DeviceName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deviceName (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deviceName: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) Equals(other *SearchCriteria) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Runname != other.Runname {
    if p.Runname == nil || other.Runname == nil {
      return false
    }
    if (*p.Runname) != (*other.Runname) { return false }
  }
  if p.Creator != other.Creator {
    if p.Creator == nil || other.Creator == nil {
      return false
    }
    if (*p.Creator) != (*other.Creator) { return false }
  }
  if p.Type != other.Type {
    if p.Type == nil || other.Type == nil {
      return false
    }
    if (*p.Type) != (*other.Type) { return false }
  }
  if p.PageNum != other.PageNum {
    if p.PageNum == nil || other.PageNum == nil {
      return false
    }
    if (*p.PageNum) != (*other.PageNum) { return false }
  }
  if p.PageSize != other.PageSize {
    if p.PageSize == nil || other.PageSize == nil {
      return false
    }
    if (*p.PageSize) != (*other.PageSize) { return false }
  }
  if p.DeviceName != other.DeviceName {
    if p.DeviceName == nil || other.DeviceName == nil {
      return false
    }
    if (*p.DeviceName) != (*other.DeviceName) { return false }
  }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  return true
}

func (p *SearchCriteria) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchCriteria(%+v)", *p)
}

// Attributes:
//  - Value
//  - WarningThresh
//  - ErrorThresh
type IndicatorItem struct {
  Value float64 `thrift:"value,1" db:"value" json:"value"`
  WarningThresh float64 `thrift:"warningThresh,2" db:"warningThresh" json:"warningThresh"`
  ErrorThresh float64 `thrift:"errorThresh,3" db:"errorThresh" json:"errorThresh"`
}

func NewIndicatorItem() *IndicatorItem {
  return &IndicatorItem{}
}


func (p *IndicatorItem) GetValue() float64 {
  return p.Value
}

func (p *IndicatorItem) GetWarningThresh() float64 {
  return p.WarningThresh
}

func (p *IndicatorItem) GetErrorThresh() float64 {
  return p.ErrorThresh
}
func (p *IndicatorItem) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IndicatorItem)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *IndicatorItem)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.WarningThresh = v
}
  return nil
}

func (p *IndicatorItem)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ErrorThresh = v
}
  return nil
}

func (p *IndicatorItem) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "IndicatorItem"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IndicatorItem) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:value: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:value: ", p), err) }
  return err
}

func (p *IndicatorItem) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "warningThresh", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:warningThresh: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.WarningThresh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.warningThresh (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:warningThresh: ", p), err) }
  return err
}

func (p *IndicatorItem) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorThresh", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:errorThresh: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.ErrorThresh)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorThresh (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:errorThresh: ", p), err) }
  return err
}

func (p *IndicatorItem) Equals(other *IndicatorItem) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Value != other.Value { return false }
  if p.WarningThresh != other.WarningThresh { return false }
  if p.ErrorThresh != other.ErrorThresh { return false }
  return true
}

func (p *IndicatorItem) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IndicatorItem(%+v)", *p)
}

// Attributes:
//  - RemainingTime
//  - LoadingRate
//  - Throughput
//  - Aq30
//  - SealRate
//  - EstimatedFinishTime
type TaskRtInfo struct {
  RemainingTime float64 `thrift:"remainingTime,1" db:"remainingTime" json:"remainingTime"`
  LoadingRate *IndicatorItem `thrift:"loadingRate,2" db:"loadingRate" json:"loadingRate,omitempty"`
  Throughput *IndicatorItem `thrift:"throughput,3" db:"throughput" json:"throughput,omitempty"`
  Aq30 *IndicatorItem `thrift:"aq30,4" db:"aq30" json:"aq30,omitempty"`
  SealRate *IndicatorItem `thrift:"sealRate,5" db:"sealRate" json:"sealRate,omitempty"`
  EstimatedFinishTime float64 `thrift:"estimatedFinishTime,6" db:"estimatedFinishTime" json:"estimatedFinishTime"`
}

func NewTaskRtInfo() *TaskRtInfo {
  return &TaskRtInfo{}
}


func (p *TaskRtInfo) GetRemainingTime() float64 {
  return p.RemainingTime
}
var TaskRtInfo_LoadingRate_DEFAULT *IndicatorItem
func (p *TaskRtInfo) GetLoadingRate() *IndicatorItem {
  if !p.IsSetLoadingRate() {
    return TaskRtInfo_LoadingRate_DEFAULT
  }
return p.LoadingRate
}
var TaskRtInfo_Throughput_DEFAULT *IndicatorItem
func (p *TaskRtInfo) GetThroughput() *IndicatorItem {
  if !p.IsSetThroughput() {
    return TaskRtInfo_Throughput_DEFAULT
  }
return p.Throughput
}
var TaskRtInfo_Aq30_DEFAULT *IndicatorItem
func (p *TaskRtInfo) GetAq30() *IndicatorItem {
  if !p.IsSetAq30() {
    return TaskRtInfo_Aq30_DEFAULT
  }
return p.Aq30
}
var TaskRtInfo_SealRate_DEFAULT *IndicatorItem
func (p *TaskRtInfo) GetSealRate() *IndicatorItem {
  if !p.IsSetSealRate() {
    return TaskRtInfo_SealRate_DEFAULT
  }
return p.SealRate
}

func (p *TaskRtInfo) GetEstimatedFinishTime() float64 {
  return p.EstimatedFinishTime
}
func (p *TaskRtInfo) IsSetLoadingRate() bool {
  return p.LoadingRate != nil
}

func (p *TaskRtInfo) IsSetThroughput() bool {
  return p.Throughput != nil
}

func (p *TaskRtInfo) IsSetAq30() bool {
  return p.Aq30 != nil
}

func (p *TaskRtInfo) IsSetSealRate() bool {
  return p.SealRate != nil
}

func (p *TaskRtInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TaskRtInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RemainingTime = v
}
  return nil
}

func (p *TaskRtInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.LoadingRate = &IndicatorItem{}
  if err := p.LoadingRate.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.LoadingRate), err)
  }
  return nil
}

func (p *TaskRtInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Throughput = &IndicatorItem{}
  if err := p.Throughput.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Throughput), err)
  }
  return nil
}

func (p *TaskRtInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.Aq30 = &IndicatorItem{}
  if err := p.Aq30.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Aq30), err)
  }
  return nil
}

func (p *TaskRtInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.SealRate = &IndicatorItem{}
  if err := p.SealRate.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SealRate), err)
  }
  return nil
}

func (p *TaskRtInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EstimatedFinishTime = v
}
  return nil
}

func (p *TaskRtInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TaskRtInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TaskRtInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "remainingTime", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:remainingTime: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RemainingTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.remainingTime (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:remainingTime: ", p), err) }
  return err
}

func (p *TaskRtInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLoadingRate() {
    if err := oprot.WriteFieldBegin(ctx, "loadingRate", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loadingRate: ", p), err) }
    if err := p.LoadingRate.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.LoadingRate), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loadingRate: ", p), err) }
  }
  return err
}

func (p *TaskRtInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThroughput() {
    if err := oprot.WriteFieldBegin(ctx, "throughput", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:throughput: ", p), err) }
    if err := p.Throughput.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Throughput), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:throughput: ", p), err) }
  }
  return err
}

func (p *TaskRtInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAq30() {
    if err := oprot.WriteFieldBegin(ctx, "aq30", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:aq30: ", p), err) }
    if err := p.Aq30.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Aq30), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:aq30: ", p), err) }
  }
  return err
}

func (p *TaskRtInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSealRate() {
    if err := oprot.WriteFieldBegin(ctx, "sealRate", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sealRate: ", p), err) }
    if err := p.SealRate.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SealRate), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sealRate: ", p), err) }
  }
  return err
}

func (p *TaskRtInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "estimatedFinishTime", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:estimatedFinishTime: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.EstimatedFinishTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.estimatedFinishTime (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:estimatedFinishTime: ", p), err) }
  return err
}

func (p *TaskRtInfo) Equals(other *TaskRtInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RemainingTime != other.RemainingTime { return false }
  if !p.LoadingRate.Equals(other.LoadingRate) { return false }
  if !p.Throughput.Equals(other.Throughput) { return false }
  if !p.Aq30.Equals(other.Aq30) { return false }
  if !p.SealRate.Equals(other.SealRate) { return false }
  if p.EstimatedFinishTime != other.EstimatedFinishTime { return false }
  return true
}

func (p *TaskRtInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TaskRtInfo(%+v)", *p)
}

// Attributes:
//  - AnalysisId
//  - RunId
//  - DeviceName
//  - Runname
//  - Type
//  - CreatorName
//  - Status
//  - TaskInfo
//  - CreatedAt
//  - UpdatedAt
type RunningTask struct {
  AnalysisId *string `thrift:"analysisId,1" db:"analysisId" json:"analysisId,omitempty"`
  RunId string `thrift:"runId,2,required" db:"runId" json:"runId"`
  DeviceName *string `thrift:"deviceName,3" db:"deviceName" json:"deviceName,omitempty"`
  Runname *string `thrift:"runname,4" db:"runname" json:"runname,omitempty"`
  Type TaskType `thrift:"type,5,required" db:"type" json:"type"`
  CreatorName *string `thrift:"creatorName,6" db:"creatorName" json:"creatorName,omitempty"`
  Status *int32 `thrift:"status,7" db:"status" json:"status,omitempty"`
  TaskInfo *TaskRtInfo `thrift:"taskInfo,8,required" db:"taskInfo" json:"taskInfo"`
  CreatedAt *float64 `thrift:"createdAt,9" db:"createdAt" json:"createdAt,omitempty"`
  UpdatedAt *float64 `thrift:"updatedAt,10" db:"updatedAt" json:"updatedAt,omitempty"`
}

func NewRunningTask() *RunningTask {
  return &RunningTask{}
}

var RunningTask_AnalysisId_DEFAULT string
func (p *RunningTask) GetAnalysisId() string {
  if !p.IsSetAnalysisId() {
    return RunningTask_AnalysisId_DEFAULT
  }
return *p.AnalysisId
}

func (p *RunningTask) GetRunId() string {
  return p.RunId
}
var RunningTask_DeviceName_DEFAULT string
func (p *RunningTask) GetDeviceName() string {
  if !p.IsSetDeviceName() {
    return RunningTask_DeviceName_DEFAULT
  }
return *p.DeviceName
}
var RunningTask_Runname_DEFAULT string
func (p *RunningTask) GetRunname() string {
  if !p.IsSetRunname() {
    return RunningTask_Runname_DEFAULT
  }
return *p.Runname
}

func (p *RunningTask) GetType() TaskType {
  return p.Type
}
var RunningTask_CreatorName_DEFAULT string
func (p *RunningTask) GetCreatorName() string {
  if !p.IsSetCreatorName() {
    return RunningTask_CreatorName_DEFAULT
  }
return *p.CreatorName
}
var RunningTask_Status_DEFAULT int32
func (p *RunningTask) GetStatus() int32 {
  if !p.IsSetStatus() {
    return RunningTask_Status_DEFAULT
  }
return *p.Status
}
var RunningTask_TaskInfo_DEFAULT *TaskRtInfo
func (p *RunningTask) GetTaskInfo() *TaskRtInfo {
  if !p.IsSetTaskInfo() {
    return RunningTask_TaskInfo_DEFAULT
  }
return p.TaskInfo
}
var RunningTask_CreatedAt_DEFAULT float64
func (p *RunningTask) GetCreatedAt() float64 {
  if !p.IsSetCreatedAt() {
    return RunningTask_CreatedAt_DEFAULT
  }
return *p.CreatedAt
}
var RunningTask_UpdatedAt_DEFAULT float64
func (p *RunningTask) GetUpdatedAt() float64 {
  if !p.IsSetUpdatedAt() {
    return RunningTask_UpdatedAt_DEFAULT
  }
return *p.UpdatedAt
}
func (p *RunningTask) IsSetAnalysisId() bool {
  return p.AnalysisId != nil
}

func (p *RunningTask) IsSetDeviceName() bool {
  return p.DeviceName != nil
}

func (p *RunningTask) IsSetRunname() bool {
  return p.Runname != nil
}

func (p *RunningTask) IsSetCreatorName() bool {
  return p.CreatorName != nil
}

func (p *RunningTask) IsSetStatus() bool {
  return p.Status != nil
}

func (p *RunningTask) IsSetTaskInfo() bool {
  return p.TaskInfo != nil
}

func (p *RunningTask) IsSetCreatedAt() bool {
  return p.CreatedAt != nil
}

func (p *RunningTask) IsSetUpdatedAt() bool {
  return p.UpdatedAt != nil
}

func (p *RunningTask) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRunId bool = false;
  var issetType bool = false;
  var issetTaskInfo bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetRunId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
        issetTaskInfo = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRunId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RunId is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetTaskInfo{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TaskInfo is not set"));
  }
  return nil
}

func (p *RunningTask)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AnalysisId = &v
}
  return nil
}

func (p *RunningTask)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RunId = v
}
  return nil
}

func (p *RunningTask)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DeviceName = &v
}
  return nil
}

func (p *RunningTask)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Runname = &v
}
  return nil
}

func (p *RunningTask)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := TaskType(v)
  p.Type = temp
}
  return nil
}

func (p *RunningTask)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreatorName = &v
}
  return nil
}

func (p *RunningTask)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Status = &v
}
  return nil
}

func (p *RunningTask)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.TaskInfo = &TaskRtInfo{}
  if err := p.TaskInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TaskInfo), err)
  }
  return nil
}

func (p *RunningTask)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.CreatedAt = &v
}
  return nil
}

func (p *RunningTask)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.UpdatedAt = &v
}
  return nil
}

func (p *RunningTask) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RunningTask"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunningTask) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnalysisId() {
    if err := oprot.WriteFieldBegin(ctx, "analysisId", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:analysisId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AnalysisId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.analysisId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:analysisId: ", p), err) }
  }
  return err
}

func (p *RunningTask) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runId: ", p), err) }
  return err
}

func (p *RunningTask) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDeviceName() {
    if err := oprot.WriteFieldBegin(ctx, "deviceName", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:deviceName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.DeviceName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deviceName (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:deviceName: ", p), err) }
  }
  return err
}

func (p *RunningTask) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunname() {
    if err := oprot.WriteFieldBegin(ctx, "runname", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:runname: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Runname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runname (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:runname: ", p), err) }
  }
  return err
}

func (p *RunningTask) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err) }
  return err
}

func (p *RunningTask) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatorName() {
    if err := oprot.WriteFieldBegin(ctx, "creatorName", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:creatorName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.CreatorName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creatorName (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:creatorName: ", p), err) }
  }
  return err
}

func (p *RunningTask) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:status: ", p), err) }
  }
  return err
}

func (p *RunningTask) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "taskInfo", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:taskInfo: ", p), err) }
  if err := p.TaskInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TaskInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:taskInfo: ", p), err) }
  return err
}

func (p *RunningTask) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatedAt() {
    if err := oprot.WriteFieldBegin(ctx, "createdAt", thrift.DOUBLE, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:createdAt: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.CreatedAt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createdAt (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:createdAt: ", p), err) }
  }
  return err
}

func (p *RunningTask) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdatedAt() {
    if err := oprot.WriteFieldBegin(ctx, "updatedAt", thrift.DOUBLE, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:updatedAt: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.UpdatedAt)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updatedAt (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:updatedAt: ", p), err) }
  }
  return err
}

func (p *RunningTask) Equals(other *RunningTask) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AnalysisId != other.AnalysisId {
    if p.AnalysisId == nil || other.AnalysisId == nil {
      return false
    }
    if (*p.AnalysisId) != (*other.AnalysisId) { return false }
  }
  if p.RunId != other.RunId { return false }
  if p.DeviceName != other.DeviceName {
    if p.DeviceName == nil || other.DeviceName == nil {
      return false
    }
    if (*p.DeviceName) != (*other.DeviceName) { return false }
  }
  if p.Runname != other.Runname {
    if p.Runname == nil || other.Runname == nil {
      return false
    }
    if (*p.Runname) != (*other.Runname) { return false }
  }
  if p.Type != other.Type { return false }
  if p.CreatorName != other.CreatorName {
    if p.CreatorName == nil || other.CreatorName == nil {
      return false
    }
    if (*p.CreatorName) != (*other.CreatorName) { return false }
  }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  if !p.TaskInfo.Equals(other.TaskInfo) { return false }
  if p.CreatedAt != other.CreatedAt {
    if p.CreatedAt == nil || other.CreatedAt == nil {
      return false
    }
    if (*p.CreatedAt) != (*other.CreatedAt) { return false }
  }
  if p.UpdatedAt != other.UpdatedAt {
    if p.UpdatedAt == nil || other.UpdatedAt == nil {
      return false
    }
    if (*p.UpdatedAt) != (*other.UpdatedAt) { return false }
  }
  return true
}

func (p *RunningTask) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunningTask(%+v)", *p)
}

type RunningTaskManagement interface {
  // Parameters:
  //  - Token
  //  - Task
  UpdateTask(ctx context.Context, token string, task *RunningTask) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - SearchCriteria
  //  - OrderBy
  GetTaskList(ctx context.Context, token string, searchCriteria *SearchCriteria, orderBy int32) (_r *Response, _err error)
}

type RunningTaskManagementClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewRunningTaskManagementClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RunningTaskManagementClient {
  return &RunningTaskManagementClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewRunningTaskManagementClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RunningTaskManagementClient {
  return &RunningTaskManagementClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRunningTaskManagementClient(c thrift.TClient) *RunningTaskManagementClient {
  return &RunningTaskManagementClient{
    c: c,
  }
}

func (p *RunningTaskManagementClient) Client_() thrift.TClient {
  return p.c
}

func (p *RunningTaskManagementClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *RunningTaskManagementClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Token
//  - Task
func (p *RunningTaskManagementClient) UpdateTask(ctx context.Context, token string, task *RunningTask) (_r *Response, _err error) {
  var _args2 RunningTaskManagementUpdateTaskArgs
  _args2.Token = token
  _args2.Task = task
  var _result4 RunningTaskManagementUpdateTaskResult
  var _meta3 thrift.ResponseMeta
  _meta3, _err = p.Client_().Call(ctx, "updateTask", &_args2, &_result4)
  p.SetLastResponseMeta_(_meta3)
  if _err != nil {
    return
  }
  if _ret5 := _result4.GetSuccess(); _ret5 != nil {
    return _ret5, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "updateTask failed: unknown result")
}

// Parameters:
//  - Token
//  - SearchCriteria
//  - OrderBy
func (p *RunningTaskManagementClient) GetTaskList(ctx context.Context, token string, searchCriteria *SearchCriteria, orderBy int32) (_r *Response, _err error) {
  var _args6 RunningTaskManagementGetTaskListArgs
  _args6.Token = token
  _args6.SearchCriteria = searchCriteria
  _args6.OrderBy = orderBy
  var _result8 RunningTaskManagementGetTaskListResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "getTaskList", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  if _ret9 := _result8.GetSuccess(); _ret9 != nil {
    return _ret9, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getTaskList failed: unknown result")
}

type RunningTaskManagementProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RunningTaskManagement
}

func (p *RunningTaskManagementProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RunningTaskManagementProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RunningTaskManagementProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRunningTaskManagementProcessor(handler RunningTaskManagement) *RunningTaskManagementProcessor {

  self10 := &RunningTaskManagementProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self10.processorMap["updateTask"] = &runningTaskManagementProcessorUpdateTask{handler:handler}
  self10.processorMap["getTaskList"] = &runningTaskManagementProcessorGetTaskList{handler:handler}
return self10
}

func (p *RunningTaskManagementProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x11 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x11.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x11

}

type runningTaskManagementProcessorUpdateTask struct {
  handler RunningTaskManagement
}

func (p *runningTaskManagementProcessorUpdateTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunningTaskManagementUpdateTaskArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateTask", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunningTaskManagementUpdateTaskResult{}
  var retval *Response
  if retval, err2 = p.handler.UpdateTask(ctx, args.Token, args.Task); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateTask: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateTask", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateTask", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runningTaskManagementProcessorGetTaskList struct {
  handler RunningTaskManagement
}

func (p *runningTaskManagementProcessorGetTaskList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunningTaskManagementGetTaskListArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getTaskList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunningTaskManagementGetTaskListResult{}
  var retval *Response
  if retval, err2 = p.handler.GetTaskList(ctx, args.Token, args.SearchCriteria, args.OrderBy); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTaskList: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getTaskList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getTaskList", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Token
//  - Task
type RunningTaskManagementUpdateTaskArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Task *RunningTask `thrift:"task,2" db:"task" json:"task"`
}

func NewRunningTaskManagementUpdateTaskArgs() *RunningTaskManagementUpdateTaskArgs {
  return &RunningTaskManagementUpdateTaskArgs{}
}


func (p *RunningTaskManagementUpdateTaskArgs) GetToken() string {
  return p.Token
}
var RunningTaskManagementUpdateTaskArgs_Task_DEFAULT *RunningTask
func (p *RunningTaskManagementUpdateTaskArgs) GetTask() *RunningTask {
  if !p.IsSetTask() {
    return RunningTaskManagementUpdateTaskArgs_Task_DEFAULT
  }
return p.Task
}
func (p *RunningTaskManagementUpdateTaskArgs) IsSetTask() bool {
  return p.Task != nil
}

func (p *RunningTaskManagementUpdateTaskArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunningTaskManagementUpdateTaskArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunningTaskManagementUpdateTaskArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Task = &RunningTask{}
  if err := p.Task.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Task), err)
  }
  return nil
}

func (p *RunningTaskManagementUpdateTaskArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunningTaskManagementUpdateTaskArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunningTaskManagementUpdateTaskArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "task", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:task: ", p), err) }
  if err := p.Task.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Task), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:task: ", p), err) }
  return err
}

func (p *RunningTaskManagementUpdateTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunningTaskManagementUpdateTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunningTaskManagementUpdateTaskResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunningTaskManagementUpdateTaskResult() *RunningTaskManagementUpdateTaskResult {
  return &RunningTaskManagementUpdateTaskResult{}
}

var RunningTaskManagementUpdateTaskResult_Success_DEFAULT *Response
func (p *RunningTaskManagementUpdateTaskResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunningTaskManagementUpdateTaskResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunningTaskManagementUpdateTaskResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunningTaskManagementUpdateTaskResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunningTaskManagementUpdateTaskResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunningTaskManagementUpdateTaskResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunningTaskManagementUpdateTaskResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunningTaskManagementUpdateTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunningTaskManagementUpdateTaskResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - SearchCriteria
//  - OrderBy
type RunningTaskManagementGetTaskListArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  SearchCriteria *SearchCriteria `thrift:"searchCriteria,2" db:"searchCriteria" json:"searchCriteria"`
  OrderBy int32 `thrift:"orderBy,3" db:"orderBy" json:"orderBy"`
}

func NewRunningTaskManagementGetTaskListArgs() *RunningTaskManagementGetTaskListArgs {
  return &RunningTaskManagementGetTaskListArgs{}
}


func (p *RunningTaskManagementGetTaskListArgs) GetToken() string {
  return p.Token
}
var RunningTaskManagementGetTaskListArgs_SearchCriteria_DEFAULT *SearchCriteria
func (p *RunningTaskManagementGetTaskListArgs) GetSearchCriteria() *SearchCriteria {
  if !p.IsSetSearchCriteria() {
    return RunningTaskManagementGetTaskListArgs_SearchCriteria_DEFAULT
  }
return p.SearchCriteria
}

func (p *RunningTaskManagementGetTaskListArgs) GetOrderBy() int32 {
  return p.OrderBy
}
func (p *RunningTaskManagementGetTaskListArgs) IsSetSearchCriteria() bool {
  return p.SearchCriteria != nil
}

func (p *RunningTaskManagementGetTaskListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunningTaskManagementGetTaskListArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunningTaskManagementGetTaskListArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SearchCriteria = &SearchCriteria{}
  if err := p.SearchCriteria.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SearchCriteria), err)
  }
  return nil
}

func (p *RunningTaskManagementGetTaskListArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.OrderBy = v
}
  return nil
}

func (p *RunningTaskManagementGetTaskListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getTaskList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunningTaskManagementGetTaskListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunningTaskManagementGetTaskListArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchCriteria", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchCriteria: ", p), err) }
  if err := p.SearchCriteria.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SearchCriteria), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchCriteria: ", p), err) }
  return err
}

func (p *RunningTaskManagementGetTaskListArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "orderBy", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:orderBy: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OrderBy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderBy (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:orderBy: ", p), err) }
  return err
}

func (p *RunningTaskManagementGetTaskListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunningTaskManagementGetTaskListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunningTaskManagementGetTaskListResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunningTaskManagementGetTaskListResult() *RunningTaskManagementGetTaskListResult {
  return &RunningTaskManagementGetTaskListResult{}
}

var RunningTaskManagementGetTaskListResult_Success_DEFAULT *Response
func (p *RunningTaskManagementGetTaskListResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunningTaskManagementGetTaskListResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunningTaskManagementGetTaskListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunningTaskManagementGetTaskListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunningTaskManagementGetTaskListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunningTaskManagementGetTaskListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getTaskList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunningTaskManagementGetTaskListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunningTaskManagementGetTaskListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunningTaskManagementGetTaskListResult(%+v)", *p)
}


