// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package rundata

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - AnalysisId
//  - RunId
//  - SpaceOccupied
//  - SubTypeId
//  - IsDelete
//  - CreateTime
//  - LastUpdateTime
type RunData struct {
  AnalysisId string `thrift:"analysisId,1" db:"analysisId" json:"analysisId"`
  RunId string `thrift:"runId,2" db:"runId" json:"runId"`
  SpaceOccupied float64 `thrift:"spaceOccupied,3" db:"spaceOccupied" json:"spaceOccupied"`
  SubTypeId int32 `thrift:"subTypeId,4" db:"subTypeId" json:"subTypeId"`
  IsDelete bool `thrift:"isDelete,5" db:"isDelete" json:"isDelete"`
  CreateTime *int64 `thrift:"createTime,6" db:"createTime" json:"createTime,omitempty"`
  LastUpdateTime *int64 `thrift:"lastUpdateTime,7" db:"lastUpdateTime" json:"lastUpdateTime,omitempty"`
}

func NewRunData() *RunData {
  return &RunData{}
}


func (p *RunData) GetAnalysisId() string {
  return p.AnalysisId
}

func (p *RunData) GetRunId() string {
  return p.RunId
}

func (p *RunData) GetSpaceOccupied() float64 {
  return p.SpaceOccupied
}

func (p *RunData) GetSubTypeId() int32 {
  return p.SubTypeId
}

func (p *RunData) GetIsDelete() bool {
  return p.IsDelete
}
var RunData_CreateTime_DEFAULT int64
func (p *RunData) GetCreateTime() int64 {
  if !p.IsSetCreateTime() {
    return RunData_CreateTime_DEFAULT
  }
return *p.CreateTime
}
var RunData_LastUpdateTime_DEFAULT int64
func (p *RunData) GetLastUpdateTime() int64 {
  if !p.IsSetLastUpdateTime() {
    return RunData_LastUpdateTime_DEFAULT
  }
return *p.LastUpdateTime
}
func (p *RunData) IsSetCreateTime() bool {
  return p.CreateTime != nil
}

func (p *RunData) IsSetLastUpdateTime() bool {
  return p.LastUpdateTime != nil
}

func (p *RunData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AnalysisId = v
}
  return nil
}

func (p *RunData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RunId = v
}
  return nil
}

func (p *RunData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SpaceOccupied = v
}
  return nil
}

func (p *RunData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SubTypeId = v
}
  return nil
}

func (p *RunData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsDelete = v
}
  return nil
}

func (p *RunData)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreateTime = &v
}
  return nil
}

func (p *RunData)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LastUpdateTime = &v
}
  return nil
}

func (p *RunData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RunData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:analysisId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AnalysisId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:analysisId: ", p), err) }
  return err
}

func (p *RunData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runId: ", p), err) }
  return err
}

func (p *RunData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spaceOccupied", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:spaceOccupied: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.SpaceOccupied)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spaceOccupied (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:spaceOccupied: ", p), err) }
  return err
}

func (p *RunData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "subTypeId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:subTypeId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SubTypeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subTypeId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:subTypeId: ", p), err) }
  return err
}

func (p *RunData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isDelete", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isDelete: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsDelete)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isDelete (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isDelete: ", p), err) }
  return err
}

func (p *RunData) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreateTime() {
    if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:createTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.CreateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createTime (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:createTime: ", p), err) }
  }
  return err
}

func (p *RunData) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLastUpdateTime() {
    if err := oprot.WriteFieldBegin(ctx, "lastUpdateTime", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lastUpdateTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.LastUpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastUpdateTime (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lastUpdateTime: ", p), err) }
  }
  return err
}

func (p *RunData) Equals(other *RunData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AnalysisId != other.AnalysisId { return false }
  if p.RunId != other.RunId { return false }
  if p.SpaceOccupied != other.SpaceOccupied { return false }
  if p.SubTypeId != other.SubTypeId { return false }
  if p.IsDelete != other.IsDelete { return false }
  if p.CreateTime != other.CreateTime {
    if p.CreateTime == nil || other.CreateTime == nil {
      return false
    }
    if (*p.CreateTime) != (*other.CreateTime) { return false }
  }
  if p.LastUpdateTime != other.LastUpdateTime {
    if p.LastUpdateTime == nil || other.LastUpdateTime == nil {
      return false
    }
    if (*p.LastUpdateTime) != (*other.LastUpdateTime) { return false }
  }
  return true
}

func (p *RunData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunData(%+v)", *p)
}

// Attributes:
//  - RunDataId
//  - RunDataList
//  - RunData
type ReturnData struct {
  RunDataId *int32 `thrift:"runDataId,1" db:"runDataId" json:"runDataId,omitempty"`
  RunDataList []*RunData `thrift:"runDataList,2" db:"runDataList" json:"runDataList,omitempty"`
  RunData *RunData `thrift:"runData,3" db:"runData" json:"runData,omitempty"`
}

func NewReturnData() *ReturnData {
  return &ReturnData{}
}

var ReturnData_RunDataId_DEFAULT int32
func (p *ReturnData) GetRunDataId() int32 {
  if !p.IsSetRunDataId() {
    return ReturnData_RunDataId_DEFAULT
  }
return *p.RunDataId
}
var ReturnData_RunDataList_DEFAULT []*RunData

func (p *ReturnData) GetRunDataList() []*RunData {
  return p.RunDataList
}
var ReturnData_RunData_DEFAULT *RunData
func (p *ReturnData) GetRunData() *RunData {
  if !p.IsSetRunData() {
    return ReturnData_RunData_DEFAULT
  }
return p.RunData
}
func (p *ReturnData) IsSetRunDataId() bool {
  return p.RunDataId != nil
}

func (p *ReturnData) IsSetRunDataList() bool {
  return p.RunDataList != nil
}

func (p *ReturnData) IsSetRunData() bool {
  return p.RunData != nil
}

func (p *ReturnData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReturnData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RunDataId = &v
}
  return nil
}

func (p *ReturnData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RunData, 0, size)
  p.RunDataList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &RunData{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.RunDataList = append(p.RunDataList, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReturnData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.RunData = &RunData{}
  if err := p.RunData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RunData), err)
  }
  return nil
}

func (p *ReturnData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReturnData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReturnData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunDataId() {
    if err := oprot.WriteFieldBegin(ctx, "runDataId", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:runDataId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.RunDataId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runDataId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:runDataId: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunDataList() {
    if err := oprot.WriteFieldBegin(ctx, "runDataList", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runDataList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RunDataList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.RunDataList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runDataList: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunData() {
    if err := oprot.WriteFieldBegin(ctx, "runData", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:runData: ", p), err) }
    if err := p.RunData.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RunData), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:runData: ", p), err) }
  }
  return err
}

func (p *ReturnData) Equals(other *ReturnData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RunDataId != other.RunDataId {
    if p.RunDataId == nil || other.RunDataId == nil {
      return false
    }
    if (*p.RunDataId) != (*other.RunDataId) { return false }
  }
  if len(p.RunDataList) != len(other.RunDataList) { return false }
  for i, _tgt := range p.RunDataList {
    _src1 := other.RunDataList[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if !p.RunData.Equals(other.RunData) { return false }
  return true
}

func (p *ReturnData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReturnData(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Message
//  - Data
type Response struct {
  ErrorCode int32 `thrift:"errorCode,1,required" db:"errorCode" json:"errorCode"`
  Message *string `thrift:"message,2" db:"message" json:"message,omitempty"`
  Data *ReturnData `thrift:"data,3" db:"data" json:"data,omitempty"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetErrorCode() int32 {
  return p.ErrorCode
}
var Response_Message_DEFAULT string
func (p *Response) GetMessage() string {
  if !p.IsSetMessage() {
    return Response_Message_DEFAULT
  }
return *p.Message
}
var Response_Data_DEFAULT *ReturnData
func (p *Response) GetData() *ReturnData {
  if !p.IsSetData() {
    return Response_Data_DEFAULT
  }
return p.Data
}
func (p *Response) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Response) IsSetData() bool {
  return p.Data != nil
}

func (p *Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *Response)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorCode = v
}
  return nil
}

func (p *Response)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *Response)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &ReturnData{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *Response) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  }
  return err
}

func (p *Response) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := p.Data.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *Response) Equals(other *Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if p.Message != other.Message {
    if p.Message == nil || other.Message == nil {
      return false
    }
    if (*p.Message) != (*other.Message) { return false }
  }
  if !p.Data.Equals(other.Data) { return false }
  return true
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

type RunDataManagement interface {
  // Parameters:
  //  - Token
  //  - RunData
  AddRunData(ctx context.Context, token string, runData *RunData) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - Runid
  //  - Analysisid
  //  - SubTypeId
  RemoveRunData(ctx context.Context, token string, runid string, analysisid string, subTypeId int32) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - Runid
  //  - Analysisid
  //  - SubTypeId
  GetRunData(ctx context.Context, token string, runid string, analysisid string, subTypeId int32) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - RunData
  UpdateRunData(ctx context.Context, token string, runData *RunData) (_r *Response, _err error)
}

type RunDataManagementClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewRunDataManagementClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RunDataManagementClient {
  return &RunDataManagementClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewRunDataManagementClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RunDataManagementClient {
  return &RunDataManagementClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRunDataManagementClient(c thrift.TClient) *RunDataManagementClient {
  return &RunDataManagementClient{
    c: c,
  }
}

func (p *RunDataManagementClient) Client_() thrift.TClient {
  return p.c
}

func (p *RunDataManagementClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *RunDataManagementClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Token
//  - RunData
func (p *RunDataManagementClient) AddRunData(ctx context.Context, token string, runData *RunData) (_r *Response, _err error) {
  var _args2 RunDataManagementAddRunDataArgs
  _args2.Token = token
  _args2.RunData = runData
  var _result4 RunDataManagementAddRunDataResult
  var _meta3 thrift.ResponseMeta
  _meta3, _err = p.Client_().Call(ctx, "addRunData", &_args2, &_result4)
  p.SetLastResponseMeta_(_meta3)
  if _err != nil {
    return
  }
  if _ret5 := _result4.GetSuccess(); _ret5 != nil {
    return _ret5, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addRunData failed: unknown result")
}

// Parameters:
//  - Token
//  - Runid
//  - Analysisid
//  - SubTypeId
func (p *RunDataManagementClient) RemoveRunData(ctx context.Context, token string, runid string, analysisid string, subTypeId int32) (_r *Response, _err error) {
  var _args6 RunDataManagementRemoveRunDataArgs
  _args6.Token = token
  _args6.Runid = runid
  _args6.Analysisid = analysisid
  _args6.SubTypeId = subTypeId
  var _result8 RunDataManagementRemoveRunDataResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "removeRunData", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  if _ret9 := _result8.GetSuccess(); _ret9 != nil {
    return _ret9, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "removeRunData failed: unknown result")
}

// Parameters:
//  - Token
//  - Runid
//  - Analysisid
//  - SubTypeId
func (p *RunDataManagementClient) GetRunData(ctx context.Context, token string, runid string, analysisid string, subTypeId int32) (_r *Response, _err error) {
  var _args10 RunDataManagementGetRunDataArgs
  _args10.Token = token
  _args10.Runid = runid
  _args10.Analysisid = analysisid
  _args10.SubTypeId = subTypeId
  var _result12 RunDataManagementGetRunDataResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "getRunData", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  if _ret13 := _result12.GetSuccess(); _ret13 != nil {
    return _ret13, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getRunData failed: unknown result")
}

// Parameters:
//  - Token
//  - RunData
func (p *RunDataManagementClient) UpdateRunData(ctx context.Context, token string, runData *RunData) (_r *Response, _err error) {
  var _args14 RunDataManagementUpdateRunDataArgs
  _args14.Token = token
  _args14.RunData = runData
  var _result16 RunDataManagementUpdateRunDataResult
  var _meta15 thrift.ResponseMeta
  _meta15, _err = p.Client_().Call(ctx, "updateRunData", &_args14, &_result16)
  p.SetLastResponseMeta_(_meta15)
  if _err != nil {
    return
  }
  if _ret17 := _result16.GetSuccess(); _ret17 != nil {
    return _ret17, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "updateRunData failed: unknown result")
}

type RunDataManagementProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RunDataManagement
}

func (p *RunDataManagementProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RunDataManagementProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RunDataManagementProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRunDataManagementProcessor(handler RunDataManagement) *RunDataManagementProcessor {

  self18 := &RunDataManagementProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self18.processorMap["addRunData"] = &runDataManagementProcessorAddRunData{handler:handler}
  self18.processorMap["removeRunData"] = &runDataManagementProcessorRemoveRunData{handler:handler}
  self18.processorMap["getRunData"] = &runDataManagementProcessorGetRunData{handler:handler}
  self18.processorMap["updateRunData"] = &runDataManagementProcessorUpdateRunData{handler:handler}
return self18
}

func (p *RunDataManagementProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x19 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x19.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x19

}

type runDataManagementProcessorAddRunData struct {
  handler RunDataManagement
}

func (p *runDataManagementProcessorAddRunData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunDataManagementAddRunDataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addRunData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunDataManagementAddRunDataResult{}
  var retval *Response
  if retval, err2 = p.handler.AddRunData(ctx, args.Token, args.RunData); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addRunData: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "addRunData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "addRunData", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runDataManagementProcessorRemoveRunData struct {
  handler RunDataManagement
}

func (p *runDataManagementProcessorRemoveRunData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunDataManagementRemoveRunDataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeRunData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunDataManagementRemoveRunDataResult{}
  var retval *Response
  if retval, err2 = p.handler.RemoveRunData(ctx, args.Token, args.Runid, args.Analysisid, args.SubTypeId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeRunData: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeRunData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeRunData", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runDataManagementProcessorGetRunData struct {
  handler RunDataManagement
}

func (p *runDataManagementProcessorGetRunData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunDataManagementGetRunDataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunDataManagementGetRunDataResult{}
  var retval *Response
  if retval, err2 = p.handler.GetRunData(ctx, args.Token, args.Runid, args.Analysisid, args.SubTypeId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRunData: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRunData", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runDataManagementProcessorUpdateRunData struct {
  handler RunDataManagement
}

func (p *runDataManagementProcessorUpdateRunData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunDataManagementUpdateRunDataArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateRunData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunDataManagementUpdateRunDataResult{}
  var retval *Response
  if retval, err2 = p.handler.UpdateRunData(ctx, args.Token, args.RunData); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateRunData: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateRunData", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateRunData", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Token
//  - RunData
type RunDataManagementAddRunDataArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  RunData *RunData `thrift:"runData,2" db:"runData" json:"runData"`
}

func NewRunDataManagementAddRunDataArgs() *RunDataManagementAddRunDataArgs {
  return &RunDataManagementAddRunDataArgs{}
}


func (p *RunDataManagementAddRunDataArgs) GetToken() string {
  return p.Token
}
var RunDataManagementAddRunDataArgs_RunData_DEFAULT *RunData
func (p *RunDataManagementAddRunDataArgs) GetRunData() *RunData {
  if !p.IsSetRunData() {
    return RunDataManagementAddRunDataArgs_RunData_DEFAULT
  }
return p.RunData
}
func (p *RunDataManagementAddRunDataArgs) IsSetRunData() bool {
  return p.RunData != nil
}

func (p *RunDataManagementAddRunDataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunDataManagementAddRunDataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunDataManagementAddRunDataArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.RunData = &RunData{}
  if err := p.RunData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RunData), err)
  }
  return nil
}

func (p *RunDataManagementAddRunDataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addRunData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunDataManagementAddRunDataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunDataManagementAddRunDataArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runData: ", p), err) }
  if err := p.RunData.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RunData), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runData: ", p), err) }
  return err
}

func (p *RunDataManagementAddRunDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunDataManagementAddRunDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunDataManagementAddRunDataResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunDataManagementAddRunDataResult() *RunDataManagementAddRunDataResult {
  return &RunDataManagementAddRunDataResult{}
}

var RunDataManagementAddRunDataResult_Success_DEFAULT *Response
func (p *RunDataManagementAddRunDataResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunDataManagementAddRunDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunDataManagementAddRunDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunDataManagementAddRunDataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunDataManagementAddRunDataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunDataManagementAddRunDataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addRunData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunDataManagementAddRunDataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunDataManagementAddRunDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunDataManagementAddRunDataResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Runid
//  - Analysisid
//  - SubTypeId
type RunDataManagementRemoveRunDataArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Runid string `thrift:"runid,2" db:"runid" json:"runid"`
  Analysisid string `thrift:"analysisid,3" db:"analysisid" json:"analysisid"`
  SubTypeId int32 `thrift:"subTypeId,4" db:"subTypeId" json:"subTypeId"`
}

func NewRunDataManagementRemoveRunDataArgs() *RunDataManagementRemoveRunDataArgs {
  return &RunDataManagementRemoveRunDataArgs{}
}


func (p *RunDataManagementRemoveRunDataArgs) GetToken() string {
  return p.Token
}

func (p *RunDataManagementRemoveRunDataArgs) GetRunid() string {
  return p.Runid
}

func (p *RunDataManagementRemoveRunDataArgs) GetAnalysisid() string {
  return p.Analysisid
}

func (p *RunDataManagementRemoveRunDataArgs) GetSubTypeId() int32 {
  return p.SubTypeId
}
func (p *RunDataManagementRemoveRunDataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunDataManagementRemoveRunDataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunDataManagementRemoveRunDataArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Runid = v
}
  return nil
}

func (p *RunDataManagementRemoveRunDataArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Analysisid = v
}
  return nil
}

func (p *RunDataManagementRemoveRunDataArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SubTypeId = v
}
  return nil
}

func (p *RunDataManagementRemoveRunDataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeRunData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunDataManagementRemoveRunDataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunDataManagementRemoveRunDataArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Runid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runid: ", p), err) }
  return err
}

func (p *RunDataManagementRemoveRunDataArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:analysisid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Analysisid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:analysisid: ", p), err) }
  return err
}

func (p *RunDataManagementRemoveRunDataArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "subTypeId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:subTypeId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SubTypeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subTypeId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:subTypeId: ", p), err) }
  return err
}

func (p *RunDataManagementRemoveRunDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunDataManagementRemoveRunDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunDataManagementRemoveRunDataResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunDataManagementRemoveRunDataResult() *RunDataManagementRemoveRunDataResult {
  return &RunDataManagementRemoveRunDataResult{}
}

var RunDataManagementRemoveRunDataResult_Success_DEFAULT *Response
func (p *RunDataManagementRemoveRunDataResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunDataManagementRemoveRunDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunDataManagementRemoveRunDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunDataManagementRemoveRunDataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunDataManagementRemoveRunDataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunDataManagementRemoveRunDataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeRunData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunDataManagementRemoveRunDataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunDataManagementRemoveRunDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunDataManagementRemoveRunDataResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Runid
//  - Analysisid
//  - SubTypeId
type RunDataManagementGetRunDataArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Runid string `thrift:"runid,2" db:"runid" json:"runid"`
  Analysisid string `thrift:"analysisid,3" db:"analysisid" json:"analysisid"`
  SubTypeId int32 `thrift:"subTypeId,4" db:"subTypeId" json:"subTypeId"`
}

func NewRunDataManagementGetRunDataArgs() *RunDataManagementGetRunDataArgs {
  return &RunDataManagementGetRunDataArgs{}
}


func (p *RunDataManagementGetRunDataArgs) GetToken() string {
  return p.Token
}

func (p *RunDataManagementGetRunDataArgs) GetRunid() string {
  return p.Runid
}

func (p *RunDataManagementGetRunDataArgs) GetAnalysisid() string {
  return p.Analysisid
}

func (p *RunDataManagementGetRunDataArgs) GetSubTypeId() int32 {
  return p.SubTypeId
}
func (p *RunDataManagementGetRunDataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunDataManagementGetRunDataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunDataManagementGetRunDataArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Runid = v
}
  return nil
}

func (p *RunDataManagementGetRunDataArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Analysisid = v
}
  return nil
}

func (p *RunDataManagementGetRunDataArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SubTypeId = v
}
  return nil
}

func (p *RunDataManagementGetRunDataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunDataManagementGetRunDataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunDataManagementGetRunDataArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Runid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runid: ", p), err) }
  return err
}

func (p *RunDataManagementGetRunDataArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisid", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:analysisid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Analysisid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisid (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:analysisid: ", p), err) }
  return err
}

func (p *RunDataManagementGetRunDataArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "subTypeId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:subTypeId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SubTypeId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.subTypeId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:subTypeId: ", p), err) }
  return err
}

func (p *RunDataManagementGetRunDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunDataManagementGetRunDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunDataManagementGetRunDataResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunDataManagementGetRunDataResult() *RunDataManagementGetRunDataResult {
  return &RunDataManagementGetRunDataResult{}
}

var RunDataManagementGetRunDataResult_Success_DEFAULT *Response
func (p *RunDataManagementGetRunDataResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunDataManagementGetRunDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunDataManagementGetRunDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunDataManagementGetRunDataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunDataManagementGetRunDataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunDataManagementGetRunDataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunDataManagementGetRunDataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunDataManagementGetRunDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunDataManagementGetRunDataResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - RunData
type RunDataManagementUpdateRunDataArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  RunData *RunData `thrift:"runData,2" db:"runData" json:"runData"`
}

func NewRunDataManagementUpdateRunDataArgs() *RunDataManagementUpdateRunDataArgs {
  return &RunDataManagementUpdateRunDataArgs{}
}


func (p *RunDataManagementUpdateRunDataArgs) GetToken() string {
  return p.Token
}
var RunDataManagementUpdateRunDataArgs_RunData_DEFAULT *RunData
func (p *RunDataManagementUpdateRunDataArgs) GetRunData() *RunData {
  if !p.IsSetRunData() {
    return RunDataManagementUpdateRunDataArgs_RunData_DEFAULT
  }
return p.RunData
}
func (p *RunDataManagementUpdateRunDataArgs) IsSetRunData() bool {
  return p.RunData != nil
}

func (p *RunDataManagementUpdateRunDataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunDataManagementUpdateRunDataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunDataManagementUpdateRunDataArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.RunData = &RunData{}
  if err := p.RunData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RunData), err)
  }
  return nil
}

func (p *RunDataManagementUpdateRunDataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateRunData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunDataManagementUpdateRunDataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunDataManagementUpdateRunDataArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runData", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runData: ", p), err) }
  if err := p.RunData.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RunData), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runData: ", p), err) }
  return err
}

func (p *RunDataManagementUpdateRunDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunDataManagementUpdateRunDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunDataManagementUpdateRunDataResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunDataManagementUpdateRunDataResult() *RunDataManagementUpdateRunDataResult {
  return &RunDataManagementUpdateRunDataResult{}
}

var RunDataManagementUpdateRunDataResult_Success_DEFAULT *Response
func (p *RunDataManagementUpdateRunDataResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunDataManagementUpdateRunDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunDataManagementUpdateRunDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunDataManagementUpdateRunDataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunDataManagementUpdateRunDataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunDataManagementUpdateRunDataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateRunData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunDataManagementUpdateRunDataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunDataManagementUpdateRunDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunDataManagementUpdateRunDataResult(%+v)", *p)
}


