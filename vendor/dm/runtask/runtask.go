// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package runtask

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"dm/sampleinfo"
	"dm/runplan"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = sampleinfo.GoUnusedProtection__
var _ = runplan.GoUnusedProtection__
// Attributes:
//  - ID
//  - Type
//  - Variant
//  - Version
//  - Extra
type ConsumableInfo struct {
  ID int32 `thrift:"id,1,required" db:"id" json:"id"`
  Type string `thrift:"type,2,required" db:"type" json:"type"`
  Variant string `thrift:"variant,3,required" db:"variant" json:"variant"`
  Version string `thrift:"version,4,required" db:"version" json:"version"`
  Extra *string `thrift:"extra,5" db:"extra" json:"extra,omitempty"`
}

func NewConsumableInfo() *ConsumableInfo {
  return &ConsumableInfo{}
}


func (p *ConsumableInfo) GetID() int32 {
  return p.ID
}

func (p *ConsumableInfo) GetType() string {
  return p.Type
}

func (p *ConsumableInfo) GetVariant() string {
  return p.Variant
}

func (p *ConsumableInfo) GetVersion() string {
  return p.Version
}
var ConsumableInfo_Extra_DEFAULT string
func (p *ConsumableInfo) GetExtra() string {
  if !p.IsSetExtra() {
    return ConsumableInfo_Extra_DEFAULT
  }
return *p.Extra
}
func (p *ConsumableInfo) IsSetExtra() bool {
  return p.Extra != nil
}

func (p *ConsumableInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetID bool = false;
  var issetType bool = false;
  var issetVariant bool = false;
  var issetVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetVariant = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
        issetVersion = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetVariant{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Variant is not set"));
  }
  if !issetVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"));
  }
  return nil
}

func (p *ConsumableInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *ConsumableInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *ConsumableInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Variant = v
}
  return nil
}

func (p *ConsumableInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *ConsumableInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Extra = &v
}
  return nil
}

func (p *ConsumableInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ConsumableInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConsumableInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *ConsumableInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *ConsumableInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "variant", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:variant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Variant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.variant (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:variant: ", p), err) }
  return err
}

func (p *ConsumableInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:version: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:version: ", p), err) }
  return err
}

func (p *ConsumableInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExtra() {
    if err := oprot.WriteFieldBegin(ctx, "extra", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:extra: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Extra)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.extra (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:extra: ", p), err) }
  }
  return err
}

func (p *ConsumableInfo) Equals(other *ConsumableInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.Type != other.Type { return false }
  if p.Variant != other.Variant { return false }
  if p.Version != other.Version { return false }
  if p.Extra != other.Extra {
    if p.Extra == nil || other.Extra == nil {
      return false
    }
    if (*p.Extra) != (*other.Extra) { return false }
  }
  return true
}

func (p *ConsumableInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConsumableInfo(%+v)", *p)
}

// Attributes:
//  - OperatorId
//  - DeviceId
//  - ChipInfo
//  - SboxInfo
//  - WboxInfo
//  - Workflow
//  - Recipe
//  - Runplan
//  - Sampleinfo
//  - AnalysisId
//  - RunId
//  - StartTime
//  - FinishTime
//  - SeqStartTime
//  - SeqFinishTime
//  - Status
//  - OperatorName
//  - CreateTime
//  - LastUpdateTime
//  - ID
//  - ProjectName
//  - DeviceName
//  - IsDelete
//  - Read1Adapter
//  - Read2Adapter
//  - Index1Adapter
//  - Index2Adapter
//  - LibRead1Key
//  - LibIndex1Key
//  - LibRead2Key
//  - LibIndex2Key
//  - RefRead1Key
//  - RefIndex1Key
//  - RefRead2Key
//  - RefIndex2Key
type RunTask struct {
  OperatorId int32 `thrift:"operatorId,1" db:"operatorId" json:"operatorId"`
  DeviceId int32 `thrift:"deviceId,2" db:"deviceId" json:"deviceId"`
  ChipInfo *ConsumableInfo `thrift:"chipInfo,3" db:"chipInfo" json:"chipInfo"`
  SboxInfo *ConsumableInfo `thrift:"sboxInfo,4" db:"sboxInfo" json:"sboxInfo"`
  WboxInfo *ConsumableInfo `thrift:"wboxInfo,5" db:"wboxInfo" json:"wboxInfo"`
  Workflow string `thrift:"workflow,6,required" db:"workflow" json:"workflow"`
  Recipe string `thrift:"recipe,7,required" db:"recipe" json:"recipe"`
  Runplan *runplan.RunPlan `thrift:"runplan,8" db:"runplan" json:"runplan"`
  Sampleinfo *sampleinfo.SampleInfo `thrift:"sampleinfo,9" db:"sampleinfo" json:"sampleinfo,omitempty"`
  AnalysisId string `thrift:"analysisId,10" db:"analysisId" json:"analysisId"`
  RunId string `thrift:"runId,11,required" db:"runId" json:"runId"`
  StartTime *int64 `thrift:"startTime,12" db:"startTime" json:"startTime,omitempty"`
  FinishTime *int64 `thrift:"finishTime,13" db:"finishTime" json:"finishTime,omitempty"`
  SeqStartTime *int64 `thrift:"seqStartTime,14" db:"seqStartTime" json:"seqStartTime,omitempty"`
  SeqFinishTime *int64 `thrift:"seqFinishTime,15" db:"seqFinishTime" json:"seqFinishTime,omitempty"`
  Status int32 `thrift:"status,16" db:"status" json:"status"`
  OperatorName *string `thrift:"operatorName,17" db:"operatorName" json:"operatorName,omitempty"`
  CreateTime *int64 `thrift:"createTime,18" db:"createTime" json:"createTime,omitempty"`
  LastUpdateTime *int64 `thrift:"lastUpdateTime,19" db:"lastUpdateTime" json:"lastUpdateTime,omitempty"`
  ID *int32 `thrift:"id,20" db:"id" json:"id,omitempty"`
  ProjectName string `thrift:"projectName,21" db:"projectName" json:"projectName"`
  DeviceName string `thrift:"deviceName,22" db:"deviceName" json:"deviceName"`
  IsDelete bool `thrift:"isDelete,23" db:"isDelete" json:"isDelete"`
  Read1Adapter string `thrift:"read1Adapter,24" db:"read1Adapter" json:"read1Adapter"`
  Read2Adapter *string `thrift:"read2Adapter,25" db:"read2Adapter" json:"read2Adapter,omitempty"`
  Index1Adapter *string `thrift:"index1Adapter,26" db:"index1Adapter" json:"index1Adapter,omitempty"`
  Index2Adapter *string `thrift:"index2Adapter,27" db:"index2Adapter" json:"index2Adapter,omitempty"`
  LibRead1Key *string `thrift:"libRead1Key,28" db:"libRead1Key" json:"libRead1Key,omitempty"`
  LibIndex1Key *string `thrift:"libIndex1Key,29" db:"libIndex1Key" json:"libIndex1Key,omitempty"`
  LibRead2Key *string `thrift:"libRead2Key,30" db:"libRead2Key" json:"libRead2Key,omitempty"`
  LibIndex2Key *string `thrift:"libIndex2Key,31" db:"libIndex2Key" json:"libIndex2Key,omitempty"`
  RefRead1Key *string `thrift:"refRead1Key,32" db:"refRead1Key" json:"refRead1Key,omitempty"`
  RefIndex1Key *string `thrift:"refIndex1Key,33" db:"refIndex1Key" json:"refIndex1Key,omitempty"`
  RefRead2Key *string `thrift:"refRead2Key,34" db:"refRead2Key" json:"refRead2Key,omitempty"`
  RefIndex2Key *string `thrift:"refIndex2Key,35" db:"refIndex2Key" json:"refIndex2Key,omitempty"`
}

func NewRunTask() *RunTask {
  return &RunTask{}
}


func (p *RunTask) GetOperatorId() int32 {
  return p.OperatorId
}

func (p *RunTask) GetDeviceId() int32 {
  return p.DeviceId
}
var RunTask_ChipInfo_DEFAULT *ConsumableInfo
func (p *RunTask) GetChipInfo() *ConsumableInfo {
  if !p.IsSetChipInfo() {
    return RunTask_ChipInfo_DEFAULT
  }
return p.ChipInfo
}
var RunTask_SboxInfo_DEFAULT *ConsumableInfo
func (p *RunTask) GetSboxInfo() *ConsumableInfo {
  if !p.IsSetSboxInfo() {
    return RunTask_SboxInfo_DEFAULT
  }
return p.SboxInfo
}
var RunTask_WboxInfo_DEFAULT *ConsumableInfo
func (p *RunTask) GetWboxInfo() *ConsumableInfo {
  if !p.IsSetWboxInfo() {
    return RunTask_WboxInfo_DEFAULT
  }
return p.WboxInfo
}

func (p *RunTask) GetWorkflow() string {
  return p.Workflow
}

func (p *RunTask) GetRecipe() string {
  return p.Recipe
}
var RunTask_Runplan_DEFAULT *runplan.RunPlan
func (p *RunTask) GetRunplan() *runplan.RunPlan {
  if !p.IsSetRunplan() {
    return RunTask_Runplan_DEFAULT
  }
return p.Runplan
}
var RunTask_Sampleinfo_DEFAULT *sampleinfo.SampleInfo
func (p *RunTask) GetSampleinfo() *sampleinfo.SampleInfo {
  if !p.IsSetSampleinfo() {
    return RunTask_Sampleinfo_DEFAULT
  }
return p.Sampleinfo
}

func (p *RunTask) GetAnalysisId() string {
  return p.AnalysisId
}

func (p *RunTask) GetRunId() string {
  return p.RunId
}
var RunTask_StartTime_DEFAULT int64
func (p *RunTask) GetStartTime() int64 {
  if !p.IsSetStartTime() {
    return RunTask_StartTime_DEFAULT
  }
return *p.StartTime
}
var RunTask_FinishTime_DEFAULT int64
func (p *RunTask) GetFinishTime() int64 {
  if !p.IsSetFinishTime() {
    return RunTask_FinishTime_DEFAULT
  }
return *p.FinishTime
}
var RunTask_SeqStartTime_DEFAULT int64
func (p *RunTask) GetSeqStartTime() int64 {
  if !p.IsSetSeqStartTime() {
    return RunTask_SeqStartTime_DEFAULT
  }
return *p.SeqStartTime
}
var RunTask_SeqFinishTime_DEFAULT int64
func (p *RunTask) GetSeqFinishTime() int64 {
  if !p.IsSetSeqFinishTime() {
    return RunTask_SeqFinishTime_DEFAULT
  }
return *p.SeqFinishTime
}

func (p *RunTask) GetStatus() int32 {
  return p.Status
}
var RunTask_OperatorName_DEFAULT string
func (p *RunTask) GetOperatorName() string {
  if !p.IsSetOperatorName() {
    return RunTask_OperatorName_DEFAULT
  }
return *p.OperatorName
}
var RunTask_CreateTime_DEFAULT int64
func (p *RunTask) GetCreateTime() int64 {
  if !p.IsSetCreateTime() {
    return RunTask_CreateTime_DEFAULT
  }
return *p.CreateTime
}
var RunTask_LastUpdateTime_DEFAULT int64
func (p *RunTask) GetLastUpdateTime() int64 {
  if !p.IsSetLastUpdateTime() {
    return RunTask_LastUpdateTime_DEFAULT
  }
return *p.LastUpdateTime
}
var RunTask_ID_DEFAULT int32
func (p *RunTask) GetID() int32 {
  if !p.IsSetID() {
    return RunTask_ID_DEFAULT
  }
return *p.ID
}

func (p *RunTask) GetProjectName() string {
  return p.ProjectName
}

func (p *RunTask) GetDeviceName() string {
  return p.DeviceName
}

func (p *RunTask) GetIsDelete() bool {
  return p.IsDelete
}

func (p *RunTask) GetRead1Adapter() string {
  return p.Read1Adapter
}
var RunTask_Read2Adapter_DEFAULT string
func (p *RunTask) GetRead2Adapter() string {
  if !p.IsSetRead2Adapter() {
    return RunTask_Read2Adapter_DEFAULT
  }
return *p.Read2Adapter
}
var RunTask_Index1Adapter_DEFAULT string
func (p *RunTask) GetIndex1Adapter() string {
  if !p.IsSetIndex1Adapter() {
    return RunTask_Index1Adapter_DEFAULT
  }
return *p.Index1Adapter
}
var RunTask_Index2Adapter_DEFAULT string
func (p *RunTask) GetIndex2Adapter() string {
  if !p.IsSetIndex2Adapter() {
    return RunTask_Index2Adapter_DEFAULT
  }
return *p.Index2Adapter
}
var RunTask_LibRead1Key_DEFAULT string
func (p *RunTask) GetLibRead1Key() string {
  if !p.IsSetLibRead1Key() {
    return RunTask_LibRead1Key_DEFAULT
  }
return *p.LibRead1Key
}
var RunTask_LibIndex1Key_DEFAULT string
func (p *RunTask) GetLibIndex1Key() string {
  if !p.IsSetLibIndex1Key() {
    return RunTask_LibIndex1Key_DEFAULT
  }
return *p.LibIndex1Key
}
var RunTask_LibRead2Key_DEFAULT string
func (p *RunTask) GetLibRead2Key() string {
  if !p.IsSetLibRead2Key() {
    return RunTask_LibRead2Key_DEFAULT
  }
return *p.LibRead2Key
}
var RunTask_LibIndex2Key_DEFAULT string
func (p *RunTask) GetLibIndex2Key() string {
  if !p.IsSetLibIndex2Key() {
    return RunTask_LibIndex2Key_DEFAULT
  }
return *p.LibIndex2Key
}
var RunTask_RefRead1Key_DEFAULT string
func (p *RunTask) GetRefRead1Key() string {
  if !p.IsSetRefRead1Key() {
    return RunTask_RefRead1Key_DEFAULT
  }
return *p.RefRead1Key
}
var RunTask_RefIndex1Key_DEFAULT string
func (p *RunTask) GetRefIndex1Key() string {
  if !p.IsSetRefIndex1Key() {
    return RunTask_RefIndex1Key_DEFAULT
  }
return *p.RefIndex1Key
}
var RunTask_RefRead2Key_DEFAULT string
func (p *RunTask) GetRefRead2Key() string {
  if !p.IsSetRefRead2Key() {
    return RunTask_RefRead2Key_DEFAULT
  }
return *p.RefRead2Key
}
var RunTask_RefIndex2Key_DEFAULT string
func (p *RunTask) GetRefIndex2Key() string {
  if !p.IsSetRefIndex2Key() {
    return RunTask_RefIndex2Key_DEFAULT
  }
return *p.RefIndex2Key
}
func (p *RunTask) IsSetChipInfo() bool {
  return p.ChipInfo != nil
}

func (p *RunTask) IsSetSboxInfo() bool {
  return p.SboxInfo != nil
}

func (p *RunTask) IsSetWboxInfo() bool {
  return p.WboxInfo != nil
}

func (p *RunTask) IsSetRunplan() bool {
  return p.Runplan != nil
}

func (p *RunTask) IsSetSampleinfo() bool {
  return p.Sampleinfo != nil
}

func (p *RunTask) IsSetStartTime() bool {
  return p.StartTime != nil
}

func (p *RunTask) IsSetFinishTime() bool {
  return p.FinishTime != nil
}

func (p *RunTask) IsSetSeqStartTime() bool {
  return p.SeqStartTime != nil
}

func (p *RunTask) IsSetSeqFinishTime() bool {
  return p.SeqFinishTime != nil
}

func (p *RunTask) IsSetOperatorName() bool {
  return p.OperatorName != nil
}

func (p *RunTask) IsSetCreateTime() bool {
  return p.CreateTime != nil
}

func (p *RunTask) IsSetLastUpdateTime() bool {
  return p.LastUpdateTime != nil
}

func (p *RunTask) IsSetID() bool {
  return p.ID != nil
}

func (p *RunTask) IsSetRead2Adapter() bool {
  return p.Read2Adapter != nil
}

func (p *RunTask) IsSetIndex1Adapter() bool {
  return p.Index1Adapter != nil
}

func (p *RunTask) IsSetIndex2Adapter() bool {
  return p.Index2Adapter != nil
}

func (p *RunTask) IsSetLibRead1Key() bool {
  return p.LibRead1Key != nil
}

func (p *RunTask) IsSetLibIndex1Key() bool {
  return p.LibIndex1Key != nil
}

func (p *RunTask) IsSetLibRead2Key() bool {
  return p.LibRead2Key != nil
}

func (p *RunTask) IsSetLibIndex2Key() bool {
  return p.LibIndex2Key != nil
}

func (p *RunTask) IsSetRefRead1Key() bool {
  return p.RefRead1Key != nil
}

func (p *RunTask) IsSetRefIndex1Key() bool {
  return p.RefIndex1Key != nil
}

func (p *RunTask) IsSetRefRead2Key() bool {
  return p.RefRead2Key != nil
}

func (p *RunTask) IsSetRefIndex2Key() bool {
  return p.RefIndex2Key != nil
}

func (p *RunTask) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetWorkflow bool = false;
  var issetRecipe bool = false;
  var issetRunId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
        issetWorkflow = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
        issetRecipe = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
        issetRunId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetWorkflow{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Workflow is not set"));
  }
  if !issetRecipe{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Recipe is not set"));
  }
  if !issetRunId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RunId is not set"));
  }
  return nil
}

func (p *RunTask)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.OperatorId = v
}
  return nil
}

func (p *RunTask)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeviceId = v
}
  return nil
}

func (p *RunTask)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.ChipInfo = &ConsumableInfo{}
  if err := p.ChipInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChipInfo), err)
  }
  return nil
}

func (p *RunTask)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.SboxInfo = &ConsumableInfo{}
  if err := p.SboxInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SboxInfo), err)
  }
  return nil
}

func (p *RunTask)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.WboxInfo = &ConsumableInfo{}
  if err := p.WboxInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WboxInfo), err)
  }
  return nil
}

func (p *RunTask)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Workflow = v
}
  return nil
}

func (p *RunTask)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Recipe = v
}
  return nil
}

func (p *RunTask)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.Runplan = &runplan.RunPlan{}
  if err := p.Runplan.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Runplan), err)
  }
  return nil
}

func (p *RunTask)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  p.Sampleinfo = &sampleinfo.SampleInfo{}
  if err := p.Sampleinfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sampleinfo), err)
  }
  return nil
}

func (p *RunTask)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.AnalysisId = v
}
  return nil
}

func (p *RunTask)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.RunId = v
}
  return nil
}

func (p *RunTask)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.StartTime = &v
}
  return nil
}

func (p *RunTask)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.FinishTime = &v
}
  return nil
}

func (p *RunTask)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.SeqStartTime = &v
}
  return nil
}

func (p *RunTask)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.SeqFinishTime = &v
}
  return nil
}

func (p *RunTask)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *RunTask)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.OperatorName = &v
}
  return nil
}

func (p *RunTask)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.CreateTime = &v
}
  return nil
}

func (p *RunTask)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.LastUpdateTime = &v
}
  return nil
}

func (p *RunTask)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *RunTask)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.ProjectName = v
}
  return nil
}

func (p *RunTask)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.DeviceName = v
}
  return nil
}

func (p *RunTask)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.IsDelete = v
}
  return nil
}

func (p *RunTask)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.Read1Adapter = v
}
  return nil
}

func (p *RunTask)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.Read2Adapter = &v
}
  return nil
}

func (p *RunTask)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.Index1Adapter = &v
}
  return nil
}

func (p *RunTask)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.Index2Adapter = &v
}
  return nil
}

func (p *RunTask)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.LibRead1Key = &v
}
  return nil
}

func (p *RunTask)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.LibIndex1Key = &v
}
  return nil
}

func (p *RunTask)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.LibRead2Key = &v
}
  return nil
}

func (p *RunTask)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.LibIndex2Key = &v
}
  return nil
}

func (p *RunTask)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.RefRead1Key = &v
}
  return nil
}

func (p *RunTask)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.RefIndex1Key = &v
}
  return nil
}

func (p *RunTask)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.RefRead2Key = &v
}
  return nil
}

func (p *RunTask)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.RefIndex2Key = &v
}
  return nil
}

func (p *RunTask) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RunTask"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTask) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "operatorId", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:operatorId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OperatorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.operatorId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:operatorId: ", p), err) }
  return err
}

func (p *RunTask) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.DeviceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceId: ", p), err) }
  return err
}

func (p *RunTask) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "chipInfo", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chipInfo: ", p), err) }
  if err := p.ChipInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChipInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chipInfo: ", p), err) }
  return err
}

func (p *RunTask) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sboxInfo", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sboxInfo: ", p), err) }
  if err := p.SboxInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SboxInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sboxInfo: ", p), err) }
  return err
}

func (p *RunTask) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "wboxInfo", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:wboxInfo: ", p), err) }
  if err := p.WboxInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WboxInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:wboxInfo: ", p), err) }
  return err
}

func (p *RunTask) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "workflow", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:workflow: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Workflow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.workflow (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:workflow: ", p), err) }
  return err
}

func (p *RunTask) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "recipe", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:recipe: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Recipe)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.recipe (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:recipe: ", p), err) }
  return err
}

func (p *RunTask) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runplan", thrift.STRUCT, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:runplan: ", p), err) }
  if err := p.Runplan.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Runplan), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:runplan: ", p), err) }
  return err
}

func (p *RunTask) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampleinfo() {
    if err := oprot.WriteFieldBegin(ctx, "sampleinfo", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:sampleinfo: ", p), err) }
    if err := p.Sampleinfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sampleinfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:sampleinfo: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisId", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:analysisId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AnalysisId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisId (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:analysisId: ", p), err) }
  return err
}

func (p *RunTask) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runId", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:runId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:runId: ", p), err) }
  return err
}

func (p *RunTask) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStartTime() {
    if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:startTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.StartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startTime (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:startTime: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFinishTime() {
    if err := oprot.WriteFieldBegin(ctx, "finishTime", thrift.I64, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:finishTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.FinishTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.finishTime (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:finishTime: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSeqStartTime() {
    if err := oprot.WriteFieldBegin(ctx, "seqStartTime", thrift.I64, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:seqStartTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SeqStartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.seqStartTime (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:seqStartTime: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSeqFinishTime() {
    if err := oprot.WriteFieldBegin(ctx, "seqFinishTime", thrift.I64, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:seqFinishTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SeqFinishTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.seqFinishTime (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:seqFinishTime: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:status: ", p), err) }
  return err
}

func (p *RunTask) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOperatorName() {
    if err := oprot.WriteFieldBegin(ctx, "operatorName", thrift.STRING, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:operatorName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.OperatorName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.operatorName (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:operatorName: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreateTime() {
    if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I64, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:createTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.CreateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createTime (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:createTime: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLastUpdateTime() {
    if err := oprot.WriteFieldBegin(ctx, "lastUpdateTime", thrift.I64, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:lastUpdateTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.LastUpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastUpdateTime (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:lastUpdateTime: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin(ctx, "id", thrift.I32, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:id: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:id: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "projectName", thrift.STRING, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:projectName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ProjectName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectName (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:projectName: ", p), err) }
  return err
}

func (p *RunTask) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceName", thrift.STRING, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:deviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DeviceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceName (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:deviceName: ", p), err) }
  return err
}

func (p *RunTask) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isDelete", thrift.BOOL, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:isDelete: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsDelete)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isDelete (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:isDelete: ", p), err) }
  return err
}

func (p *RunTask) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "read1Adapter", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:read1Adapter: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Read1Adapter)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.read1Adapter (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:read1Adapter: ", p), err) }
  return err
}

func (p *RunTask) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRead2Adapter() {
    if err := oprot.WriteFieldBegin(ctx, "read2Adapter", thrift.STRING, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:read2Adapter: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Read2Adapter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.read2Adapter (25) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:read2Adapter: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex1Adapter() {
    if err := oprot.WriteFieldBegin(ctx, "index1Adapter", thrift.STRING, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:index1Adapter: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Index1Adapter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index1Adapter (26) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:index1Adapter: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex2Adapter() {
    if err := oprot.WriteFieldBegin(ctx, "index2Adapter", thrift.STRING, 27); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:index2Adapter: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Index2Adapter)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index2Adapter (27) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 27:index2Adapter: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLibRead1Key() {
    if err := oprot.WriteFieldBegin(ctx, "libRead1Key", thrift.STRING, 28); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:libRead1Key: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LibRead1Key)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.libRead1Key (28) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 28:libRead1Key: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLibIndex1Key() {
    if err := oprot.WriteFieldBegin(ctx, "libIndex1Key", thrift.STRING, 29); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:libIndex1Key: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LibIndex1Key)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.libIndex1Key (29) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 29:libIndex1Key: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLibRead2Key() {
    if err := oprot.WriteFieldBegin(ctx, "libRead2Key", thrift.STRING, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:libRead2Key: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LibRead2Key)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.libRead2Key (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:libRead2Key: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLibIndex2Key() {
    if err := oprot.WriteFieldBegin(ctx, "libIndex2Key", thrift.STRING, 31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:libIndex2Key: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LibIndex2Key)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.libIndex2Key (31) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 31:libIndex2Key: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRefRead1Key() {
    if err := oprot.WriteFieldBegin(ctx, "refRead1Key", thrift.STRING, 32); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:refRead1Key: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RefRead1Key)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.refRead1Key (32) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 32:refRead1Key: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRefIndex1Key() {
    if err := oprot.WriteFieldBegin(ctx, "refIndex1Key", thrift.STRING, 33); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:refIndex1Key: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RefIndex1Key)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.refIndex1Key (33) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 33:refIndex1Key: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRefRead2Key() {
    if err := oprot.WriteFieldBegin(ctx, "refRead2Key", thrift.STRING, 34); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:refRead2Key: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RefRead2Key)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.refRead2Key (34) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 34:refRead2Key: ", p), err) }
  }
  return err
}

func (p *RunTask) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRefIndex2Key() {
    if err := oprot.WriteFieldBegin(ctx, "refIndex2Key", thrift.STRING, 35); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:refIndex2Key: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RefIndex2Key)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.refIndex2Key (35) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 35:refIndex2Key: ", p), err) }
  }
  return err
}

func (p *RunTask) Equals(other *RunTask) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.OperatorId != other.OperatorId { return false }
  if p.DeviceId != other.DeviceId { return false }
  if !p.ChipInfo.Equals(other.ChipInfo) { return false }
  if !p.SboxInfo.Equals(other.SboxInfo) { return false }
  if !p.WboxInfo.Equals(other.WboxInfo) { return false }
  if p.Workflow != other.Workflow { return false }
  if p.Recipe != other.Recipe { return false }
  if !p.Runplan.Equals(other.Runplan) { return false }
  if !p.Sampleinfo.Equals(other.Sampleinfo) { return false }
  if p.AnalysisId != other.AnalysisId { return false }
  if p.RunId != other.RunId { return false }
  if p.StartTime != other.StartTime {
    if p.StartTime == nil || other.StartTime == nil {
      return false
    }
    if (*p.StartTime) != (*other.StartTime) { return false }
  }
  if p.FinishTime != other.FinishTime {
    if p.FinishTime == nil || other.FinishTime == nil {
      return false
    }
    if (*p.FinishTime) != (*other.FinishTime) { return false }
  }
  if p.SeqStartTime != other.SeqStartTime {
    if p.SeqStartTime == nil || other.SeqStartTime == nil {
      return false
    }
    if (*p.SeqStartTime) != (*other.SeqStartTime) { return false }
  }
  if p.SeqFinishTime != other.SeqFinishTime {
    if p.SeqFinishTime == nil || other.SeqFinishTime == nil {
      return false
    }
    if (*p.SeqFinishTime) != (*other.SeqFinishTime) { return false }
  }
  if p.Status != other.Status { return false }
  if p.OperatorName != other.OperatorName {
    if p.OperatorName == nil || other.OperatorName == nil {
      return false
    }
    if (*p.OperatorName) != (*other.OperatorName) { return false }
  }
  if p.CreateTime != other.CreateTime {
    if p.CreateTime == nil || other.CreateTime == nil {
      return false
    }
    if (*p.CreateTime) != (*other.CreateTime) { return false }
  }
  if p.LastUpdateTime != other.LastUpdateTime {
    if p.LastUpdateTime == nil || other.LastUpdateTime == nil {
      return false
    }
    if (*p.LastUpdateTime) != (*other.LastUpdateTime) { return false }
  }
  if p.ID != other.ID {
    if p.ID == nil || other.ID == nil {
      return false
    }
    if (*p.ID) != (*other.ID) { return false }
  }
  if p.ProjectName != other.ProjectName { return false }
  if p.DeviceName != other.DeviceName { return false }
  if p.IsDelete != other.IsDelete { return false }
  if p.Read1Adapter != other.Read1Adapter { return false }
  if p.Read2Adapter != other.Read2Adapter {
    if p.Read2Adapter == nil || other.Read2Adapter == nil {
      return false
    }
    if (*p.Read2Adapter) != (*other.Read2Adapter) { return false }
  }
  if p.Index1Adapter != other.Index1Adapter {
    if p.Index1Adapter == nil || other.Index1Adapter == nil {
      return false
    }
    if (*p.Index1Adapter) != (*other.Index1Adapter) { return false }
  }
  if p.Index2Adapter != other.Index2Adapter {
    if p.Index2Adapter == nil || other.Index2Adapter == nil {
      return false
    }
    if (*p.Index2Adapter) != (*other.Index2Adapter) { return false }
  }
  if p.LibRead1Key != other.LibRead1Key {
    if p.LibRead1Key == nil || other.LibRead1Key == nil {
      return false
    }
    if (*p.LibRead1Key) != (*other.LibRead1Key) { return false }
  }
  if p.LibIndex1Key != other.LibIndex1Key {
    if p.LibIndex1Key == nil || other.LibIndex1Key == nil {
      return false
    }
    if (*p.LibIndex1Key) != (*other.LibIndex1Key) { return false }
  }
  if p.LibRead2Key != other.LibRead2Key {
    if p.LibRead2Key == nil || other.LibRead2Key == nil {
      return false
    }
    if (*p.LibRead2Key) != (*other.LibRead2Key) { return false }
  }
  if p.LibIndex2Key != other.LibIndex2Key {
    if p.LibIndex2Key == nil || other.LibIndex2Key == nil {
      return false
    }
    if (*p.LibIndex2Key) != (*other.LibIndex2Key) { return false }
  }
  if p.RefRead1Key != other.RefRead1Key {
    if p.RefRead1Key == nil || other.RefRead1Key == nil {
      return false
    }
    if (*p.RefRead1Key) != (*other.RefRead1Key) { return false }
  }
  if p.RefIndex1Key != other.RefIndex1Key {
    if p.RefIndex1Key == nil || other.RefIndex1Key == nil {
      return false
    }
    if (*p.RefIndex1Key) != (*other.RefIndex1Key) { return false }
  }
  if p.RefRead2Key != other.RefRead2Key {
    if p.RefRead2Key == nil || other.RefRead2Key == nil {
      return false
    }
    if (*p.RefRead2Key) != (*other.RefRead2Key) { return false }
  }
  if p.RefIndex2Key != other.RefIndex2Key {
    if p.RefIndex2Key == nil || other.RefIndex2Key == nil {
      return false
    }
    if (*p.RefIndex2Key) != (*other.RefIndex2Key) { return false }
  }
  return true
}

func (p *RunTask) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTask(%+v)", *p)
}

// Attributes:
//  - Status
//  - RunTaskList
//  - ChipInfo
//  - WboxInfo
//  - SboxInfo
//  - RunTaskTotalCount
//  - CurrentPage
type ReturnData struct {
  Status *int32 `thrift:"status,1" db:"status" json:"status,omitempty"`
  RunTaskList []*RunTask `thrift:"runTaskList,2" db:"runTaskList" json:"runTaskList,omitempty"`
  ChipInfo *ConsumableInfo `thrift:"chipInfo,3" db:"chipInfo" json:"chipInfo,omitempty"`
  WboxInfo *ConsumableInfo `thrift:"wboxInfo,4" db:"wboxInfo" json:"wboxInfo,omitempty"`
  SboxInfo *ConsumableInfo `thrift:"sboxInfo,5" db:"sboxInfo" json:"sboxInfo,omitempty"`
  RunTaskTotalCount *int32 `thrift:"runTaskTotalCount,6" db:"runTaskTotalCount" json:"runTaskTotalCount,omitempty"`
  CurrentPage *int32 `thrift:"currentPage,7" db:"currentPage" json:"currentPage,omitempty"`
}

func NewReturnData() *ReturnData {
  return &ReturnData{}
}

var ReturnData_Status_DEFAULT int32
func (p *ReturnData) GetStatus() int32 {
  if !p.IsSetStatus() {
    return ReturnData_Status_DEFAULT
  }
return *p.Status
}
var ReturnData_RunTaskList_DEFAULT []*RunTask

func (p *ReturnData) GetRunTaskList() []*RunTask {
  return p.RunTaskList
}
var ReturnData_ChipInfo_DEFAULT *ConsumableInfo
func (p *ReturnData) GetChipInfo() *ConsumableInfo {
  if !p.IsSetChipInfo() {
    return ReturnData_ChipInfo_DEFAULT
  }
return p.ChipInfo
}
var ReturnData_WboxInfo_DEFAULT *ConsumableInfo
func (p *ReturnData) GetWboxInfo() *ConsumableInfo {
  if !p.IsSetWboxInfo() {
    return ReturnData_WboxInfo_DEFAULT
  }
return p.WboxInfo
}
var ReturnData_SboxInfo_DEFAULT *ConsumableInfo
func (p *ReturnData) GetSboxInfo() *ConsumableInfo {
  if !p.IsSetSboxInfo() {
    return ReturnData_SboxInfo_DEFAULT
  }
return p.SboxInfo
}
var ReturnData_RunTaskTotalCount_DEFAULT int32
func (p *ReturnData) GetRunTaskTotalCount() int32 {
  if !p.IsSetRunTaskTotalCount() {
    return ReturnData_RunTaskTotalCount_DEFAULT
  }
return *p.RunTaskTotalCount
}
var ReturnData_CurrentPage_DEFAULT int32
func (p *ReturnData) GetCurrentPage() int32 {
  if !p.IsSetCurrentPage() {
    return ReturnData_CurrentPage_DEFAULT
  }
return *p.CurrentPage
}
func (p *ReturnData) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ReturnData) IsSetRunTaskList() bool {
  return p.RunTaskList != nil
}

func (p *ReturnData) IsSetChipInfo() bool {
  return p.ChipInfo != nil
}

func (p *ReturnData) IsSetWboxInfo() bool {
  return p.WboxInfo != nil
}

func (p *ReturnData) IsSetSboxInfo() bool {
  return p.SboxInfo != nil
}

func (p *ReturnData) IsSetRunTaskTotalCount() bool {
  return p.RunTaskTotalCount != nil
}

func (p *ReturnData) IsSetCurrentPage() bool {
  return p.CurrentPage != nil
}

func (p *ReturnData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReturnData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = &v
}
  return nil
}

func (p *ReturnData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RunTask, 0, size)
  p.RunTaskList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &RunTask{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.RunTaskList = append(p.RunTaskList, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReturnData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.ChipInfo = &ConsumableInfo{}
  if err := p.ChipInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ChipInfo), err)
  }
  return nil
}

func (p *ReturnData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  p.WboxInfo = &ConsumableInfo{}
  if err := p.WboxInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.WboxInfo), err)
  }
  return nil
}

func (p *ReturnData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  p.SboxInfo = &ConsumableInfo{}
  if err := p.SboxInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SboxInfo), err)
  }
  return nil
}

func (p *ReturnData)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RunTaskTotalCount = &v
}
  return nil
}

func (p *ReturnData)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CurrentPage = &v
}
  return nil
}

func (p *ReturnData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReturnData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReturnData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunTaskList() {
    if err := oprot.WriteFieldBegin(ctx, "runTaskList", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runTaskList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RunTaskList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.RunTaskList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runTaskList: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetChipInfo() {
    if err := oprot.WriteFieldBegin(ctx, "chipInfo", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:chipInfo: ", p), err) }
    if err := p.ChipInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ChipInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:chipInfo: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetWboxInfo() {
    if err := oprot.WriteFieldBegin(ctx, "wboxInfo", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:wboxInfo: ", p), err) }
    if err := p.WboxInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.WboxInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:wboxInfo: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSboxInfo() {
    if err := oprot.WriteFieldBegin(ctx, "sboxInfo", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sboxInfo: ", p), err) }
    if err := p.SboxInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SboxInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sboxInfo: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunTaskTotalCount() {
    if err := oprot.WriteFieldBegin(ctx, "runTaskTotalCount", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:runTaskTotalCount: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.RunTaskTotalCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runTaskTotalCount (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:runTaskTotalCount: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCurrentPage() {
    if err := oprot.WriteFieldBegin(ctx, "currentPage", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:currentPage: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.CurrentPage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.currentPage (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:currentPage: ", p), err) }
  }
  return err
}

func (p *ReturnData) Equals(other *ReturnData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  if len(p.RunTaskList) != len(other.RunTaskList) { return false }
  for i, _tgt := range p.RunTaskList {
    _src1 := other.RunTaskList[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if !p.ChipInfo.Equals(other.ChipInfo) { return false }
  if !p.WboxInfo.Equals(other.WboxInfo) { return false }
  if !p.SboxInfo.Equals(other.SboxInfo) { return false }
  if p.RunTaskTotalCount != other.RunTaskTotalCount {
    if p.RunTaskTotalCount == nil || other.RunTaskTotalCount == nil {
      return false
    }
    if (*p.RunTaskTotalCount) != (*other.RunTaskTotalCount) { return false }
  }
  if p.CurrentPage != other.CurrentPage {
    if p.CurrentPage == nil || other.CurrentPage == nil {
      return false
    }
    if (*p.CurrentPage) != (*other.CurrentPage) { return false }
  }
  return true
}

func (p *ReturnData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReturnData(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Message
//  - Data
type Response struct {
  ErrorCode int32 `thrift:"errorCode,1,required" db:"errorCode" json:"errorCode"`
  Message *string `thrift:"message,2" db:"message" json:"message,omitempty"`
  Data *ReturnData `thrift:"data,3" db:"data" json:"data,omitempty"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetErrorCode() int32 {
  return p.ErrorCode
}
var Response_Message_DEFAULT string
func (p *Response) GetMessage() string {
  if !p.IsSetMessage() {
    return Response_Message_DEFAULT
  }
return *p.Message
}
var Response_Data_DEFAULT *ReturnData
func (p *Response) GetData() *ReturnData {
  if !p.IsSetData() {
    return Response_Data_DEFAULT
  }
return p.Data
}
func (p *Response) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Response) IsSetData() bool {
  return p.Data != nil
}

func (p *Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *Response)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorCode = v
}
  return nil
}

func (p *Response)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *Response)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &ReturnData{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *Response) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  }
  return err
}

func (p *Response) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := p.Data.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *Response) Equals(other *Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if p.Message != other.Message {
    if p.Message == nil || other.Message == nil {
      return false
    }
    if (*p.Message) != (*other.Message) { return false }
  }
  if !p.Data.Equals(other.Data) { return false }
  return true
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

// Attributes:
//  - TimeFrom
//  - TimeTo
//  - Status
//  - Runname
//  - Creator
//  - PageNum
//  - PageSize
type SearchCriteria struct {
  TimeFrom *int64 `thrift:"timeFrom,1" db:"timeFrom" json:"timeFrom,omitempty"`
  TimeTo *int64 `thrift:"timeTo,2" db:"timeTo" json:"timeTo,omitempty"`
  Status *int32 `thrift:"status,3" db:"status" json:"status,omitempty"`
  Runname *string `thrift:"runname,4" db:"runname" json:"runname,omitempty"`
  Creator *string `thrift:"creator,5" db:"creator" json:"creator,omitempty"`
  PageNum *int32 `thrift:"pageNum,6" db:"pageNum" json:"pageNum,omitempty"`
  PageSize *int32 `thrift:"pageSize,7" db:"pageSize" json:"pageSize,omitempty"`
}

func NewSearchCriteria() *SearchCriteria {
  return &SearchCriteria{}
}

var SearchCriteria_TimeFrom_DEFAULT int64
func (p *SearchCriteria) GetTimeFrom() int64 {
  if !p.IsSetTimeFrom() {
    return SearchCriteria_TimeFrom_DEFAULT
  }
return *p.TimeFrom
}
var SearchCriteria_TimeTo_DEFAULT int64
func (p *SearchCriteria) GetTimeTo() int64 {
  if !p.IsSetTimeTo() {
    return SearchCriteria_TimeTo_DEFAULT
  }
return *p.TimeTo
}
var SearchCriteria_Status_DEFAULT int32
func (p *SearchCriteria) GetStatus() int32 {
  if !p.IsSetStatus() {
    return SearchCriteria_Status_DEFAULT
  }
return *p.Status
}
var SearchCriteria_Runname_DEFAULT string
func (p *SearchCriteria) GetRunname() string {
  if !p.IsSetRunname() {
    return SearchCriteria_Runname_DEFAULT
  }
return *p.Runname
}
var SearchCriteria_Creator_DEFAULT string
func (p *SearchCriteria) GetCreator() string {
  if !p.IsSetCreator() {
    return SearchCriteria_Creator_DEFAULT
  }
return *p.Creator
}
var SearchCriteria_PageNum_DEFAULT int32
func (p *SearchCriteria) GetPageNum() int32 {
  if !p.IsSetPageNum() {
    return SearchCriteria_PageNum_DEFAULT
  }
return *p.PageNum
}
var SearchCriteria_PageSize_DEFAULT int32
func (p *SearchCriteria) GetPageSize() int32 {
  if !p.IsSetPageSize() {
    return SearchCriteria_PageSize_DEFAULT
  }
return *p.PageSize
}
func (p *SearchCriteria) IsSetTimeFrom() bool {
  return p.TimeFrom != nil
}

func (p *SearchCriteria) IsSetTimeTo() bool {
  return p.TimeTo != nil
}

func (p *SearchCriteria) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SearchCriteria) IsSetRunname() bool {
  return p.Runname != nil
}

func (p *SearchCriteria) IsSetCreator() bool {
  return p.Creator != nil
}

func (p *SearchCriteria) IsSetPageNum() bool {
  return p.PageNum != nil
}

func (p *SearchCriteria) IsSetPageSize() bool {
  return p.PageSize != nil
}

func (p *SearchCriteria) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchCriteria)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TimeFrom = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeTo = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Runname = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Creator = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PageNum = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PageSize = &v
}
  return nil
}

func (p *SearchCriteria) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SearchCriteria"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchCriteria) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeFrom() {
    if err := oprot.WriteFieldBegin(ctx, "timeFrom", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timeFrom: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TimeFrom)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeFrom (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timeFrom: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeTo() {
    if err := oprot.WriteFieldBegin(ctx, "timeTo", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeTo: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TimeTo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeTo (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeTo: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunname() {
    if err := oprot.WriteFieldBegin(ctx, "runname", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:runname: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Runname)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runname (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:runname: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreator() {
    if err := oprot.WriteFieldBegin(ctx, "creator", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:creator: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Creator)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creator (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:creator: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageNum() {
    if err := oprot.WriteFieldBegin(ctx, "pageNum", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pageNum: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageNum (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pageNum: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageSize() {
    if err := oprot.WriteFieldBegin(ctx, "pageSize", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pageSize: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageSize (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pageSize: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) Equals(other *SearchCriteria) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TimeFrom != other.TimeFrom {
    if p.TimeFrom == nil || other.TimeFrom == nil {
      return false
    }
    if (*p.TimeFrom) != (*other.TimeFrom) { return false }
  }
  if p.TimeTo != other.TimeTo {
    if p.TimeTo == nil || other.TimeTo == nil {
      return false
    }
    if (*p.TimeTo) != (*other.TimeTo) { return false }
  }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  if p.Runname != other.Runname {
    if p.Runname == nil || other.Runname == nil {
      return false
    }
    if (*p.Runname) != (*other.Runname) { return false }
  }
  if p.Creator != other.Creator {
    if p.Creator == nil || other.Creator == nil {
      return false
    }
    if (*p.Creator) != (*other.Creator) { return false }
  }
  if p.PageNum != other.PageNum {
    if p.PageNum == nil || other.PageNum == nil {
      return false
    }
    if (*p.PageNum) != (*other.PageNum) { return false }
  }
  if p.PageSize != other.PageSize {
    if p.PageSize == nil || other.PageSize == nil {
      return false
    }
    if (*p.PageSize) != (*other.PageSize) { return false }
  }
  return true
}

func (p *SearchCriteria) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchCriteria(%+v)", *p)
}

type RunTaskManagement interface {
  // Parameters:
  //  - Token
  //  - Runtask
  AddRunTask(ctx context.Context, token string, runtask *RunTask) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - Runid
  RemoveRunTask(ctx context.Context, token string, runid string) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - Runid
  GetRunTask(ctx context.Context, token string, runid string) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - Runid
  GetRunStatus(ctx context.Context, token string, runid string) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - Runid
  GetConsumableInfo(ctx context.Context, token string, runid string) (_r *Response, _err error)
  // Parameters:
  //  - Runid
  //  - Status
  UpdateRunStatus(ctx context.Context, runid string, status int32) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - SearchCriteria
  //  - MaxNr
  //  - OrderBy
  GetRunTaskList(ctx context.Context, token string, searchCriteria *SearchCriteria, maxNr int32, orderBy int32) (_r *Response, _err error)
}

type RunTaskManagementClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewRunTaskManagementClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RunTaskManagementClient {
  return &RunTaskManagementClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewRunTaskManagementClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RunTaskManagementClient {
  return &RunTaskManagementClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRunTaskManagementClient(c thrift.TClient) *RunTaskManagementClient {
  return &RunTaskManagementClient{
    c: c,
  }
}

func (p *RunTaskManagementClient) Client_() thrift.TClient {
  return p.c
}

func (p *RunTaskManagementClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *RunTaskManagementClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Token
//  - Runtask
func (p *RunTaskManagementClient) AddRunTask(ctx context.Context, token string, runtask *RunTask) (_r *Response, _err error) {
  var _args2 RunTaskManagementAddRunTaskArgs
  _args2.Token = token
  _args2.Runtask = runtask
  var _result4 RunTaskManagementAddRunTaskResult
  var _meta3 thrift.ResponseMeta
  _meta3, _err = p.Client_().Call(ctx, "addRunTask", &_args2, &_result4)
  p.SetLastResponseMeta_(_meta3)
  if _err != nil {
    return
  }
  if _ret5 := _result4.GetSuccess(); _ret5 != nil {
    return _ret5, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addRunTask failed: unknown result")
}

// Parameters:
//  - Token
//  - Runid
func (p *RunTaskManagementClient) RemoveRunTask(ctx context.Context, token string, runid string) (_r *Response, _err error) {
  var _args6 RunTaskManagementRemoveRunTaskArgs
  _args6.Token = token
  _args6.Runid = runid
  var _result8 RunTaskManagementRemoveRunTaskResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "removeRunTask", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  if _ret9 := _result8.GetSuccess(); _ret9 != nil {
    return _ret9, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "removeRunTask failed: unknown result")
}

// Parameters:
//  - Token
//  - Runid
func (p *RunTaskManagementClient) GetRunTask(ctx context.Context, token string, runid string) (_r *Response, _err error) {
  var _args10 RunTaskManagementGetRunTaskArgs
  _args10.Token = token
  _args10.Runid = runid
  var _result12 RunTaskManagementGetRunTaskResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "getRunTask", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  if _ret13 := _result12.GetSuccess(); _ret13 != nil {
    return _ret13, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getRunTask failed: unknown result")
}

// Parameters:
//  - Token
//  - Runid
func (p *RunTaskManagementClient) GetRunStatus(ctx context.Context, token string, runid string) (_r *Response, _err error) {
  var _args14 RunTaskManagementGetRunStatusArgs
  _args14.Token = token
  _args14.Runid = runid
  var _result16 RunTaskManagementGetRunStatusResult
  var _meta15 thrift.ResponseMeta
  _meta15, _err = p.Client_().Call(ctx, "getRunStatus", &_args14, &_result16)
  p.SetLastResponseMeta_(_meta15)
  if _err != nil {
    return
  }
  if _ret17 := _result16.GetSuccess(); _ret17 != nil {
    return _ret17, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getRunStatus failed: unknown result")
}

// Parameters:
//  - Token
//  - Runid
func (p *RunTaskManagementClient) GetConsumableInfo(ctx context.Context, token string, runid string) (_r *Response, _err error) {
  var _args18 RunTaskManagementGetConsumableInfoArgs
  _args18.Token = token
  _args18.Runid = runid
  var _result20 RunTaskManagementGetConsumableInfoResult
  var _meta19 thrift.ResponseMeta
  _meta19, _err = p.Client_().Call(ctx, "getConsumableInfo", &_args18, &_result20)
  p.SetLastResponseMeta_(_meta19)
  if _err != nil {
    return
  }
  if _ret21 := _result20.GetSuccess(); _ret21 != nil {
    return _ret21, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getConsumableInfo failed: unknown result")
}

// Parameters:
//  - Runid
//  - Status
func (p *RunTaskManagementClient) UpdateRunStatus(ctx context.Context, runid string, status int32) (_r *Response, _err error) {
  var _args22 RunTaskManagementUpdateRunStatusArgs
  _args22.Runid = runid
  _args22.Status = status
  var _result24 RunTaskManagementUpdateRunStatusResult
  var _meta23 thrift.ResponseMeta
  _meta23, _err = p.Client_().Call(ctx, "updateRunStatus", &_args22, &_result24)
  p.SetLastResponseMeta_(_meta23)
  if _err != nil {
    return
  }
  if _ret25 := _result24.GetSuccess(); _ret25 != nil {
    return _ret25, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "updateRunStatus failed: unknown result")
}

// Parameters:
//  - Token
//  - SearchCriteria
//  - MaxNr
//  - OrderBy
func (p *RunTaskManagementClient) GetRunTaskList(ctx context.Context, token string, searchCriteria *SearchCriteria, maxNr int32, orderBy int32) (_r *Response, _err error) {
  var _args26 RunTaskManagementGetRunTaskListArgs
  _args26.Token = token
  _args26.SearchCriteria = searchCriteria
  _args26.MaxNr = maxNr
  _args26.OrderBy = orderBy
  var _result28 RunTaskManagementGetRunTaskListResult
  var _meta27 thrift.ResponseMeta
  _meta27, _err = p.Client_().Call(ctx, "getRunTaskList", &_args26, &_result28)
  p.SetLastResponseMeta_(_meta27)
  if _err != nil {
    return
  }
  if _ret29 := _result28.GetSuccess(); _ret29 != nil {
    return _ret29, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getRunTaskList failed: unknown result")
}

type RunTaskManagementProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RunTaskManagement
}

func (p *RunTaskManagementProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RunTaskManagementProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RunTaskManagementProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRunTaskManagementProcessor(handler RunTaskManagement) *RunTaskManagementProcessor {

  self30 := &RunTaskManagementProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self30.processorMap["addRunTask"] = &runTaskManagementProcessorAddRunTask{handler:handler}
  self30.processorMap["removeRunTask"] = &runTaskManagementProcessorRemoveRunTask{handler:handler}
  self30.processorMap["getRunTask"] = &runTaskManagementProcessorGetRunTask{handler:handler}
  self30.processorMap["getRunStatus"] = &runTaskManagementProcessorGetRunStatus{handler:handler}
  self30.processorMap["getConsumableInfo"] = &runTaskManagementProcessorGetConsumableInfo{handler:handler}
  self30.processorMap["updateRunStatus"] = &runTaskManagementProcessorUpdateRunStatus{handler:handler}
  self30.processorMap["getRunTaskList"] = &runTaskManagementProcessorGetRunTaskList{handler:handler}
return self30
}

func (p *RunTaskManagementProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x31 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x31.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x31

}

type runTaskManagementProcessorAddRunTask struct {
  handler RunTaskManagement
}

func (p *runTaskManagementProcessorAddRunTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunTaskManagementAddRunTaskArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addRunTask", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunTaskManagementAddRunTaskResult{}
  var retval *Response
  if retval, err2 = p.handler.AddRunTask(ctx, args.Token, args.Runtask); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addRunTask: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "addRunTask", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "addRunTask", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runTaskManagementProcessorRemoveRunTask struct {
  handler RunTaskManagement
}

func (p *runTaskManagementProcessorRemoveRunTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunTaskManagementRemoveRunTaskArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeRunTask", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunTaskManagementRemoveRunTaskResult{}
  var retval *Response
  if retval, err2 = p.handler.RemoveRunTask(ctx, args.Token, args.Runid); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeRunTask: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeRunTask", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeRunTask", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runTaskManagementProcessorGetRunTask struct {
  handler RunTaskManagement
}

func (p *runTaskManagementProcessorGetRunTask) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunTaskManagementGetRunTaskArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunTask", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunTaskManagementGetRunTaskResult{}
  var retval *Response
  if retval, err2 = p.handler.GetRunTask(ctx, args.Token, args.Runid); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRunTask: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunTask", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRunTask", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runTaskManagementProcessorGetRunStatus struct {
  handler RunTaskManagement
}

func (p *runTaskManagementProcessorGetRunStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunTaskManagementGetRunStatusArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunTaskManagementGetRunStatusResult{}
  var retval *Response
  if retval, err2 = p.handler.GetRunStatus(ctx, args.Token, args.Runid); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRunStatus: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRunStatus", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runTaskManagementProcessorGetConsumableInfo struct {
  handler RunTaskManagement
}

func (p *runTaskManagementProcessorGetConsumableInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunTaskManagementGetConsumableInfoArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getConsumableInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunTaskManagementGetConsumableInfoResult{}
  var retval *Response
  if retval, err2 = p.handler.GetConsumableInfo(ctx, args.Token, args.Runid); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getConsumableInfo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getConsumableInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getConsumableInfo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runTaskManagementProcessorUpdateRunStatus struct {
  handler RunTaskManagement
}

func (p *runTaskManagementProcessorUpdateRunStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunTaskManagementUpdateRunStatusArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateRunStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunTaskManagementUpdateRunStatusResult{}
  var retval *Response
  if retval, err2 = p.handler.UpdateRunStatus(ctx, args.Runid, args.Status); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateRunStatus: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateRunStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateRunStatus", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runTaskManagementProcessorGetRunTaskList struct {
  handler RunTaskManagement
}

func (p *runTaskManagementProcessorGetRunTaskList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunTaskManagementGetRunTaskListArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunTaskList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunTaskManagementGetRunTaskListResult{}
  var retval *Response
  if retval, err2 = p.handler.GetRunTaskList(ctx, args.Token, args.SearchCriteria, args.MaxNr, args.OrderBy); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRunTaskList: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunTaskList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRunTaskList", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Token
//  - Runtask
type RunTaskManagementAddRunTaskArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Runtask *RunTask `thrift:"runtask,2" db:"runtask" json:"runtask"`
}

func NewRunTaskManagementAddRunTaskArgs() *RunTaskManagementAddRunTaskArgs {
  return &RunTaskManagementAddRunTaskArgs{}
}


func (p *RunTaskManagementAddRunTaskArgs) GetToken() string {
  return p.Token
}
var RunTaskManagementAddRunTaskArgs_Runtask_DEFAULT *RunTask
func (p *RunTaskManagementAddRunTaskArgs) GetRuntask() *RunTask {
  if !p.IsSetRuntask() {
    return RunTaskManagementAddRunTaskArgs_Runtask_DEFAULT
  }
return p.Runtask
}
func (p *RunTaskManagementAddRunTaskArgs) IsSetRuntask() bool {
  return p.Runtask != nil
}

func (p *RunTaskManagementAddRunTaskArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementAddRunTaskArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunTaskManagementAddRunTaskArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Runtask = &RunTask{}
  if err := p.Runtask.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Runtask), err)
  }
  return nil
}

func (p *RunTaskManagementAddRunTaskArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addRunTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementAddRunTaskArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunTaskManagementAddRunTaskArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runtask", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runtask: ", p), err) }
  if err := p.Runtask.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Runtask), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runtask: ", p), err) }
  return err
}

func (p *RunTaskManagementAddRunTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementAddRunTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunTaskManagementAddRunTaskResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunTaskManagementAddRunTaskResult() *RunTaskManagementAddRunTaskResult {
  return &RunTaskManagementAddRunTaskResult{}
}

var RunTaskManagementAddRunTaskResult_Success_DEFAULT *Response
func (p *RunTaskManagementAddRunTaskResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunTaskManagementAddRunTaskResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunTaskManagementAddRunTaskResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunTaskManagementAddRunTaskResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementAddRunTaskResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunTaskManagementAddRunTaskResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addRunTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementAddRunTaskResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunTaskManagementAddRunTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementAddRunTaskResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Runid
type RunTaskManagementRemoveRunTaskArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Runid string `thrift:"runid,2" db:"runid" json:"runid"`
}

func NewRunTaskManagementRemoveRunTaskArgs() *RunTaskManagementRemoveRunTaskArgs {
  return &RunTaskManagementRemoveRunTaskArgs{}
}


func (p *RunTaskManagementRemoveRunTaskArgs) GetToken() string {
  return p.Token
}

func (p *RunTaskManagementRemoveRunTaskArgs) GetRunid() string {
  return p.Runid
}
func (p *RunTaskManagementRemoveRunTaskArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementRemoveRunTaskArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunTaskManagementRemoveRunTaskArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Runid = v
}
  return nil
}

func (p *RunTaskManagementRemoveRunTaskArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeRunTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementRemoveRunTaskArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunTaskManagementRemoveRunTaskArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Runid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runid: ", p), err) }
  return err
}

func (p *RunTaskManagementRemoveRunTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementRemoveRunTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunTaskManagementRemoveRunTaskResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunTaskManagementRemoveRunTaskResult() *RunTaskManagementRemoveRunTaskResult {
  return &RunTaskManagementRemoveRunTaskResult{}
}

var RunTaskManagementRemoveRunTaskResult_Success_DEFAULT *Response
func (p *RunTaskManagementRemoveRunTaskResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunTaskManagementRemoveRunTaskResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunTaskManagementRemoveRunTaskResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunTaskManagementRemoveRunTaskResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementRemoveRunTaskResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunTaskManagementRemoveRunTaskResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeRunTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementRemoveRunTaskResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunTaskManagementRemoveRunTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementRemoveRunTaskResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Runid
type RunTaskManagementGetRunTaskArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Runid string `thrift:"runid,2" db:"runid" json:"runid"`
}

func NewRunTaskManagementGetRunTaskArgs() *RunTaskManagementGetRunTaskArgs {
  return &RunTaskManagementGetRunTaskArgs{}
}


func (p *RunTaskManagementGetRunTaskArgs) GetToken() string {
  return p.Token
}

func (p *RunTaskManagementGetRunTaskArgs) GetRunid() string {
  return p.Runid
}
func (p *RunTaskManagementGetRunTaskArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementGetRunTaskArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunTaskManagementGetRunTaskArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Runid = v
}
  return nil
}

func (p *RunTaskManagementGetRunTaskArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunTask_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementGetRunTaskArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunTaskManagementGetRunTaskArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Runid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runid: ", p), err) }
  return err
}

func (p *RunTaskManagementGetRunTaskArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementGetRunTaskArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunTaskManagementGetRunTaskResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunTaskManagementGetRunTaskResult() *RunTaskManagementGetRunTaskResult {
  return &RunTaskManagementGetRunTaskResult{}
}

var RunTaskManagementGetRunTaskResult_Success_DEFAULT *Response
func (p *RunTaskManagementGetRunTaskResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunTaskManagementGetRunTaskResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunTaskManagementGetRunTaskResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunTaskManagementGetRunTaskResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementGetRunTaskResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunTaskManagementGetRunTaskResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunTask_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementGetRunTaskResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunTaskManagementGetRunTaskResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementGetRunTaskResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Runid
type RunTaskManagementGetRunStatusArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Runid string `thrift:"runid,2" db:"runid" json:"runid"`
}

func NewRunTaskManagementGetRunStatusArgs() *RunTaskManagementGetRunStatusArgs {
  return &RunTaskManagementGetRunStatusArgs{}
}


func (p *RunTaskManagementGetRunStatusArgs) GetToken() string {
  return p.Token
}

func (p *RunTaskManagementGetRunStatusArgs) GetRunid() string {
  return p.Runid
}
func (p *RunTaskManagementGetRunStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementGetRunStatusArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunTaskManagementGetRunStatusArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Runid = v
}
  return nil
}

func (p *RunTaskManagementGetRunStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementGetRunStatusArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunTaskManagementGetRunStatusArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Runid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runid: ", p), err) }
  return err
}

func (p *RunTaskManagementGetRunStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementGetRunStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunTaskManagementGetRunStatusResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunTaskManagementGetRunStatusResult() *RunTaskManagementGetRunStatusResult {
  return &RunTaskManagementGetRunStatusResult{}
}

var RunTaskManagementGetRunStatusResult_Success_DEFAULT *Response
func (p *RunTaskManagementGetRunStatusResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunTaskManagementGetRunStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunTaskManagementGetRunStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunTaskManagementGetRunStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementGetRunStatusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunTaskManagementGetRunStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementGetRunStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunTaskManagementGetRunStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementGetRunStatusResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Runid
type RunTaskManagementGetConsumableInfoArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Runid string `thrift:"runid,2" db:"runid" json:"runid"`
}

func NewRunTaskManagementGetConsumableInfoArgs() *RunTaskManagementGetConsumableInfoArgs {
  return &RunTaskManagementGetConsumableInfoArgs{}
}


func (p *RunTaskManagementGetConsumableInfoArgs) GetToken() string {
  return p.Token
}

func (p *RunTaskManagementGetConsumableInfoArgs) GetRunid() string {
  return p.Runid
}
func (p *RunTaskManagementGetConsumableInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementGetConsumableInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunTaskManagementGetConsumableInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Runid = v
}
  return nil
}

func (p *RunTaskManagementGetConsumableInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getConsumableInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementGetConsumableInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunTaskManagementGetConsumableInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Runid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runid: ", p), err) }
  return err
}

func (p *RunTaskManagementGetConsumableInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementGetConsumableInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunTaskManagementGetConsumableInfoResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunTaskManagementGetConsumableInfoResult() *RunTaskManagementGetConsumableInfoResult {
  return &RunTaskManagementGetConsumableInfoResult{}
}

var RunTaskManagementGetConsumableInfoResult_Success_DEFAULT *Response
func (p *RunTaskManagementGetConsumableInfoResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunTaskManagementGetConsumableInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunTaskManagementGetConsumableInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunTaskManagementGetConsumableInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementGetConsumableInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunTaskManagementGetConsumableInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getConsumableInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementGetConsumableInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunTaskManagementGetConsumableInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementGetConsumableInfoResult(%+v)", *p)
}

// Attributes:
//  - Runid
//  - Status
type RunTaskManagementUpdateRunStatusArgs struct {
  Runid string `thrift:"runid,1" db:"runid" json:"runid"`
  Status int32 `thrift:"status,2" db:"status" json:"status"`
}

func NewRunTaskManagementUpdateRunStatusArgs() *RunTaskManagementUpdateRunStatusArgs {
  return &RunTaskManagementUpdateRunStatusArgs{}
}


func (p *RunTaskManagementUpdateRunStatusArgs) GetRunid() string {
  return p.Runid
}

func (p *RunTaskManagementUpdateRunStatusArgs) GetStatus() int32 {
  return p.Status
}
func (p *RunTaskManagementUpdateRunStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementUpdateRunStatusArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Runid = v
}
  return nil
}

func (p *RunTaskManagementUpdateRunStatusArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *RunTaskManagementUpdateRunStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateRunStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementUpdateRunStatusArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runid", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:runid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Runid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runid (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:runid: ", p), err) }
  return err
}

func (p *RunTaskManagementUpdateRunStatusArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:status: ", p), err) }
  return err
}

func (p *RunTaskManagementUpdateRunStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementUpdateRunStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunTaskManagementUpdateRunStatusResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunTaskManagementUpdateRunStatusResult() *RunTaskManagementUpdateRunStatusResult {
  return &RunTaskManagementUpdateRunStatusResult{}
}

var RunTaskManagementUpdateRunStatusResult_Success_DEFAULT *Response
func (p *RunTaskManagementUpdateRunStatusResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunTaskManagementUpdateRunStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunTaskManagementUpdateRunStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunTaskManagementUpdateRunStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementUpdateRunStatusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunTaskManagementUpdateRunStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateRunStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementUpdateRunStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunTaskManagementUpdateRunStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementUpdateRunStatusResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - SearchCriteria
//  - MaxNr
//  - OrderBy
type RunTaskManagementGetRunTaskListArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  SearchCriteria *SearchCriteria `thrift:"searchCriteria,2" db:"searchCriteria" json:"searchCriteria"`
  MaxNr int32 `thrift:"maxNr,3" db:"maxNr" json:"maxNr"`
  OrderBy int32 `thrift:"orderBy,4" db:"orderBy" json:"orderBy"`
}

func NewRunTaskManagementGetRunTaskListArgs() *RunTaskManagementGetRunTaskListArgs {
  return &RunTaskManagementGetRunTaskListArgs{}
}


func (p *RunTaskManagementGetRunTaskListArgs) GetToken() string {
  return p.Token
}
var RunTaskManagementGetRunTaskListArgs_SearchCriteria_DEFAULT *SearchCriteria
func (p *RunTaskManagementGetRunTaskListArgs) GetSearchCriteria() *SearchCriteria {
  if !p.IsSetSearchCriteria() {
    return RunTaskManagementGetRunTaskListArgs_SearchCriteria_DEFAULT
  }
return p.SearchCriteria
}

func (p *RunTaskManagementGetRunTaskListArgs) GetMaxNr() int32 {
  return p.MaxNr
}

func (p *RunTaskManagementGetRunTaskListArgs) GetOrderBy() int32 {
  return p.OrderBy
}
func (p *RunTaskManagementGetRunTaskListArgs) IsSetSearchCriteria() bool {
  return p.SearchCriteria != nil
}

func (p *RunTaskManagementGetRunTaskListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementGetRunTaskListArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunTaskManagementGetRunTaskListArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SearchCriteria = &SearchCriteria{}
  if err := p.SearchCriteria.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SearchCriteria), err)
  }
  return nil
}

func (p *RunTaskManagementGetRunTaskListArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxNr = v
}
  return nil
}

func (p *RunTaskManagementGetRunTaskListArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OrderBy = v
}
  return nil
}

func (p *RunTaskManagementGetRunTaskListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunTaskList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementGetRunTaskListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunTaskManagementGetRunTaskListArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchCriteria", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchCriteria: ", p), err) }
  if err := p.SearchCriteria.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SearchCriteria), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchCriteria: ", p), err) }
  return err
}

func (p *RunTaskManagementGetRunTaskListArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxNr", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxNr: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxNr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxNr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxNr: ", p), err) }
  return err
}

func (p *RunTaskManagementGetRunTaskListArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "orderBy", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:orderBy: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OrderBy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderBy (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:orderBy: ", p), err) }
  return err
}

func (p *RunTaskManagementGetRunTaskListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementGetRunTaskListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunTaskManagementGetRunTaskListResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunTaskManagementGetRunTaskListResult() *RunTaskManagementGetRunTaskListResult {
  return &RunTaskManagementGetRunTaskListResult{}
}

var RunTaskManagementGetRunTaskListResult_Success_DEFAULT *Response
func (p *RunTaskManagementGetRunTaskListResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunTaskManagementGetRunTaskListResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunTaskManagementGetRunTaskListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunTaskManagementGetRunTaskListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunTaskManagementGetRunTaskListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunTaskManagementGetRunTaskListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunTaskList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunTaskManagementGetRunTaskListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunTaskManagementGetRunTaskListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunTaskManagementGetRunTaskListResult(%+v)", *p)
}


