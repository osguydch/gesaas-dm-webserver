// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package devicemanagement

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - DisplayName
//  - DeviceName
//  - Hostname
//  - CreateTime
//  - UpdateTime
//  - Status
//  - ID
//  - Type
//  - Variant
//  - Version
//  - IP
//  - ManufactureTime
//  - HostServer
type Device struct {
  DisplayName string `thrift:"displayName,1" db:"displayName" json:"displayName"`
  DeviceName string `thrift:"deviceName,2" db:"deviceName" json:"deviceName"`
  Hostname string `thrift:"hostname,3" db:"hostname" json:"hostname"`
  CreateTime *int64 `thrift:"createTime,4" db:"createTime" json:"createTime,omitempty"`
  UpdateTime *int64 `thrift:"updateTime,5" db:"updateTime" json:"updateTime,omitempty"`
  Status *int32 `thrift:"status,6" db:"status" json:"status,omitempty"`
  ID *int32 `thrift:"id,7" db:"id" json:"id,omitempty"`
  Type string `thrift:"type,8,required" db:"type" json:"type"`
  Variant string `thrift:"variant,9,required" db:"variant" json:"variant"`
  Version string `thrift:"version,10,required" db:"version" json:"version"`
  IP string `thrift:"ip,11" db:"ip" json:"ip"`
  ManufactureTime *int64 `thrift:"manufactureTime,12" db:"manufactureTime" json:"manufactureTime,omitempty"`
  HostServer string `thrift:"hostServer,13" db:"hostServer" json:"hostServer"`
}

func NewDevice() *Device {
  return &Device{}
}


func (p *Device) GetDisplayName() string {
  return p.DisplayName
}

func (p *Device) GetDeviceName() string {
  return p.DeviceName
}

func (p *Device) GetHostname() string {
  return p.Hostname
}
var Device_CreateTime_DEFAULT int64
func (p *Device) GetCreateTime() int64 {
  if !p.IsSetCreateTime() {
    return Device_CreateTime_DEFAULT
  }
return *p.CreateTime
}
var Device_UpdateTime_DEFAULT int64
func (p *Device) GetUpdateTime() int64 {
  if !p.IsSetUpdateTime() {
    return Device_UpdateTime_DEFAULT
  }
return *p.UpdateTime
}
var Device_Status_DEFAULT int32
func (p *Device) GetStatus() int32 {
  if !p.IsSetStatus() {
    return Device_Status_DEFAULT
  }
return *p.Status
}
var Device_ID_DEFAULT int32
func (p *Device) GetID() int32 {
  if !p.IsSetID() {
    return Device_ID_DEFAULT
  }
return *p.ID
}

func (p *Device) GetType() string {
  return p.Type
}

func (p *Device) GetVariant() string {
  return p.Variant
}

func (p *Device) GetVersion() string {
  return p.Version
}

func (p *Device) GetIP() string {
  return p.IP
}
var Device_ManufactureTime_DEFAULT int64
func (p *Device) GetManufactureTime() int64 {
  if !p.IsSetManufactureTime() {
    return Device_ManufactureTime_DEFAULT
  }
return *p.ManufactureTime
}

func (p *Device) GetHostServer() string {
  return p.HostServer
}
func (p *Device) IsSetCreateTime() bool {
  return p.CreateTime != nil
}

func (p *Device) IsSetUpdateTime() bool {
  return p.UpdateTime != nil
}

func (p *Device) IsSetStatus() bool {
  return p.Status != nil
}

func (p *Device) IsSetID() bool {
  return p.ID != nil
}

func (p *Device) IsSetManufactureTime() bool {
  return p.ManufactureTime != nil
}

func (p *Device) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetType bool = false;
  var issetVariant bool = false;
  var issetVersion bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
        issetVariant = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
        issetVersion = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetVariant{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Variant is not set"));
  }
  if !issetVersion{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Version is not set"));
  }
  return nil
}

func (p *Device)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *Device)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeviceName = v
}
  return nil
}

func (p *Device)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Hostname = v
}
  return nil
}

func (p *Device)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CreateTime = &v
}
  return nil
}

func (p *Device)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UpdateTime = &v
}
  return nil
}

func (p *Device)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Status = &v
}
  return nil
}

func (p *Device)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *Device)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *Device)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Variant = v
}
  return nil
}

func (p *Device)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *Device)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *Device)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ManufactureTime = &v
}
  return nil
}

func (p *Device)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.HostServer = v
}
  return nil
}

func (p *Device) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Device"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Device) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:displayName: ", p), err) }
  return err
}

func (p *Device) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DeviceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceName: ", p), err) }
  return err
}

func (p *Device) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostname", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hostname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Hostname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostname (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hostname: ", p), err) }
  return err
}

func (p *Device) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreateTime() {
    if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:createTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.CreateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createTime (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:createTime: ", p), err) }
  }
  return err
}

func (p *Device) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUpdateTime() {
    if err := oprot.WriteFieldBegin(ctx, "updateTime", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:updateTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.UpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.updateTime (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:updateTime: ", p), err) }
  }
  return err
}

func (p *Device) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:status: ", p), err) }
  }
  return err
}

func (p *Device) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin(ctx, "id", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:id: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:id: ", p), err) }
  }
  return err
}

func (p *Device) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:type: ", p), err) }
  return err
}

func (p *Device) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "variant", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:variant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Variant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.variant (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:variant: ", p), err) }
  return err
}

func (p *Device) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:version: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:version: ", p), err) }
  return err
}

func (p *Device) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ip", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:ip: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:ip: ", p), err) }
  return err
}

func (p *Device) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetManufactureTime() {
    if err := oprot.WriteFieldBegin(ctx, "manufactureTime", thrift.I64, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:manufactureTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ManufactureTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.manufactureTime (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:manufactureTime: ", p), err) }
  }
  return err
}

func (p *Device) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostServer", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:hostServer: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HostServer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostServer (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:hostServer: ", p), err) }
  return err
}

func (p *Device) Equals(other *Device) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.DisplayName != other.DisplayName { return false }
  if p.DeviceName != other.DeviceName { return false }
  if p.Hostname != other.Hostname { return false }
  if p.CreateTime != other.CreateTime {
    if p.CreateTime == nil || other.CreateTime == nil {
      return false
    }
    if (*p.CreateTime) != (*other.CreateTime) { return false }
  }
  if p.UpdateTime != other.UpdateTime {
    if p.UpdateTime == nil || other.UpdateTime == nil {
      return false
    }
    if (*p.UpdateTime) != (*other.UpdateTime) { return false }
  }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  if p.ID != other.ID {
    if p.ID == nil || other.ID == nil {
      return false
    }
    if (*p.ID) != (*other.ID) { return false }
  }
  if p.Type != other.Type { return false }
  if p.Variant != other.Variant { return false }
  if p.Version != other.Version { return false }
  if p.IP != other.IP { return false }
  if p.ManufactureTime != other.ManufactureTime {
    if p.ManufactureTime == nil || other.ManufactureTime == nil {
      return false
    }
    if (*p.ManufactureTime) != (*other.ManufactureTime) { return false }
  }
  if p.HostServer != other.HostServer { return false }
  return true
}

func (p *Device) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Device(%+v)", *p)
}

// Attributes:
//  - Status
//  - DeviceList
//  - Device
//  - TotalCount
//  - CurrentPage
type ReturnData struct {
  Status *int32 `thrift:"status,1" db:"status" json:"status,omitempty"`
  DeviceList []*Device `thrift:"deviceList,2" db:"deviceList" json:"deviceList,omitempty"`
  Device *Device `thrift:"device,3" db:"device" json:"device,omitempty"`
  TotalCount *int32 `thrift:"totalCount,4" db:"totalCount" json:"totalCount,omitempty"`
  CurrentPage *int32 `thrift:"currentPage,5" db:"currentPage" json:"currentPage,omitempty"`
}

func NewReturnData() *ReturnData {
  return &ReturnData{}
}

var ReturnData_Status_DEFAULT int32
func (p *ReturnData) GetStatus() int32 {
  if !p.IsSetStatus() {
    return ReturnData_Status_DEFAULT
  }
return *p.Status
}
var ReturnData_DeviceList_DEFAULT []*Device

func (p *ReturnData) GetDeviceList() []*Device {
  return p.DeviceList
}
var ReturnData_Device_DEFAULT *Device
func (p *ReturnData) GetDevice() *Device {
  if !p.IsSetDevice() {
    return ReturnData_Device_DEFAULT
  }
return p.Device
}
var ReturnData_TotalCount_DEFAULT int32
func (p *ReturnData) GetTotalCount() int32 {
  if !p.IsSetTotalCount() {
    return ReturnData_TotalCount_DEFAULT
  }
return *p.TotalCount
}
var ReturnData_CurrentPage_DEFAULT int32
func (p *ReturnData) GetCurrentPage() int32 {
  if !p.IsSetCurrentPage() {
    return ReturnData_CurrentPage_DEFAULT
  }
return *p.CurrentPage
}
func (p *ReturnData) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ReturnData) IsSetDeviceList() bool {
  return p.DeviceList != nil
}

func (p *ReturnData) IsSetDevice() bool {
  return p.Device != nil
}

func (p *ReturnData) IsSetTotalCount() bool {
  return p.TotalCount != nil
}

func (p *ReturnData) IsSetCurrentPage() bool {
  return p.CurrentPage != nil
}

func (p *ReturnData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReturnData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = &v
}
  return nil
}

func (p *ReturnData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Device, 0, size)
  p.DeviceList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &Device{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.DeviceList = append(p.DeviceList, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReturnData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Device = &Device{}
  if err := p.Device.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Device), err)
  }
  return nil
}

func (p *ReturnData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TotalCount = &v
}
  return nil
}

func (p *ReturnData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CurrentPage = &v
}
  return nil
}

func (p *ReturnData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReturnData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReturnData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDeviceList() {
    if err := oprot.WriteFieldBegin(ctx, "deviceList", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.DeviceList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.DeviceList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceList: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDevice() {
    if err := oprot.WriteFieldBegin(ctx, "device", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:device: ", p), err) }
    if err := p.Device.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Device), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:device: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTotalCount() {
    if err := oprot.WriteFieldBegin(ctx, "totalCount", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalCount: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.TotalCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.totalCount (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalCount: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCurrentPage() {
    if err := oprot.WriteFieldBegin(ctx, "currentPage", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:currentPage: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.CurrentPage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.currentPage (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:currentPage: ", p), err) }
  }
  return err
}

func (p *ReturnData) Equals(other *ReturnData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  if len(p.DeviceList) != len(other.DeviceList) { return false }
  for i, _tgt := range p.DeviceList {
    _src1 := other.DeviceList[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if !p.Device.Equals(other.Device) { return false }
  if p.TotalCount != other.TotalCount {
    if p.TotalCount == nil || other.TotalCount == nil {
      return false
    }
    if (*p.TotalCount) != (*other.TotalCount) { return false }
  }
  if p.CurrentPage != other.CurrentPage {
    if p.CurrentPage == nil || other.CurrentPage == nil {
      return false
    }
    if (*p.CurrentPage) != (*other.CurrentPage) { return false }
  }
  return true
}

func (p *ReturnData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReturnData(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Message
//  - Data
type Response struct {
  ErrorCode int32 `thrift:"errorCode,1,required" db:"errorCode" json:"errorCode"`
  Message *string `thrift:"message,2" db:"message" json:"message,omitempty"`
  Data *ReturnData `thrift:"data,3" db:"data" json:"data,omitempty"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetErrorCode() int32 {
  return p.ErrorCode
}
var Response_Message_DEFAULT string
func (p *Response) GetMessage() string {
  if !p.IsSetMessage() {
    return Response_Message_DEFAULT
  }
return *p.Message
}
var Response_Data_DEFAULT *ReturnData
func (p *Response) GetData() *ReturnData {
  if !p.IsSetData() {
    return Response_Data_DEFAULT
  }
return p.Data
}
func (p *Response) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Response) IsSetData() bool {
  return p.Data != nil
}

func (p *Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *Response)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorCode = v
}
  return nil
}

func (p *Response)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *Response)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &ReturnData{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *Response) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  }
  return err
}

func (p *Response) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := p.Data.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *Response) Equals(other *Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if p.Message != other.Message {
    if p.Message == nil || other.Message == nil {
      return false
    }
    if (*p.Message) != (*other.Message) { return false }
  }
  if !p.Data.Equals(other.Data) { return false }
  return true
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

// Attributes:
//  - TimeFrom
//  - TimeTo
//  - Status
//  - PageNum
//  - PageSize
type SearchCriteria struct {
  TimeFrom *int64 `thrift:"timeFrom,1" db:"timeFrom" json:"timeFrom,omitempty"`
  TimeTo *int64 `thrift:"timeTo,2" db:"timeTo" json:"timeTo,omitempty"`
  Status *int32 `thrift:"status,3" db:"status" json:"status,omitempty"`
  PageNum *int32 `thrift:"pageNum,4" db:"pageNum" json:"pageNum,omitempty"`
  PageSize *int32 `thrift:"pageSize,5" db:"pageSize" json:"pageSize,omitempty"`
}

func NewSearchCriteria() *SearchCriteria {
  return &SearchCriteria{}
}

var SearchCriteria_TimeFrom_DEFAULT int64
func (p *SearchCriteria) GetTimeFrom() int64 {
  if !p.IsSetTimeFrom() {
    return SearchCriteria_TimeFrom_DEFAULT
  }
return *p.TimeFrom
}
var SearchCriteria_TimeTo_DEFAULT int64
func (p *SearchCriteria) GetTimeTo() int64 {
  if !p.IsSetTimeTo() {
    return SearchCriteria_TimeTo_DEFAULT
  }
return *p.TimeTo
}
var SearchCriteria_Status_DEFAULT int32
func (p *SearchCriteria) GetStatus() int32 {
  if !p.IsSetStatus() {
    return SearchCriteria_Status_DEFAULT
  }
return *p.Status
}
var SearchCriteria_PageNum_DEFAULT int32
func (p *SearchCriteria) GetPageNum() int32 {
  if !p.IsSetPageNum() {
    return SearchCriteria_PageNum_DEFAULT
  }
return *p.PageNum
}
var SearchCriteria_PageSize_DEFAULT int32
func (p *SearchCriteria) GetPageSize() int32 {
  if !p.IsSetPageSize() {
    return SearchCriteria_PageSize_DEFAULT
  }
return *p.PageSize
}
func (p *SearchCriteria) IsSetTimeFrom() bool {
  return p.TimeFrom != nil
}

func (p *SearchCriteria) IsSetTimeTo() bool {
  return p.TimeTo != nil
}

func (p *SearchCriteria) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SearchCriteria) IsSetPageNum() bool {
  return p.PageNum != nil
}

func (p *SearchCriteria) IsSetPageSize() bool {
  return p.PageSize != nil
}

func (p *SearchCriteria) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchCriteria)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TimeFrom = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeTo = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PageNum = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PageSize = &v
}
  return nil
}

func (p *SearchCriteria) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SearchCriteria"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchCriteria) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeFrom() {
    if err := oprot.WriteFieldBegin(ctx, "timeFrom", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timeFrom: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TimeFrom)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeFrom (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timeFrom: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeTo() {
    if err := oprot.WriteFieldBegin(ctx, "timeTo", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeTo: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TimeTo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeTo (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeTo: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageNum() {
    if err := oprot.WriteFieldBegin(ctx, "pageNum", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageNum: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageNum (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageNum: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageSize() {
    if err := oprot.WriteFieldBegin(ctx, "pageSize", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) Equals(other *SearchCriteria) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TimeFrom != other.TimeFrom {
    if p.TimeFrom == nil || other.TimeFrom == nil {
      return false
    }
    if (*p.TimeFrom) != (*other.TimeFrom) { return false }
  }
  if p.TimeTo != other.TimeTo {
    if p.TimeTo == nil || other.TimeTo == nil {
      return false
    }
    if (*p.TimeTo) != (*other.TimeTo) { return false }
  }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  if p.PageNum != other.PageNum {
    if p.PageNum == nil || other.PageNum == nil {
      return false
    }
    if (*p.PageNum) != (*other.PageNum) { return false }
  }
  if p.PageSize != other.PageSize {
    if p.PageSize == nil || other.PageSize == nil {
      return false
    }
    if (*p.PageSize) != (*other.PageSize) { return false }
  }
  return true
}

func (p *SearchCriteria) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchCriteria(%+v)", *p)
}

type DeviceManagement interface {
  // Parameters:
  //  - Token
  //  - Device
  AddDevice(ctx context.Context, token string, device *Device) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - Device
  UpdateDevice(ctx context.Context, token string, device *Device) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - DeviceName
  GetDevice(ctx context.Context, token string, deviceName string) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - DeviceName
  RemoveDevice(ctx context.Context, token string, deviceName string) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - SearchCriteria
  //  - MaxNr
  //  - OrderBy
  GetDeviceList(ctx context.Context, token string, searchCriteria *SearchCriteria, maxNr int32, orderBy int32) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - DeviceName
  GetDeviceStatus(ctx context.Context, token string, deviceName string) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - DeviceName
  //  - Status
  UpdateDeviceStatus(ctx context.Context, token string, deviceName string, status int32) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - DeviceName
  //  - DisplayName
  UpdateDeviceDisplayName(ctx context.Context, token string, deviceName string, displayName string) (_r *Response, _err error)
}

type DeviceManagementClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewDeviceManagementClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DeviceManagementClient {
  return &DeviceManagementClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewDeviceManagementClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DeviceManagementClient {
  return &DeviceManagementClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewDeviceManagementClient(c thrift.TClient) *DeviceManagementClient {
  return &DeviceManagementClient{
    c: c,
  }
}

func (p *DeviceManagementClient) Client_() thrift.TClient {
  return p.c
}

func (p *DeviceManagementClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *DeviceManagementClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Token
//  - Device
func (p *DeviceManagementClient) AddDevice(ctx context.Context, token string, device *Device) (_r *Response, _err error) {
  var _args2 DeviceManagementAddDeviceArgs
  _args2.Token = token
  _args2.Device = device
  var _result4 DeviceManagementAddDeviceResult
  var _meta3 thrift.ResponseMeta
  _meta3, _err = p.Client_().Call(ctx, "addDevice", &_args2, &_result4)
  p.SetLastResponseMeta_(_meta3)
  if _err != nil {
    return
  }
  if _ret5 := _result4.GetSuccess(); _ret5 != nil {
    return _ret5, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addDevice failed: unknown result")
}

// Parameters:
//  - Token
//  - Device
func (p *DeviceManagementClient) UpdateDevice(ctx context.Context, token string, device *Device) (_r *Response, _err error) {
  var _args6 DeviceManagementUpdateDeviceArgs
  _args6.Token = token
  _args6.Device = device
  var _result8 DeviceManagementUpdateDeviceResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "updateDevice", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  if _ret9 := _result8.GetSuccess(); _ret9 != nil {
    return _ret9, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "updateDevice failed: unknown result")
}

// Parameters:
//  - Token
//  - DeviceName
func (p *DeviceManagementClient) GetDevice(ctx context.Context, token string, deviceName string) (_r *Response, _err error) {
  var _args10 DeviceManagementGetDeviceArgs
  _args10.Token = token
  _args10.DeviceName = deviceName
  var _result12 DeviceManagementGetDeviceResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "getDevice", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  if _ret13 := _result12.GetSuccess(); _ret13 != nil {
    return _ret13, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getDevice failed: unknown result")
}

// Parameters:
//  - Token
//  - DeviceName
func (p *DeviceManagementClient) RemoveDevice(ctx context.Context, token string, deviceName string) (_r *Response, _err error) {
  var _args14 DeviceManagementRemoveDeviceArgs
  _args14.Token = token
  _args14.DeviceName = deviceName
  var _result16 DeviceManagementRemoveDeviceResult
  var _meta15 thrift.ResponseMeta
  _meta15, _err = p.Client_().Call(ctx, "removeDevice", &_args14, &_result16)
  p.SetLastResponseMeta_(_meta15)
  if _err != nil {
    return
  }
  if _ret17 := _result16.GetSuccess(); _ret17 != nil {
    return _ret17, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "removeDevice failed: unknown result")
}

// Parameters:
//  - Token
//  - SearchCriteria
//  - MaxNr
//  - OrderBy
func (p *DeviceManagementClient) GetDeviceList(ctx context.Context, token string, searchCriteria *SearchCriteria, maxNr int32, orderBy int32) (_r *Response, _err error) {
  var _args18 DeviceManagementGetDeviceListArgs
  _args18.Token = token
  _args18.SearchCriteria = searchCriteria
  _args18.MaxNr = maxNr
  _args18.OrderBy = orderBy
  var _result20 DeviceManagementGetDeviceListResult
  var _meta19 thrift.ResponseMeta
  _meta19, _err = p.Client_().Call(ctx, "getDeviceList", &_args18, &_result20)
  p.SetLastResponseMeta_(_meta19)
  if _err != nil {
    return
  }
  if _ret21 := _result20.GetSuccess(); _ret21 != nil {
    return _ret21, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getDeviceList failed: unknown result")
}

// Parameters:
//  - Token
//  - DeviceName
func (p *DeviceManagementClient) GetDeviceStatus(ctx context.Context, token string, deviceName string) (_r *Response, _err error) {
  var _args22 DeviceManagementGetDeviceStatusArgs
  _args22.Token = token
  _args22.DeviceName = deviceName
  var _result24 DeviceManagementGetDeviceStatusResult
  var _meta23 thrift.ResponseMeta
  _meta23, _err = p.Client_().Call(ctx, "getDeviceStatus", &_args22, &_result24)
  p.SetLastResponseMeta_(_meta23)
  if _err != nil {
    return
  }
  if _ret25 := _result24.GetSuccess(); _ret25 != nil {
    return _ret25, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getDeviceStatus failed: unknown result")
}

// Parameters:
//  - Token
//  - DeviceName
//  - Status
func (p *DeviceManagementClient) UpdateDeviceStatus(ctx context.Context, token string, deviceName string, status int32) (_r *Response, _err error) {
  var _args26 DeviceManagementUpdateDeviceStatusArgs
  _args26.Token = token
  _args26.DeviceName = deviceName
  _args26.Status = status
  var _result28 DeviceManagementUpdateDeviceStatusResult
  var _meta27 thrift.ResponseMeta
  _meta27, _err = p.Client_().Call(ctx, "updateDeviceStatus", &_args26, &_result28)
  p.SetLastResponseMeta_(_meta27)
  if _err != nil {
    return
  }
  if _ret29 := _result28.GetSuccess(); _ret29 != nil {
    return _ret29, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "updateDeviceStatus failed: unknown result")
}

// Parameters:
//  - Token
//  - DeviceName
//  - DisplayName
func (p *DeviceManagementClient) UpdateDeviceDisplayName(ctx context.Context, token string, deviceName string, displayName string) (_r *Response, _err error) {
  var _args30 DeviceManagementUpdateDeviceDisplayNameArgs
  _args30.Token = token
  _args30.DeviceName = deviceName
  _args30.DisplayName = displayName
  var _result32 DeviceManagementUpdateDeviceDisplayNameResult
  var _meta31 thrift.ResponseMeta
  _meta31, _err = p.Client_().Call(ctx, "updateDeviceDisplayName", &_args30, &_result32)
  p.SetLastResponseMeta_(_meta31)
  if _err != nil {
    return
  }
  if _ret33 := _result32.GetSuccess(); _ret33 != nil {
    return _ret33, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "updateDeviceDisplayName failed: unknown result")
}

type DeviceManagementProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler DeviceManagement
}

func (p *DeviceManagementProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *DeviceManagementProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *DeviceManagementProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewDeviceManagementProcessor(handler DeviceManagement) *DeviceManagementProcessor {

  self34 := &DeviceManagementProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self34.processorMap["addDevice"] = &deviceManagementProcessorAddDevice{handler:handler}
  self34.processorMap["updateDevice"] = &deviceManagementProcessorUpdateDevice{handler:handler}
  self34.processorMap["getDevice"] = &deviceManagementProcessorGetDevice{handler:handler}
  self34.processorMap["removeDevice"] = &deviceManagementProcessorRemoveDevice{handler:handler}
  self34.processorMap["getDeviceList"] = &deviceManagementProcessorGetDeviceList{handler:handler}
  self34.processorMap["getDeviceStatus"] = &deviceManagementProcessorGetDeviceStatus{handler:handler}
  self34.processorMap["updateDeviceStatus"] = &deviceManagementProcessorUpdateDeviceStatus{handler:handler}
  self34.processorMap["updateDeviceDisplayName"] = &deviceManagementProcessorUpdateDeviceDisplayName{handler:handler}
return self34
}

func (p *DeviceManagementProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x35 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x35.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x35

}

type deviceManagementProcessorAddDevice struct {
  handler DeviceManagement
}

func (p *deviceManagementProcessorAddDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DeviceManagementAddDeviceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := DeviceManagementAddDeviceResult{}
  var retval *Response
  if retval, err2 = p.handler.AddDevice(ctx, args.Token, args.Device); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addDevice: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "addDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "addDevice", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type deviceManagementProcessorUpdateDevice struct {
  handler DeviceManagement
}

func (p *deviceManagementProcessorUpdateDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DeviceManagementUpdateDeviceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := DeviceManagementUpdateDeviceResult{}
  var retval *Response
  if retval, err2 = p.handler.UpdateDevice(ctx, args.Token, args.Device); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDevice: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateDevice", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type deviceManagementProcessorGetDevice struct {
  handler DeviceManagement
}

func (p *deviceManagementProcessorGetDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DeviceManagementGetDeviceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := DeviceManagementGetDeviceResult{}
  var retval *Response
  if retval, err2 = p.handler.GetDevice(ctx, args.Token, args.DeviceName); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDevice: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getDevice", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type deviceManagementProcessorRemoveDevice struct {
  handler DeviceManagement
}

func (p *deviceManagementProcessorRemoveDevice) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DeviceManagementRemoveDeviceArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := DeviceManagementRemoveDeviceResult{}
  var retval *Response
  if retval, err2 = p.handler.RemoveDevice(ctx, args.Token, args.DeviceName); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeDevice: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeDevice", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeDevice", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type deviceManagementProcessorGetDeviceList struct {
  handler DeviceManagement
}

func (p *deviceManagementProcessorGetDeviceList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DeviceManagementGetDeviceListArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getDeviceList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := DeviceManagementGetDeviceListResult{}
  var retval *Response
  if retval, err2 = p.handler.GetDeviceList(ctx, args.Token, args.SearchCriteria, args.MaxNr, args.OrderBy); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDeviceList: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getDeviceList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getDeviceList", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type deviceManagementProcessorGetDeviceStatus struct {
  handler DeviceManagement
}

func (p *deviceManagementProcessorGetDeviceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DeviceManagementGetDeviceStatusArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getDeviceStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := DeviceManagementGetDeviceStatusResult{}
  var retval *Response
  if retval, err2 = p.handler.GetDeviceStatus(ctx, args.Token, args.DeviceName); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDeviceStatus: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getDeviceStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getDeviceStatus", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type deviceManagementProcessorUpdateDeviceStatus struct {
  handler DeviceManagement
}

func (p *deviceManagementProcessorUpdateDeviceStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DeviceManagementUpdateDeviceStatusArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateDeviceStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := DeviceManagementUpdateDeviceStatusResult{}
  var retval *Response
  if retval, err2 = p.handler.UpdateDeviceStatus(ctx, args.Token, args.DeviceName, args.Status); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDeviceStatus: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateDeviceStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateDeviceStatus", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type deviceManagementProcessorUpdateDeviceDisplayName struct {
  handler DeviceManagement
}

func (p *deviceManagementProcessorUpdateDeviceDisplayName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := DeviceManagementUpdateDeviceDisplayNameArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateDeviceDisplayName", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := DeviceManagementUpdateDeviceDisplayNameResult{}
  var retval *Response
  if retval, err2 = p.handler.UpdateDeviceDisplayName(ctx, args.Token, args.DeviceName, args.DisplayName); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateDeviceDisplayName: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateDeviceDisplayName", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateDeviceDisplayName", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Token
//  - Device
type DeviceManagementAddDeviceArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Device *Device `thrift:"device,2" db:"device" json:"device"`
}

func NewDeviceManagementAddDeviceArgs() *DeviceManagementAddDeviceArgs {
  return &DeviceManagementAddDeviceArgs{}
}


func (p *DeviceManagementAddDeviceArgs) GetToken() string {
  return p.Token
}
var DeviceManagementAddDeviceArgs_Device_DEFAULT *Device
func (p *DeviceManagementAddDeviceArgs) GetDevice() *Device {
  if !p.IsSetDevice() {
    return DeviceManagementAddDeviceArgs_Device_DEFAULT
  }
return p.Device
}
func (p *DeviceManagementAddDeviceArgs) IsSetDevice() bool {
  return p.Device != nil
}

func (p *DeviceManagementAddDeviceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementAddDeviceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *DeviceManagementAddDeviceArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Device = &Device{}
  if err := p.Device.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Device), err)
  }
  return nil
}

func (p *DeviceManagementAddDeviceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addDevice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementAddDeviceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *DeviceManagementAddDeviceArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "device", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:device: ", p), err) }
  if err := p.Device.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Device), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:device: ", p), err) }
  return err
}

func (p *DeviceManagementAddDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementAddDeviceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DeviceManagementAddDeviceResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDeviceManagementAddDeviceResult() *DeviceManagementAddDeviceResult {
  return &DeviceManagementAddDeviceResult{}
}

var DeviceManagementAddDeviceResult_Success_DEFAULT *Response
func (p *DeviceManagementAddDeviceResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return DeviceManagementAddDeviceResult_Success_DEFAULT
  }
return p.Success
}
func (p *DeviceManagementAddDeviceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DeviceManagementAddDeviceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementAddDeviceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DeviceManagementAddDeviceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addDevice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementAddDeviceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DeviceManagementAddDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementAddDeviceResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Device
type DeviceManagementUpdateDeviceArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Device *Device `thrift:"device,2" db:"device" json:"device"`
}

func NewDeviceManagementUpdateDeviceArgs() *DeviceManagementUpdateDeviceArgs {
  return &DeviceManagementUpdateDeviceArgs{}
}


func (p *DeviceManagementUpdateDeviceArgs) GetToken() string {
  return p.Token
}
var DeviceManagementUpdateDeviceArgs_Device_DEFAULT *Device
func (p *DeviceManagementUpdateDeviceArgs) GetDevice() *Device {
  if !p.IsSetDevice() {
    return DeviceManagementUpdateDeviceArgs_Device_DEFAULT
  }
return p.Device
}
func (p *DeviceManagementUpdateDeviceArgs) IsSetDevice() bool {
  return p.Device != nil
}

func (p *DeviceManagementUpdateDeviceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementUpdateDeviceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *DeviceManagementUpdateDeviceArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Device = &Device{}
  if err := p.Device.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Device), err)
  }
  return nil
}

func (p *DeviceManagementUpdateDeviceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateDevice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementUpdateDeviceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *DeviceManagementUpdateDeviceArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "device", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:device: ", p), err) }
  if err := p.Device.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Device), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:device: ", p), err) }
  return err
}

func (p *DeviceManagementUpdateDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementUpdateDeviceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DeviceManagementUpdateDeviceResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDeviceManagementUpdateDeviceResult() *DeviceManagementUpdateDeviceResult {
  return &DeviceManagementUpdateDeviceResult{}
}

var DeviceManagementUpdateDeviceResult_Success_DEFAULT *Response
func (p *DeviceManagementUpdateDeviceResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return DeviceManagementUpdateDeviceResult_Success_DEFAULT
  }
return p.Success
}
func (p *DeviceManagementUpdateDeviceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DeviceManagementUpdateDeviceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementUpdateDeviceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DeviceManagementUpdateDeviceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateDevice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementUpdateDeviceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DeviceManagementUpdateDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementUpdateDeviceResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - DeviceName
type DeviceManagementGetDeviceArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  DeviceName string `thrift:"deviceName,2" db:"deviceName" json:"deviceName"`
}

func NewDeviceManagementGetDeviceArgs() *DeviceManagementGetDeviceArgs {
  return &DeviceManagementGetDeviceArgs{}
}


func (p *DeviceManagementGetDeviceArgs) GetToken() string {
  return p.Token
}

func (p *DeviceManagementGetDeviceArgs) GetDeviceName() string {
  return p.DeviceName
}
func (p *DeviceManagementGetDeviceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementGetDeviceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *DeviceManagementGetDeviceArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeviceName = v
}
  return nil
}

func (p *DeviceManagementGetDeviceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getDevice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementGetDeviceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *DeviceManagementGetDeviceArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DeviceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceName: ", p), err) }
  return err
}

func (p *DeviceManagementGetDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementGetDeviceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DeviceManagementGetDeviceResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDeviceManagementGetDeviceResult() *DeviceManagementGetDeviceResult {
  return &DeviceManagementGetDeviceResult{}
}

var DeviceManagementGetDeviceResult_Success_DEFAULT *Response
func (p *DeviceManagementGetDeviceResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return DeviceManagementGetDeviceResult_Success_DEFAULT
  }
return p.Success
}
func (p *DeviceManagementGetDeviceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DeviceManagementGetDeviceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementGetDeviceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DeviceManagementGetDeviceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getDevice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementGetDeviceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DeviceManagementGetDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementGetDeviceResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - DeviceName
type DeviceManagementRemoveDeviceArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  DeviceName string `thrift:"deviceName,2" db:"deviceName" json:"deviceName"`
}

func NewDeviceManagementRemoveDeviceArgs() *DeviceManagementRemoveDeviceArgs {
  return &DeviceManagementRemoveDeviceArgs{}
}


func (p *DeviceManagementRemoveDeviceArgs) GetToken() string {
  return p.Token
}

func (p *DeviceManagementRemoveDeviceArgs) GetDeviceName() string {
  return p.DeviceName
}
func (p *DeviceManagementRemoveDeviceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementRemoveDeviceArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *DeviceManagementRemoveDeviceArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeviceName = v
}
  return nil
}

func (p *DeviceManagementRemoveDeviceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeDevice_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementRemoveDeviceArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *DeviceManagementRemoveDeviceArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DeviceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceName: ", p), err) }
  return err
}

func (p *DeviceManagementRemoveDeviceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementRemoveDeviceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DeviceManagementRemoveDeviceResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDeviceManagementRemoveDeviceResult() *DeviceManagementRemoveDeviceResult {
  return &DeviceManagementRemoveDeviceResult{}
}

var DeviceManagementRemoveDeviceResult_Success_DEFAULT *Response
func (p *DeviceManagementRemoveDeviceResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return DeviceManagementRemoveDeviceResult_Success_DEFAULT
  }
return p.Success
}
func (p *DeviceManagementRemoveDeviceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DeviceManagementRemoveDeviceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementRemoveDeviceResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DeviceManagementRemoveDeviceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeDevice_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementRemoveDeviceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DeviceManagementRemoveDeviceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementRemoveDeviceResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - SearchCriteria
//  - MaxNr
//  - OrderBy
type DeviceManagementGetDeviceListArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  SearchCriteria *SearchCriteria `thrift:"searchCriteria,2" db:"searchCriteria" json:"searchCriteria"`
  MaxNr int32 `thrift:"maxNr,3" db:"maxNr" json:"maxNr"`
  OrderBy int32 `thrift:"orderBy,4" db:"orderBy" json:"orderBy"`
}

func NewDeviceManagementGetDeviceListArgs() *DeviceManagementGetDeviceListArgs {
  return &DeviceManagementGetDeviceListArgs{}
}


func (p *DeviceManagementGetDeviceListArgs) GetToken() string {
  return p.Token
}
var DeviceManagementGetDeviceListArgs_SearchCriteria_DEFAULT *SearchCriteria
func (p *DeviceManagementGetDeviceListArgs) GetSearchCriteria() *SearchCriteria {
  if !p.IsSetSearchCriteria() {
    return DeviceManagementGetDeviceListArgs_SearchCriteria_DEFAULT
  }
return p.SearchCriteria
}

func (p *DeviceManagementGetDeviceListArgs) GetMaxNr() int32 {
  return p.MaxNr
}

func (p *DeviceManagementGetDeviceListArgs) GetOrderBy() int32 {
  return p.OrderBy
}
func (p *DeviceManagementGetDeviceListArgs) IsSetSearchCriteria() bool {
  return p.SearchCriteria != nil
}

func (p *DeviceManagementGetDeviceListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementGetDeviceListArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *DeviceManagementGetDeviceListArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SearchCriteria = &SearchCriteria{}
  if err := p.SearchCriteria.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SearchCriteria), err)
  }
  return nil
}

func (p *DeviceManagementGetDeviceListArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxNr = v
}
  return nil
}

func (p *DeviceManagementGetDeviceListArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OrderBy = v
}
  return nil
}

func (p *DeviceManagementGetDeviceListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getDeviceList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementGetDeviceListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *DeviceManagementGetDeviceListArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchCriteria", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchCriteria: ", p), err) }
  if err := p.SearchCriteria.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SearchCriteria), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchCriteria: ", p), err) }
  return err
}

func (p *DeviceManagementGetDeviceListArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxNr", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxNr: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxNr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxNr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxNr: ", p), err) }
  return err
}

func (p *DeviceManagementGetDeviceListArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "orderBy", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:orderBy: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OrderBy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderBy (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:orderBy: ", p), err) }
  return err
}

func (p *DeviceManagementGetDeviceListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementGetDeviceListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DeviceManagementGetDeviceListResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDeviceManagementGetDeviceListResult() *DeviceManagementGetDeviceListResult {
  return &DeviceManagementGetDeviceListResult{}
}

var DeviceManagementGetDeviceListResult_Success_DEFAULT *Response
func (p *DeviceManagementGetDeviceListResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return DeviceManagementGetDeviceListResult_Success_DEFAULT
  }
return p.Success
}
func (p *DeviceManagementGetDeviceListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DeviceManagementGetDeviceListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementGetDeviceListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DeviceManagementGetDeviceListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getDeviceList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementGetDeviceListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DeviceManagementGetDeviceListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementGetDeviceListResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - DeviceName
type DeviceManagementGetDeviceStatusArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  DeviceName string `thrift:"deviceName,2" db:"deviceName" json:"deviceName"`
}

func NewDeviceManagementGetDeviceStatusArgs() *DeviceManagementGetDeviceStatusArgs {
  return &DeviceManagementGetDeviceStatusArgs{}
}


func (p *DeviceManagementGetDeviceStatusArgs) GetToken() string {
  return p.Token
}

func (p *DeviceManagementGetDeviceStatusArgs) GetDeviceName() string {
  return p.DeviceName
}
func (p *DeviceManagementGetDeviceStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementGetDeviceStatusArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *DeviceManagementGetDeviceStatusArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeviceName = v
}
  return nil
}

func (p *DeviceManagementGetDeviceStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getDeviceStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementGetDeviceStatusArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *DeviceManagementGetDeviceStatusArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DeviceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceName: ", p), err) }
  return err
}

func (p *DeviceManagementGetDeviceStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementGetDeviceStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DeviceManagementGetDeviceStatusResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDeviceManagementGetDeviceStatusResult() *DeviceManagementGetDeviceStatusResult {
  return &DeviceManagementGetDeviceStatusResult{}
}

var DeviceManagementGetDeviceStatusResult_Success_DEFAULT *Response
func (p *DeviceManagementGetDeviceStatusResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return DeviceManagementGetDeviceStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *DeviceManagementGetDeviceStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DeviceManagementGetDeviceStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementGetDeviceStatusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DeviceManagementGetDeviceStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getDeviceStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementGetDeviceStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DeviceManagementGetDeviceStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementGetDeviceStatusResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - DeviceName
//  - Status
type DeviceManagementUpdateDeviceStatusArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  DeviceName string `thrift:"deviceName,2" db:"deviceName" json:"deviceName"`
  Status int32 `thrift:"status,3" db:"status" json:"status"`
}

func NewDeviceManagementUpdateDeviceStatusArgs() *DeviceManagementUpdateDeviceStatusArgs {
  return &DeviceManagementUpdateDeviceStatusArgs{}
}


func (p *DeviceManagementUpdateDeviceStatusArgs) GetToken() string {
  return p.Token
}

func (p *DeviceManagementUpdateDeviceStatusArgs) GetDeviceName() string {
  return p.DeviceName
}

func (p *DeviceManagementUpdateDeviceStatusArgs) GetStatus() int32 {
  return p.Status
}
func (p *DeviceManagementUpdateDeviceStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementUpdateDeviceStatusArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *DeviceManagementUpdateDeviceStatusArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeviceName = v
}
  return nil
}

func (p *DeviceManagementUpdateDeviceStatusArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *DeviceManagementUpdateDeviceStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateDeviceStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementUpdateDeviceStatusArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *DeviceManagementUpdateDeviceStatusArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DeviceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceName: ", p), err) }
  return err
}

func (p *DeviceManagementUpdateDeviceStatusArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *DeviceManagementUpdateDeviceStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementUpdateDeviceStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DeviceManagementUpdateDeviceStatusResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDeviceManagementUpdateDeviceStatusResult() *DeviceManagementUpdateDeviceStatusResult {
  return &DeviceManagementUpdateDeviceStatusResult{}
}

var DeviceManagementUpdateDeviceStatusResult_Success_DEFAULT *Response
func (p *DeviceManagementUpdateDeviceStatusResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return DeviceManagementUpdateDeviceStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *DeviceManagementUpdateDeviceStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DeviceManagementUpdateDeviceStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementUpdateDeviceStatusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DeviceManagementUpdateDeviceStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateDeviceStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementUpdateDeviceStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DeviceManagementUpdateDeviceStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementUpdateDeviceStatusResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - DeviceName
//  - DisplayName
type DeviceManagementUpdateDeviceDisplayNameArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  DeviceName string `thrift:"deviceName,2" db:"deviceName" json:"deviceName"`
  DisplayName string `thrift:"displayName,3" db:"displayName" json:"displayName"`
}

func NewDeviceManagementUpdateDeviceDisplayNameArgs() *DeviceManagementUpdateDeviceDisplayNameArgs {
  return &DeviceManagementUpdateDeviceDisplayNameArgs{}
}


func (p *DeviceManagementUpdateDeviceDisplayNameArgs) GetToken() string {
  return p.Token
}

func (p *DeviceManagementUpdateDeviceDisplayNameArgs) GetDeviceName() string {
  return p.DeviceName
}

func (p *DeviceManagementUpdateDeviceDisplayNameArgs) GetDisplayName() string {
  return p.DisplayName
}
func (p *DeviceManagementUpdateDeviceDisplayNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementUpdateDeviceDisplayNameArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *DeviceManagementUpdateDeviceDisplayNameArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DeviceName = v
}
  return nil
}

func (p *DeviceManagementUpdateDeviceDisplayNameArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DisplayName = v
}
  return nil
}

func (p *DeviceManagementUpdateDeviceDisplayNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateDeviceDisplayName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementUpdateDeviceDisplayNameArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *DeviceManagementUpdateDeviceDisplayNameArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "deviceName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:deviceName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DeviceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.deviceName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:deviceName: ", p), err) }
  return err
}

func (p *DeviceManagementUpdateDeviceDisplayNameArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "displayName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:displayName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DisplayName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.displayName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:displayName: ", p), err) }
  return err
}

func (p *DeviceManagementUpdateDeviceDisplayNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementUpdateDeviceDisplayNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type DeviceManagementUpdateDeviceDisplayNameResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewDeviceManagementUpdateDeviceDisplayNameResult() *DeviceManagementUpdateDeviceDisplayNameResult {
  return &DeviceManagementUpdateDeviceDisplayNameResult{}
}

var DeviceManagementUpdateDeviceDisplayNameResult_Success_DEFAULT *Response
func (p *DeviceManagementUpdateDeviceDisplayNameResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return DeviceManagementUpdateDeviceDisplayNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *DeviceManagementUpdateDeviceDisplayNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *DeviceManagementUpdateDeviceDisplayNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *DeviceManagementUpdateDeviceDisplayNameResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *DeviceManagementUpdateDeviceDisplayNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateDeviceDisplayName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *DeviceManagementUpdateDeviceDisplayNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *DeviceManagementUpdateDeviceDisplayNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("DeviceManagementUpdateDeviceDisplayNameResult(%+v)", *p)
}


