// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package runplan

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"dm/sampleinfo"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = sampleinfo.GoUnusedProtection__
// Attributes:
//  - Name
//  - Type
//  - CreatorId
//  - ThroughputModeKey
//  - ThroughputMode
//  - ReadlengthModeKey
//  - ReadlengthMode
//  - Index1LengthKey
//  - Index1Length
//  - Index2LengthKey
//  - Index2Length
//  - AnalysisPipelineKey
//  - AnalysisPipeline
//  - ReferenceKey
//  - Reference
//  - ScanMatrix
//  - TileMap
//  - SampleId
//  - Recipe
//  - ID
//  - CreatorName
//  - CreateTime
//  - LastUpdateTime
//  - ProjectName
//  - IsTrimAdapter
//  - BkType
//  - BkVariant
//  - BkVersion
//  - Status
//  - IsDisplay
//  - LibPrepMethod
//  - LibPrepMethodKey
//  - ScanMatrixKey
//  - TileMapKey
//  - RecipeKey
type RunPlan struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  Type int32 `thrift:"type,2,required" db:"type" json:"type"`
  CreatorId int32 `thrift:"creatorId,3,required" db:"creatorId" json:"creatorId"`
  ThroughputModeKey *int32 `thrift:"throughputModeKey,4" db:"throughputModeKey" json:"throughputModeKey,omitempty"`
  ThroughputMode *string `thrift:"throughputMode,5" db:"throughputMode" json:"throughputMode,omitempty"`
  ReadlengthModeKey *int32 `thrift:"readlengthModeKey,6" db:"readlengthModeKey" json:"readlengthModeKey,omitempty"`
  ReadlengthMode *string `thrift:"readlengthMode,7" db:"readlengthMode" json:"readlengthMode,omitempty"`
  Index1LengthKey *int32 `thrift:"index1LengthKey,8" db:"index1LengthKey" json:"index1LengthKey,omitempty"`
  Index1Length *int32 `thrift:"index1Length,9" db:"index1Length" json:"index1Length,omitempty"`
  Index2LengthKey *int32 `thrift:"index2LengthKey,10" db:"index2LengthKey" json:"index2LengthKey,omitempty"`
  Index2Length *int32 `thrift:"index2Length,11" db:"index2Length" json:"index2Length,omitempty"`
  AnalysisPipelineKey *int32 `thrift:"analysisPipelineKey,12" db:"analysisPipelineKey" json:"analysisPipelineKey,omitempty"`
  AnalysisPipeline *string `thrift:"analysisPipeline,13" db:"analysisPipeline" json:"analysisPipeline,omitempty"`
  ReferenceKey *int32 `thrift:"referenceKey,14" db:"referenceKey" json:"referenceKey,omitempty"`
  Reference *sampleinfo.SingleSampleInfo `thrift:"reference,15" db:"reference" json:"reference,omitempty"`
  ScanMatrix *string `thrift:"scanMatrix,16" db:"scanMatrix" json:"scanMatrix,omitempty"`
  TileMap *string `thrift:"tileMap,17" db:"tileMap" json:"tileMap,omitempty"`
  SampleId *int32 `thrift:"sampleId,18" db:"sampleId" json:"sampleId,omitempty"`
  Recipe *string `thrift:"recipe,19" db:"recipe" json:"recipe,omitempty"`
  ID *int32 `thrift:"id,20" db:"id" json:"id,omitempty"`
  CreatorName *string `thrift:"creatorName,21" db:"creatorName" json:"creatorName,omitempty"`
  CreateTime *int64 `thrift:"createTime,22" db:"createTime" json:"createTime,omitempty"`
  LastUpdateTime *int64 `thrift:"lastUpdateTime,23" db:"lastUpdateTime" json:"lastUpdateTime,omitempty"`
  ProjectName string `thrift:"projectName,24" db:"projectName" json:"projectName"`
  IsTrimAdapter bool `thrift:"isTrimAdapter,25" db:"isTrimAdapter" json:"isTrimAdapter"`
  BkType *string `thrift:"bkType,26" db:"bkType" json:"bkType,omitempty"`
  BkVariant *string `thrift:"bkVariant,27" db:"bkVariant" json:"bkVariant,omitempty"`
  BkVersion *string `thrift:"bkVersion,28" db:"bkVersion" json:"bkVersion,omitempty"`
  Status int32 `thrift:"status,29" db:"status" json:"status"`
  IsDisplay bool `thrift:"isDisplay,30" db:"isDisplay" json:"isDisplay"`
  LibPrepMethod *string `thrift:"libPrepMethod,31" db:"libPrepMethod" json:"libPrepMethod,omitempty"`
  LibPrepMethodKey *int32 `thrift:"libPrepMethodKey,32" db:"libPrepMethodKey" json:"libPrepMethodKey,omitempty"`
  ScanMatrixKey *int32 `thrift:"scanMatrixKey,33" db:"scanMatrixKey" json:"scanMatrixKey,omitempty"`
  TileMapKey *int32 `thrift:"tileMapKey,34" db:"tileMapKey" json:"tileMapKey,omitempty"`
  RecipeKey *int32 `thrift:"recipeKey,35" db:"recipeKey" json:"recipeKey,omitempty"`
}

func NewRunPlan() *RunPlan {
  return &RunPlan{}
}


func (p *RunPlan) GetName() string {
  return p.Name
}

func (p *RunPlan) GetType() int32 {
  return p.Type
}

func (p *RunPlan) GetCreatorId() int32 {
  return p.CreatorId
}
var RunPlan_ThroughputModeKey_DEFAULT int32
func (p *RunPlan) GetThroughputModeKey() int32 {
  if !p.IsSetThroughputModeKey() {
    return RunPlan_ThroughputModeKey_DEFAULT
  }
return *p.ThroughputModeKey
}
var RunPlan_ThroughputMode_DEFAULT string
func (p *RunPlan) GetThroughputMode() string {
  if !p.IsSetThroughputMode() {
    return RunPlan_ThroughputMode_DEFAULT
  }
return *p.ThroughputMode
}
var RunPlan_ReadlengthModeKey_DEFAULT int32
func (p *RunPlan) GetReadlengthModeKey() int32 {
  if !p.IsSetReadlengthModeKey() {
    return RunPlan_ReadlengthModeKey_DEFAULT
  }
return *p.ReadlengthModeKey
}
var RunPlan_ReadlengthMode_DEFAULT string
func (p *RunPlan) GetReadlengthMode() string {
  if !p.IsSetReadlengthMode() {
    return RunPlan_ReadlengthMode_DEFAULT
  }
return *p.ReadlengthMode
}
var RunPlan_Index1LengthKey_DEFAULT int32
func (p *RunPlan) GetIndex1LengthKey() int32 {
  if !p.IsSetIndex1LengthKey() {
    return RunPlan_Index1LengthKey_DEFAULT
  }
return *p.Index1LengthKey
}
var RunPlan_Index1Length_DEFAULT int32
func (p *RunPlan) GetIndex1Length() int32 {
  if !p.IsSetIndex1Length() {
    return RunPlan_Index1Length_DEFAULT
  }
return *p.Index1Length
}
var RunPlan_Index2LengthKey_DEFAULT int32
func (p *RunPlan) GetIndex2LengthKey() int32 {
  if !p.IsSetIndex2LengthKey() {
    return RunPlan_Index2LengthKey_DEFAULT
  }
return *p.Index2LengthKey
}
var RunPlan_Index2Length_DEFAULT int32
func (p *RunPlan) GetIndex2Length() int32 {
  if !p.IsSetIndex2Length() {
    return RunPlan_Index2Length_DEFAULT
  }
return *p.Index2Length
}
var RunPlan_AnalysisPipelineKey_DEFAULT int32
func (p *RunPlan) GetAnalysisPipelineKey() int32 {
  if !p.IsSetAnalysisPipelineKey() {
    return RunPlan_AnalysisPipelineKey_DEFAULT
  }
return *p.AnalysisPipelineKey
}
var RunPlan_AnalysisPipeline_DEFAULT string
func (p *RunPlan) GetAnalysisPipeline() string {
  if !p.IsSetAnalysisPipeline() {
    return RunPlan_AnalysisPipeline_DEFAULT
  }
return *p.AnalysisPipeline
}
var RunPlan_ReferenceKey_DEFAULT int32
func (p *RunPlan) GetReferenceKey() int32 {
  if !p.IsSetReferenceKey() {
    return RunPlan_ReferenceKey_DEFAULT
  }
return *p.ReferenceKey
}
var RunPlan_Reference_DEFAULT *sampleinfo.SingleSampleInfo
func (p *RunPlan) GetReference() *sampleinfo.SingleSampleInfo {
  if !p.IsSetReference() {
    return RunPlan_Reference_DEFAULT
  }
return p.Reference
}
var RunPlan_ScanMatrix_DEFAULT string
func (p *RunPlan) GetScanMatrix() string {
  if !p.IsSetScanMatrix() {
    return RunPlan_ScanMatrix_DEFAULT
  }
return *p.ScanMatrix
}
var RunPlan_TileMap_DEFAULT string
func (p *RunPlan) GetTileMap() string {
  if !p.IsSetTileMap() {
    return RunPlan_TileMap_DEFAULT
  }
return *p.TileMap
}
var RunPlan_SampleId_DEFAULT int32
func (p *RunPlan) GetSampleId() int32 {
  if !p.IsSetSampleId() {
    return RunPlan_SampleId_DEFAULT
  }
return *p.SampleId
}
var RunPlan_Recipe_DEFAULT string
func (p *RunPlan) GetRecipe() string {
  if !p.IsSetRecipe() {
    return RunPlan_Recipe_DEFAULT
  }
return *p.Recipe
}
var RunPlan_ID_DEFAULT int32
func (p *RunPlan) GetID() int32 {
  if !p.IsSetID() {
    return RunPlan_ID_DEFAULT
  }
return *p.ID
}
var RunPlan_CreatorName_DEFAULT string
func (p *RunPlan) GetCreatorName() string {
  if !p.IsSetCreatorName() {
    return RunPlan_CreatorName_DEFAULT
  }
return *p.CreatorName
}
var RunPlan_CreateTime_DEFAULT int64
func (p *RunPlan) GetCreateTime() int64 {
  if !p.IsSetCreateTime() {
    return RunPlan_CreateTime_DEFAULT
  }
return *p.CreateTime
}
var RunPlan_LastUpdateTime_DEFAULT int64
func (p *RunPlan) GetLastUpdateTime() int64 {
  if !p.IsSetLastUpdateTime() {
    return RunPlan_LastUpdateTime_DEFAULT
  }
return *p.LastUpdateTime
}

func (p *RunPlan) GetProjectName() string {
  return p.ProjectName
}

func (p *RunPlan) GetIsTrimAdapter() bool {
  return p.IsTrimAdapter
}
var RunPlan_BkType_DEFAULT string
func (p *RunPlan) GetBkType() string {
  if !p.IsSetBkType() {
    return RunPlan_BkType_DEFAULT
  }
return *p.BkType
}
var RunPlan_BkVariant_DEFAULT string
func (p *RunPlan) GetBkVariant() string {
  if !p.IsSetBkVariant() {
    return RunPlan_BkVariant_DEFAULT
  }
return *p.BkVariant
}
var RunPlan_BkVersion_DEFAULT string
func (p *RunPlan) GetBkVersion() string {
  if !p.IsSetBkVersion() {
    return RunPlan_BkVersion_DEFAULT
  }
return *p.BkVersion
}

func (p *RunPlan) GetStatus() int32 {
  return p.Status
}

func (p *RunPlan) GetIsDisplay() bool {
  return p.IsDisplay
}
var RunPlan_LibPrepMethod_DEFAULT string
func (p *RunPlan) GetLibPrepMethod() string {
  if !p.IsSetLibPrepMethod() {
    return RunPlan_LibPrepMethod_DEFAULT
  }
return *p.LibPrepMethod
}
var RunPlan_LibPrepMethodKey_DEFAULT int32
func (p *RunPlan) GetLibPrepMethodKey() int32 {
  if !p.IsSetLibPrepMethodKey() {
    return RunPlan_LibPrepMethodKey_DEFAULT
  }
return *p.LibPrepMethodKey
}
var RunPlan_ScanMatrixKey_DEFAULT int32
func (p *RunPlan) GetScanMatrixKey() int32 {
  if !p.IsSetScanMatrixKey() {
    return RunPlan_ScanMatrixKey_DEFAULT
  }
return *p.ScanMatrixKey
}
var RunPlan_TileMapKey_DEFAULT int32
func (p *RunPlan) GetTileMapKey() int32 {
  if !p.IsSetTileMapKey() {
    return RunPlan_TileMapKey_DEFAULT
  }
return *p.TileMapKey
}
var RunPlan_RecipeKey_DEFAULT int32
func (p *RunPlan) GetRecipeKey() int32 {
  if !p.IsSetRecipeKey() {
    return RunPlan_RecipeKey_DEFAULT
  }
return *p.RecipeKey
}
func (p *RunPlan) IsSetThroughputModeKey() bool {
  return p.ThroughputModeKey != nil
}

func (p *RunPlan) IsSetThroughputMode() bool {
  return p.ThroughputMode != nil
}

func (p *RunPlan) IsSetReadlengthModeKey() bool {
  return p.ReadlengthModeKey != nil
}

func (p *RunPlan) IsSetReadlengthMode() bool {
  return p.ReadlengthMode != nil
}

func (p *RunPlan) IsSetIndex1LengthKey() bool {
  return p.Index1LengthKey != nil
}

func (p *RunPlan) IsSetIndex1Length() bool {
  return p.Index1Length != nil
}

func (p *RunPlan) IsSetIndex2LengthKey() bool {
  return p.Index2LengthKey != nil
}

func (p *RunPlan) IsSetIndex2Length() bool {
  return p.Index2Length != nil
}

func (p *RunPlan) IsSetAnalysisPipelineKey() bool {
  return p.AnalysisPipelineKey != nil
}

func (p *RunPlan) IsSetAnalysisPipeline() bool {
  return p.AnalysisPipeline != nil
}

func (p *RunPlan) IsSetReferenceKey() bool {
  return p.ReferenceKey != nil
}

func (p *RunPlan) IsSetReference() bool {
  return p.Reference != nil
}

func (p *RunPlan) IsSetScanMatrix() bool {
  return p.ScanMatrix != nil
}

func (p *RunPlan) IsSetTileMap() bool {
  return p.TileMap != nil
}

func (p *RunPlan) IsSetSampleId() bool {
  return p.SampleId != nil
}

func (p *RunPlan) IsSetRecipe() bool {
  return p.Recipe != nil
}

func (p *RunPlan) IsSetID() bool {
  return p.ID != nil
}

func (p *RunPlan) IsSetCreatorName() bool {
  return p.CreatorName != nil
}

func (p *RunPlan) IsSetCreateTime() bool {
  return p.CreateTime != nil
}

func (p *RunPlan) IsSetLastUpdateTime() bool {
  return p.LastUpdateTime != nil
}

func (p *RunPlan) IsSetBkType() bool {
  return p.BkType != nil
}

func (p *RunPlan) IsSetBkVariant() bool {
  return p.BkVariant != nil
}

func (p *RunPlan) IsSetBkVersion() bool {
  return p.BkVersion != nil
}

func (p *RunPlan) IsSetLibPrepMethod() bool {
  return p.LibPrepMethod != nil
}

func (p *RunPlan) IsSetLibPrepMethodKey() bool {
  return p.LibPrepMethodKey != nil
}

func (p *RunPlan) IsSetScanMatrixKey() bool {
  return p.ScanMatrixKey != nil
}

func (p *RunPlan) IsSetTileMapKey() bool {
  return p.TileMapKey != nil
}

func (p *RunPlan) IsSetRecipeKey() bool {
  return p.RecipeKey != nil
}

func (p *RunPlan) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetType bool = false;
  var issetCreatorId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
        issetType = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
        issetCreatorId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetType{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Type is not set"));
  }
  if !issetCreatorId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CreatorId is not set"));
  }
  return nil
}

func (p *RunPlan)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *RunPlan)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *RunPlan)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CreatorId = v
}
  return nil
}

func (p *RunPlan)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ThroughputModeKey = &v
}
  return nil
}

func (p *RunPlan)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ThroughputMode = &v
}
  return nil
}

func (p *RunPlan)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ReadlengthModeKey = &v
}
  return nil
}

func (p *RunPlan)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ReadlengthMode = &v
}
  return nil
}

func (p *RunPlan)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Index1LengthKey = &v
}
  return nil
}

func (p *RunPlan)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Index1Length = &v
}
  return nil
}

func (p *RunPlan)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Index2LengthKey = &v
}
  return nil
}

func (p *RunPlan)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Index2Length = &v
}
  return nil
}

func (p *RunPlan)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.AnalysisPipelineKey = &v
}
  return nil
}

func (p *RunPlan)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.AnalysisPipeline = &v
}
  return nil
}

func (p *RunPlan)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.ReferenceKey = &v
}
  return nil
}

func (p *RunPlan)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  p.Reference = &sampleinfo.SingleSampleInfo{}
  if err := p.Reference.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Reference), err)
  }
  return nil
}

func (p *RunPlan)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.ScanMatrix = &v
}
  return nil
}

func (p *RunPlan)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.TileMap = &v
}
  return nil
}

func (p *RunPlan)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.SampleId = &v
}
  return nil
}

func (p *RunPlan)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.Recipe = &v
}
  return nil
}

func (p *RunPlan)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *RunPlan)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.CreatorName = &v
}
  return nil
}

func (p *RunPlan)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.CreateTime = &v
}
  return nil
}

func (p *RunPlan)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.LastUpdateTime = &v
}
  return nil
}

func (p *RunPlan)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.ProjectName = v
}
  return nil
}

func (p *RunPlan)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.IsTrimAdapter = v
}
  return nil
}

func (p *RunPlan)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.BkType = &v
}
  return nil
}

func (p *RunPlan)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.BkVariant = &v
}
  return nil
}

func (p *RunPlan)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.BkVersion = &v
}
  return nil
}

func (p *RunPlan)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *RunPlan)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.IsDisplay = v
}
  return nil
}

func (p *RunPlan)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.LibPrepMethod = &v
}
  return nil
}

func (p *RunPlan)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.LibPrepMethodKey = &v
}
  return nil
}

func (p *RunPlan)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.ScanMatrixKey = &v
}
  return nil
}

func (p *RunPlan)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.TileMapKey = &v
}
  return nil
}

func (p *RunPlan)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.RecipeKey = &v
}
  return nil
}

func (p *RunPlan) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RunPlan"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunPlan) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *RunPlan) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:type: ", p), err) }
  return err
}

func (p *RunPlan) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creatorId", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:creatorId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CreatorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creatorId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:creatorId: ", p), err) }
  return err
}

func (p *RunPlan) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThroughputModeKey() {
    if err := oprot.WriteFieldBegin(ctx, "throughputModeKey", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:throughputModeKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ThroughputModeKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.throughputModeKey (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:throughputModeKey: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThroughputMode() {
    if err := oprot.WriteFieldBegin(ctx, "throughputMode", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:throughputMode: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ThroughputMode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.throughputMode (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:throughputMode: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReadlengthModeKey() {
    if err := oprot.WriteFieldBegin(ctx, "readlengthModeKey", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:readlengthModeKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ReadlengthModeKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readlengthModeKey (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:readlengthModeKey: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReadlengthMode() {
    if err := oprot.WriteFieldBegin(ctx, "readlengthMode", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:readlengthMode: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ReadlengthMode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.readlengthMode (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:readlengthMode: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex1LengthKey() {
    if err := oprot.WriteFieldBegin(ctx, "index1LengthKey", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:index1LengthKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Index1LengthKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index1LengthKey (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:index1LengthKey: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex1Length() {
    if err := oprot.WriteFieldBegin(ctx, "index1Length", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:index1Length: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Index1Length)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index1Length (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:index1Length: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex2LengthKey() {
    if err := oprot.WriteFieldBegin(ctx, "index2LengthKey", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:index2LengthKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Index2LengthKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index2LengthKey (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:index2LengthKey: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex2Length() {
    if err := oprot.WriteFieldBegin(ctx, "index2Length", thrift.I32, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:index2Length: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Index2Length)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index2Length (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:index2Length: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnalysisPipelineKey() {
    if err := oprot.WriteFieldBegin(ctx, "analysisPipelineKey", thrift.I32, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:analysisPipelineKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.AnalysisPipelineKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.analysisPipelineKey (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:analysisPipelineKey: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnalysisPipeline() {
    if err := oprot.WriteFieldBegin(ctx, "analysisPipeline", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:analysisPipeline: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AnalysisPipeline)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.analysisPipeline (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:analysisPipeline: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReferenceKey() {
    if err := oprot.WriteFieldBegin(ctx, "referenceKey", thrift.I32, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:referenceKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ReferenceKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.referenceKey (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:referenceKey: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReference() {
    if err := oprot.WriteFieldBegin(ctx, "reference", thrift.STRUCT, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:reference: ", p), err) }
    if err := p.Reference.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Reference), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:reference: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetScanMatrix() {
    if err := oprot.WriteFieldBegin(ctx, "scanMatrix", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:scanMatrix: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ScanMatrix)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scanMatrix (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:scanMatrix: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTileMap() {
    if err := oprot.WriteFieldBegin(ctx, "tileMap", thrift.STRING, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:tileMap: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.TileMap)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tileMap (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:tileMap: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampleId() {
    if err := oprot.WriteFieldBegin(ctx, "sampleId", thrift.I32, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:sampleId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.SampleId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sampleId (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:sampleId: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRecipe() {
    if err := oprot.WriteFieldBegin(ctx, "recipe", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:recipe: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Recipe)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recipe (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:recipe: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin(ctx, "id", thrift.I32, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:id: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:id: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatorName() {
    if err := oprot.WriteFieldBegin(ctx, "creatorName", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:creatorName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.CreatorName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creatorName (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:creatorName: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreateTime() {
    if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I64, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:createTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.CreateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createTime (22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:createTime: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLastUpdateTime() {
    if err := oprot.WriteFieldBegin(ctx, "lastUpdateTime", thrift.I64, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:lastUpdateTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.LastUpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastUpdateTime (23) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:lastUpdateTime: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "projectName", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:projectName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ProjectName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectName (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:projectName: ", p), err) }
  return err
}

func (p *RunPlan) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isTrimAdapter", thrift.BOOL, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:isTrimAdapter: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsTrimAdapter)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isTrimAdapter (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:isTrimAdapter: ", p), err) }
  return err
}

func (p *RunPlan) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBkType() {
    if err := oprot.WriteFieldBegin(ctx, "bkType", thrift.STRING, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:bkType: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.BkType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bkType (26) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:bkType: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBkVariant() {
    if err := oprot.WriteFieldBegin(ctx, "bkVariant", thrift.STRING, 27); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:bkVariant: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.BkVariant)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bkVariant (27) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 27:bkVariant: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBkVersion() {
    if err := oprot.WriteFieldBegin(ctx, "bkVersion", thrift.STRING, 28); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:bkVersion: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.BkVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bkVersion (28) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 28:bkVersion: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 29); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (29) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 29:status: ", p), err) }
  return err
}

func (p *RunPlan) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isDisplay", thrift.BOOL, 30); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:isDisplay: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsDisplay)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isDisplay (30) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 30:isDisplay: ", p), err) }
  return err
}

func (p *RunPlan) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLibPrepMethod() {
    if err := oprot.WriteFieldBegin(ctx, "libPrepMethod", thrift.STRING, 31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:libPrepMethod: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LibPrepMethod)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.libPrepMethod (31) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 31:libPrepMethod: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLibPrepMethodKey() {
    if err := oprot.WriteFieldBegin(ctx, "libPrepMethodKey", thrift.I32, 32); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:libPrepMethodKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.LibPrepMethodKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.libPrepMethodKey (32) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 32:libPrepMethodKey: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetScanMatrixKey() {
    if err := oprot.WriteFieldBegin(ctx, "scanMatrixKey", thrift.I32, 33); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:scanMatrixKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ScanMatrixKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.scanMatrixKey (33) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 33:scanMatrixKey: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTileMapKey() {
    if err := oprot.WriteFieldBegin(ctx, "tileMapKey", thrift.I32, 34); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:tileMapKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.TileMapKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tileMapKey (34) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 34:tileMapKey: ", p), err) }
  }
  return err
}

func (p *RunPlan) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRecipeKey() {
    if err := oprot.WriteFieldBegin(ctx, "recipeKey", thrift.I32, 35); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:recipeKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.RecipeKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.recipeKey (35) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 35:recipeKey: ", p), err) }
  }
  return err
}

func (p *RunPlan) Equals(other *RunPlan) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.Type != other.Type { return false }
  if p.CreatorId != other.CreatorId { return false }
  if p.ThroughputModeKey != other.ThroughputModeKey {
    if p.ThroughputModeKey == nil || other.ThroughputModeKey == nil {
      return false
    }
    if (*p.ThroughputModeKey) != (*other.ThroughputModeKey) { return false }
  }
  if p.ThroughputMode != other.ThroughputMode {
    if p.ThroughputMode == nil || other.ThroughputMode == nil {
      return false
    }
    if (*p.ThroughputMode) != (*other.ThroughputMode) { return false }
  }
  if p.ReadlengthModeKey != other.ReadlengthModeKey {
    if p.ReadlengthModeKey == nil || other.ReadlengthModeKey == nil {
      return false
    }
    if (*p.ReadlengthModeKey) != (*other.ReadlengthModeKey) { return false }
  }
  if p.ReadlengthMode != other.ReadlengthMode {
    if p.ReadlengthMode == nil || other.ReadlengthMode == nil {
      return false
    }
    if (*p.ReadlengthMode) != (*other.ReadlengthMode) { return false }
  }
  if p.Index1LengthKey != other.Index1LengthKey {
    if p.Index1LengthKey == nil || other.Index1LengthKey == nil {
      return false
    }
    if (*p.Index1LengthKey) != (*other.Index1LengthKey) { return false }
  }
  if p.Index1Length != other.Index1Length {
    if p.Index1Length == nil || other.Index1Length == nil {
      return false
    }
    if (*p.Index1Length) != (*other.Index1Length) { return false }
  }
  if p.Index2LengthKey != other.Index2LengthKey {
    if p.Index2LengthKey == nil || other.Index2LengthKey == nil {
      return false
    }
    if (*p.Index2LengthKey) != (*other.Index2LengthKey) { return false }
  }
  if p.Index2Length != other.Index2Length {
    if p.Index2Length == nil || other.Index2Length == nil {
      return false
    }
    if (*p.Index2Length) != (*other.Index2Length) { return false }
  }
  if p.AnalysisPipelineKey != other.AnalysisPipelineKey {
    if p.AnalysisPipelineKey == nil || other.AnalysisPipelineKey == nil {
      return false
    }
    if (*p.AnalysisPipelineKey) != (*other.AnalysisPipelineKey) { return false }
  }
  if p.AnalysisPipeline != other.AnalysisPipeline {
    if p.AnalysisPipeline == nil || other.AnalysisPipeline == nil {
      return false
    }
    if (*p.AnalysisPipeline) != (*other.AnalysisPipeline) { return false }
  }
  if p.ReferenceKey != other.ReferenceKey {
    if p.ReferenceKey == nil || other.ReferenceKey == nil {
      return false
    }
    if (*p.ReferenceKey) != (*other.ReferenceKey) { return false }
  }
  if !p.Reference.Equals(other.Reference) { return false }
  if p.ScanMatrix != other.ScanMatrix {
    if p.ScanMatrix == nil || other.ScanMatrix == nil {
      return false
    }
    if (*p.ScanMatrix) != (*other.ScanMatrix) { return false }
  }
  if p.TileMap != other.TileMap {
    if p.TileMap == nil || other.TileMap == nil {
      return false
    }
    if (*p.TileMap) != (*other.TileMap) { return false }
  }
  if p.SampleId != other.SampleId {
    if p.SampleId == nil || other.SampleId == nil {
      return false
    }
    if (*p.SampleId) != (*other.SampleId) { return false }
  }
  if p.Recipe != other.Recipe {
    if p.Recipe == nil || other.Recipe == nil {
      return false
    }
    if (*p.Recipe) != (*other.Recipe) { return false }
  }
  if p.ID != other.ID {
    if p.ID == nil || other.ID == nil {
      return false
    }
    if (*p.ID) != (*other.ID) { return false }
  }
  if p.CreatorName != other.CreatorName {
    if p.CreatorName == nil || other.CreatorName == nil {
      return false
    }
    if (*p.CreatorName) != (*other.CreatorName) { return false }
  }
  if p.CreateTime != other.CreateTime {
    if p.CreateTime == nil || other.CreateTime == nil {
      return false
    }
    if (*p.CreateTime) != (*other.CreateTime) { return false }
  }
  if p.LastUpdateTime != other.LastUpdateTime {
    if p.LastUpdateTime == nil || other.LastUpdateTime == nil {
      return false
    }
    if (*p.LastUpdateTime) != (*other.LastUpdateTime) { return false }
  }
  if p.ProjectName != other.ProjectName { return false }
  if p.IsTrimAdapter != other.IsTrimAdapter { return false }
  if p.BkType != other.BkType {
    if p.BkType == nil || other.BkType == nil {
      return false
    }
    if (*p.BkType) != (*other.BkType) { return false }
  }
  if p.BkVariant != other.BkVariant {
    if p.BkVariant == nil || other.BkVariant == nil {
      return false
    }
    if (*p.BkVariant) != (*other.BkVariant) { return false }
  }
  if p.BkVersion != other.BkVersion {
    if p.BkVersion == nil || other.BkVersion == nil {
      return false
    }
    if (*p.BkVersion) != (*other.BkVersion) { return false }
  }
  if p.Status != other.Status { return false }
  if p.IsDisplay != other.IsDisplay { return false }
  if p.LibPrepMethod != other.LibPrepMethod {
    if p.LibPrepMethod == nil || other.LibPrepMethod == nil {
      return false
    }
    if (*p.LibPrepMethod) != (*other.LibPrepMethod) { return false }
  }
  if p.LibPrepMethodKey != other.LibPrepMethodKey {
    if p.LibPrepMethodKey == nil || other.LibPrepMethodKey == nil {
      return false
    }
    if (*p.LibPrepMethodKey) != (*other.LibPrepMethodKey) { return false }
  }
  if p.ScanMatrixKey != other.ScanMatrixKey {
    if p.ScanMatrixKey == nil || other.ScanMatrixKey == nil {
      return false
    }
    if (*p.ScanMatrixKey) != (*other.ScanMatrixKey) { return false }
  }
  if p.TileMapKey != other.TileMapKey {
    if p.TileMapKey == nil || other.TileMapKey == nil {
      return false
    }
    if (*p.TileMapKey) != (*other.TileMapKey) { return false }
  }
  if p.RecipeKey != other.RecipeKey {
    if p.RecipeKey == nil || other.RecipeKey == nil {
      return false
    }
    if (*p.RecipeKey) != (*other.RecipeKey) { return false }
  }
  return true
}

func (p *RunPlan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunPlan(%+v)", *p)
}

// Attributes:
//  - RunplanId
//  - RunPlanList
//  - RunPlan
//  - RunPlanTotalCount
//  - CurrentPage
type ReturnData struct {
  RunplanId *int32 `thrift:"runplanId,1" db:"runplanId" json:"runplanId,omitempty"`
  RunPlanList []*RunPlan `thrift:"runPlanList,2" db:"runPlanList" json:"runPlanList,omitempty"`
  RunPlan *RunPlan `thrift:"runPlan,3" db:"runPlan" json:"runPlan,omitempty"`
  RunPlanTotalCount *int32 `thrift:"runPlanTotalCount,4" db:"runPlanTotalCount" json:"runPlanTotalCount,omitempty"`
  CurrentPage *int32 `thrift:"currentPage,5" db:"currentPage" json:"currentPage,omitempty"`
}

func NewReturnData() *ReturnData {
  return &ReturnData{}
}

var ReturnData_RunplanId_DEFAULT int32
func (p *ReturnData) GetRunplanId() int32 {
  if !p.IsSetRunplanId() {
    return ReturnData_RunplanId_DEFAULT
  }
return *p.RunplanId
}
var ReturnData_RunPlanList_DEFAULT []*RunPlan

func (p *ReturnData) GetRunPlanList() []*RunPlan {
  return p.RunPlanList
}
var ReturnData_RunPlan_DEFAULT *RunPlan
func (p *ReturnData) GetRunPlan() *RunPlan {
  if !p.IsSetRunPlan() {
    return ReturnData_RunPlan_DEFAULT
  }
return p.RunPlan
}
var ReturnData_RunPlanTotalCount_DEFAULT int32
func (p *ReturnData) GetRunPlanTotalCount() int32 {
  if !p.IsSetRunPlanTotalCount() {
    return ReturnData_RunPlanTotalCount_DEFAULT
  }
return *p.RunPlanTotalCount
}
var ReturnData_CurrentPage_DEFAULT int32
func (p *ReturnData) GetCurrentPage() int32 {
  if !p.IsSetCurrentPage() {
    return ReturnData_CurrentPage_DEFAULT
  }
return *p.CurrentPage
}
func (p *ReturnData) IsSetRunplanId() bool {
  return p.RunplanId != nil
}

func (p *ReturnData) IsSetRunPlanList() bool {
  return p.RunPlanList != nil
}

func (p *ReturnData) IsSetRunPlan() bool {
  return p.RunPlan != nil
}

func (p *ReturnData) IsSetRunPlanTotalCount() bool {
  return p.RunPlanTotalCount != nil
}

func (p *ReturnData) IsSetCurrentPage() bool {
  return p.CurrentPage != nil
}

func (p *ReturnData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReturnData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RunplanId = &v
}
  return nil
}

func (p *ReturnData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RunPlan, 0, size)
  p.RunPlanList =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &RunPlan{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.RunPlanList = append(p.RunPlanList, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReturnData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.RunPlan = &RunPlan{}
  if err := p.RunPlan.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RunPlan), err)
  }
  return nil
}

func (p *ReturnData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RunPlanTotalCount = &v
}
  return nil
}

func (p *ReturnData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CurrentPage = &v
}
  return nil
}

func (p *ReturnData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReturnData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReturnData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunplanId() {
    if err := oprot.WriteFieldBegin(ctx, "runplanId", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:runplanId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.RunplanId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runplanId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:runplanId: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunPlanList() {
    if err := oprot.WriteFieldBegin(ctx, "runPlanList", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runPlanList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RunPlanList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.RunPlanList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runPlanList: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunPlan() {
    if err := oprot.WriteFieldBegin(ctx, "runPlan", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:runPlan: ", p), err) }
    if err := p.RunPlan.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RunPlan), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:runPlan: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunPlanTotalCount() {
    if err := oprot.WriteFieldBegin(ctx, "runPlanTotalCount", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:runPlanTotalCount: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.RunPlanTotalCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runPlanTotalCount (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:runPlanTotalCount: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCurrentPage() {
    if err := oprot.WriteFieldBegin(ctx, "currentPage", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:currentPage: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.CurrentPage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.currentPage (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:currentPage: ", p), err) }
  }
  return err
}

func (p *ReturnData) Equals(other *ReturnData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RunplanId != other.RunplanId {
    if p.RunplanId == nil || other.RunplanId == nil {
      return false
    }
    if (*p.RunplanId) != (*other.RunplanId) { return false }
  }
  if len(p.RunPlanList) != len(other.RunPlanList) { return false }
  for i, _tgt := range p.RunPlanList {
    _src1 := other.RunPlanList[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if !p.RunPlan.Equals(other.RunPlan) { return false }
  if p.RunPlanTotalCount != other.RunPlanTotalCount {
    if p.RunPlanTotalCount == nil || other.RunPlanTotalCount == nil {
      return false
    }
    if (*p.RunPlanTotalCount) != (*other.RunPlanTotalCount) { return false }
  }
  if p.CurrentPage != other.CurrentPage {
    if p.CurrentPage == nil || other.CurrentPage == nil {
      return false
    }
    if (*p.CurrentPage) != (*other.CurrentPage) { return false }
  }
  return true
}

func (p *ReturnData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReturnData(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Message
//  - Data
type Response struct {
  ErrorCode int32 `thrift:"errorCode,1,required" db:"errorCode" json:"errorCode"`
  Message *string `thrift:"message,2" db:"message" json:"message,omitempty"`
  Data *ReturnData `thrift:"data,3" db:"data" json:"data,omitempty"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetErrorCode() int32 {
  return p.ErrorCode
}
var Response_Message_DEFAULT string
func (p *Response) GetMessage() string {
  if !p.IsSetMessage() {
    return Response_Message_DEFAULT
  }
return *p.Message
}
var Response_Data_DEFAULT *ReturnData
func (p *Response) GetData() *ReturnData {
  if !p.IsSetData() {
    return Response_Data_DEFAULT
  }
return p.Data
}
func (p *Response) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Response) IsSetData() bool {
  return p.Data != nil
}

func (p *Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *Response)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorCode = v
}
  return nil
}

func (p *Response)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *Response)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &ReturnData{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *Response) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  }
  return err
}

func (p *Response) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := p.Data.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *Response) Equals(other *Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if p.Message != other.Message {
    if p.Message == nil || other.Message == nil {
      return false
    }
    if (*p.Message) != (*other.Message) { return false }
  }
  if !p.Data.Equals(other.Data) { return false }
  return true
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

// Attributes:
//  - TimeFrom
//  - TimeTo
//  - Type
//  - PageNum
//  - PageSize
//  - Name
//  - CreatorName
type SearchCriteria struct {
  TimeFrom *int64 `thrift:"timeFrom,1" db:"timeFrom" json:"timeFrom,omitempty"`
  TimeTo *int64 `thrift:"timeTo,2" db:"timeTo" json:"timeTo,omitempty"`
  Type *int32 `thrift:"type,3" db:"type" json:"type,omitempty"`
  PageNum *int32 `thrift:"pageNum,4" db:"pageNum" json:"pageNum,omitempty"`
  PageSize *int32 `thrift:"pageSize,5" db:"pageSize" json:"pageSize,omitempty"`
  Name *string `thrift:"name,6" db:"name" json:"name,omitempty"`
  CreatorName *string `thrift:"creatorName,7" db:"creatorName" json:"creatorName,omitempty"`
}

func NewSearchCriteria() *SearchCriteria {
  return &SearchCriteria{}
}

var SearchCriteria_TimeFrom_DEFAULT int64
func (p *SearchCriteria) GetTimeFrom() int64 {
  if !p.IsSetTimeFrom() {
    return SearchCriteria_TimeFrom_DEFAULT
  }
return *p.TimeFrom
}
var SearchCriteria_TimeTo_DEFAULT int64
func (p *SearchCriteria) GetTimeTo() int64 {
  if !p.IsSetTimeTo() {
    return SearchCriteria_TimeTo_DEFAULT
  }
return *p.TimeTo
}
var SearchCriteria_Type_DEFAULT int32
func (p *SearchCriteria) GetType() int32 {
  if !p.IsSetType() {
    return SearchCriteria_Type_DEFAULT
  }
return *p.Type
}
var SearchCriteria_PageNum_DEFAULT int32
func (p *SearchCriteria) GetPageNum() int32 {
  if !p.IsSetPageNum() {
    return SearchCriteria_PageNum_DEFAULT
  }
return *p.PageNum
}
var SearchCriteria_PageSize_DEFAULT int32
func (p *SearchCriteria) GetPageSize() int32 {
  if !p.IsSetPageSize() {
    return SearchCriteria_PageSize_DEFAULT
  }
return *p.PageSize
}
var SearchCriteria_Name_DEFAULT string
func (p *SearchCriteria) GetName() string {
  if !p.IsSetName() {
    return SearchCriteria_Name_DEFAULT
  }
return *p.Name
}
var SearchCriteria_CreatorName_DEFAULT string
func (p *SearchCriteria) GetCreatorName() string {
  if !p.IsSetCreatorName() {
    return SearchCriteria_CreatorName_DEFAULT
  }
return *p.CreatorName
}
func (p *SearchCriteria) IsSetTimeFrom() bool {
  return p.TimeFrom != nil
}

func (p *SearchCriteria) IsSetTimeTo() bool {
  return p.TimeTo != nil
}

func (p *SearchCriteria) IsSetType() bool {
  return p.Type != nil
}

func (p *SearchCriteria) IsSetPageNum() bool {
  return p.PageNum != nil
}

func (p *SearchCriteria) IsSetPageSize() bool {
  return p.PageSize != nil
}

func (p *SearchCriteria) IsSetName() bool {
  return p.Name != nil
}

func (p *SearchCriteria) IsSetCreatorName() bool {
  return p.CreatorName != nil
}

func (p *SearchCriteria) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchCriteria)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TimeFrom = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeTo = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Type = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PageNum = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.PageSize = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CreatorName = &v
}
  return nil
}

func (p *SearchCriteria) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SearchCriteria"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchCriteria) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeFrom() {
    if err := oprot.WriteFieldBegin(ctx, "timeFrom", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timeFrom: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TimeFrom)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeFrom (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timeFrom: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeTo() {
    if err := oprot.WriteFieldBegin(ctx, "timeTo", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeTo: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TimeTo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeTo (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeTo: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:type: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:type: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageNum() {
    if err := oprot.WriteFieldBegin(ctx, "pageNum", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageNum: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageNum (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageNum: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageSize() {
    if err := oprot.WriteFieldBegin(ctx, "pageSize", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:pageSize: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageSize (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:pageSize: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:name: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:name: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatorName() {
    if err := oprot.WriteFieldBegin(ctx, "creatorName", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:creatorName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.CreatorName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creatorName (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:creatorName: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) Equals(other *SearchCriteria) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TimeFrom != other.TimeFrom {
    if p.TimeFrom == nil || other.TimeFrom == nil {
      return false
    }
    if (*p.TimeFrom) != (*other.TimeFrom) { return false }
  }
  if p.TimeTo != other.TimeTo {
    if p.TimeTo == nil || other.TimeTo == nil {
      return false
    }
    if (*p.TimeTo) != (*other.TimeTo) { return false }
  }
  if p.Type != other.Type {
    if p.Type == nil || other.Type == nil {
      return false
    }
    if (*p.Type) != (*other.Type) { return false }
  }
  if p.PageNum != other.PageNum {
    if p.PageNum == nil || other.PageNum == nil {
      return false
    }
    if (*p.PageNum) != (*other.PageNum) { return false }
  }
  if p.PageSize != other.PageSize {
    if p.PageSize == nil || other.PageSize == nil {
      return false
    }
    if (*p.PageSize) != (*other.PageSize) { return false }
  }
  if p.Name != other.Name {
    if p.Name == nil || other.Name == nil {
      return false
    }
    if (*p.Name) != (*other.Name) { return false }
  }
  if p.CreatorName != other.CreatorName {
    if p.CreatorName == nil || other.CreatorName == nil {
      return false
    }
    if (*p.CreatorName) != (*other.CreatorName) { return false }
  }
  return true
}

func (p *SearchCriteria) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchCriteria(%+v)", *p)
}

type RunPlanManagement interface {
  // Parameters:
  //  - Token
  //  - Runplan
  AddRunPlan(ctx context.Context, token string, runplan *RunPlan) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - PlanId
  RemoveRunPlan(ctx context.Context, token string, planId int32) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - PlanId
  //  - Runplan
  UpdateRunPlan(ctx context.Context, token string, planId int32, runplan *RunPlan) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - PlanId
  GetRunPlan(ctx context.Context, token string, planId int32) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - SearchCriteria
  //  - MaxNr
  //  - OrderBy
  GetRunPlanList(ctx context.Context, token string, searchCriteria *SearchCriteria, maxNr int32, orderBy int32) (_r *Response, _err error)
}

type RunPlanManagementClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewRunPlanManagementClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RunPlanManagementClient {
  return &RunPlanManagementClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewRunPlanManagementClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RunPlanManagementClient {
  return &RunPlanManagementClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRunPlanManagementClient(c thrift.TClient) *RunPlanManagementClient {
  return &RunPlanManagementClient{
    c: c,
  }
}

func (p *RunPlanManagementClient) Client_() thrift.TClient {
  return p.c
}

func (p *RunPlanManagementClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *RunPlanManagementClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Token
//  - Runplan
func (p *RunPlanManagementClient) AddRunPlan(ctx context.Context, token string, runplan *RunPlan) (_r *Response, _err error) {
  var _args2 RunPlanManagementAddRunPlanArgs
  _args2.Token = token
  _args2.Runplan = runplan
  var _result4 RunPlanManagementAddRunPlanResult
  var _meta3 thrift.ResponseMeta
  _meta3, _err = p.Client_().Call(ctx, "addRunPlan", &_args2, &_result4)
  p.SetLastResponseMeta_(_meta3)
  if _err != nil {
    return
  }
  if _ret5 := _result4.GetSuccess(); _ret5 != nil {
    return _ret5, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addRunPlan failed: unknown result")
}

// Parameters:
//  - Token
//  - PlanId
func (p *RunPlanManagementClient) RemoveRunPlan(ctx context.Context, token string, planId int32) (_r *Response, _err error) {
  var _args6 RunPlanManagementRemoveRunPlanArgs
  _args6.Token = token
  _args6.PlanId = planId
  var _result8 RunPlanManagementRemoveRunPlanResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "removeRunPlan", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  if _ret9 := _result8.GetSuccess(); _ret9 != nil {
    return _ret9, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "removeRunPlan failed: unknown result")
}

// Parameters:
//  - Token
//  - PlanId
//  - Runplan
func (p *RunPlanManagementClient) UpdateRunPlan(ctx context.Context, token string, planId int32, runplan *RunPlan) (_r *Response, _err error) {
  var _args10 RunPlanManagementUpdateRunPlanArgs
  _args10.Token = token
  _args10.PlanId = planId
  _args10.Runplan = runplan
  var _result12 RunPlanManagementUpdateRunPlanResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "updateRunPlan", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  if _ret13 := _result12.GetSuccess(); _ret13 != nil {
    return _ret13, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "updateRunPlan failed: unknown result")
}

// Parameters:
//  - Token
//  - PlanId
func (p *RunPlanManagementClient) GetRunPlan(ctx context.Context, token string, planId int32) (_r *Response, _err error) {
  var _args14 RunPlanManagementGetRunPlanArgs
  _args14.Token = token
  _args14.PlanId = planId
  var _result16 RunPlanManagementGetRunPlanResult
  var _meta15 thrift.ResponseMeta
  _meta15, _err = p.Client_().Call(ctx, "getRunPlan", &_args14, &_result16)
  p.SetLastResponseMeta_(_meta15)
  if _err != nil {
    return
  }
  if _ret17 := _result16.GetSuccess(); _ret17 != nil {
    return _ret17, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getRunPlan failed: unknown result")
}

// Parameters:
//  - Token
//  - SearchCriteria
//  - MaxNr
//  - OrderBy
func (p *RunPlanManagementClient) GetRunPlanList(ctx context.Context, token string, searchCriteria *SearchCriteria, maxNr int32, orderBy int32) (_r *Response, _err error) {
  var _args18 RunPlanManagementGetRunPlanListArgs
  _args18.Token = token
  _args18.SearchCriteria = searchCriteria
  _args18.MaxNr = maxNr
  _args18.OrderBy = orderBy
  var _result20 RunPlanManagementGetRunPlanListResult
  var _meta19 thrift.ResponseMeta
  _meta19, _err = p.Client_().Call(ctx, "getRunPlanList", &_args18, &_result20)
  p.SetLastResponseMeta_(_meta19)
  if _err != nil {
    return
  }
  if _ret21 := _result20.GetSuccess(); _ret21 != nil {
    return _ret21, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getRunPlanList failed: unknown result")
}

type RunPlanManagementProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RunPlanManagement
}

func (p *RunPlanManagementProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RunPlanManagementProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RunPlanManagementProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRunPlanManagementProcessor(handler RunPlanManagement) *RunPlanManagementProcessor {

  self22 := &RunPlanManagementProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self22.processorMap["addRunPlan"] = &runPlanManagementProcessorAddRunPlan{handler:handler}
  self22.processorMap["removeRunPlan"] = &runPlanManagementProcessorRemoveRunPlan{handler:handler}
  self22.processorMap["updateRunPlan"] = &runPlanManagementProcessorUpdateRunPlan{handler:handler}
  self22.processorMap["getRunPlan"] = &runPlanManagementProcessorGetRunPlan{handler:handler}
  self22.processorMap["getRunPlanList"] = &runPlanManagementProcessorGetRunPlanList{handler:handler}
return self22
}

func (p *RunPlanManagementProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x23 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x23.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x23

}

type runPlanManagementProcessorAddRunPlan struct {
  handler RunPlanManagement
}

func (p *runPlanManagementProcessorAddRunPlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunPlanManagementAddRunPlanArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addRunPlan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunPlanManagementAddRunPlanResult{}
  var retval *Response
  if retval, err2 = p.handler.AddRunPlan(ctx, args.Token, args.Runplan); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addRunPlan: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "addRunPlan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "addRunPlan", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runPlanManagementProcessorRemoveRunPlan struct {
  handler RunPlanManagement
}

func (p *runPlanManagementProcessorRemoveRunPlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunPlanManagementRemoveRunPlanArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeRunPlan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunPlanManagementRemoveRunPlanResult{}
  var retval *Response
  if retval, err2 = p.handler.RemoveRunPlan(ctx, args.Token, args.PlanId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeRunPlan: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeRunPlan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeRunPlan", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runPlanManagementProcessorUpdateRunPlan struct {
  handler RunPlanManagement
}

func (p *runPlanManagementProcessorUpdateRunPlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunPlanManagementUpdateRunPlanArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateRunPlan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunPlanManagementUpdateRunPlanResult{}
  var retval *Response
  if retval, err2 = p.handler.UpdateRunPlan(ctx, args.Token, args.PlanId, args.Runplan); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateRunPlan: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateRunPlan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateRunPlan", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runPlanManagementProcessorGetRunPlan struct {
  handler RunPlanManagement
}

func (p *runPlanManagementProcessorGetRunPlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunPlanManagementGetRunPlanArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunPlan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunPlanManagementGetRunPlanResult{}
  var retval *Response
  if retval, err2 = p.handler.GetRunPlan(ctx, args.Token, args.PlanId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRunPlan: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunPlan", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRunPlan", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runPlanManagementProcessorGetRunPlanList struct {
  handler RunPlanManagement
}

func (p *runPlanManagementProcessorGetRunPlanList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunPlanManagementGetRunPlanListArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunPlanList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunPlanManagementGetRunPlanListResult{}
  var retval *Response
  if retval, err2 = p.handler.GetRunPlanList(ctx, args.Token, args.SearchCriteria, args.MaxNr, args.OrderBy); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRunPlanList: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunPlanList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRunPlanList", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Token
//  - Runplan
type RunPlanManagementAddRunPlanArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Runplan *RunPlan `thrift:"runplan,2" db:"runplan" json:"runplan"`
}

func NewRunPlanManagementAddRunPlanArgs() *RunPlanManagementAddRunPlanArgs {
  return &RunPlanManagementAddRunPlanArgs{}
}


func (p *RunPlanManagementAddRunPlanArgs) GetToken() string {
  return p.Token
}
var RunPlanManagementAddRunPlanArgs_Runplan_DEFAULT *RunPlan
func (p *RunPlanManagementAddRunPlanArgs) GetRunplan() *RunPlan {
  if !p.IsSetRunplan() {
    return RunPlanManagementAddRunPlanArgs_Runplan_DEFAULT
  }
return p.Runplan
}
func (p *RunPlanManagementAddRunPlanArgs) IsSetRunplan() bool {
  return p.Runplan != nil
}

func (p *RunPlanManagementAddRunPlanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunPlanManagementAddRunPlanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunPlanManagementAddRunPlanArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Runplan = &RunPlan{}
  if err := p.Runplan.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Runplan), err)
  }
  return nil
}

func (p *RunPlanManagementAddRunPlanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addRunPlan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunPlanManagementAddRunPlanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunPlanManagementAddRunPlanArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runplan", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runplan: ", p), err) }
  if err := p.Runplan.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Runplan), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runplan: ", p), err) }
  return err
}

func (p *RunPlanManagementAddRunPlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunPlanManagementAddRunPlanArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunPlanManagementAddRunPlanResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunPlanManagementAddRunPlanResult() *RunPlanManagementAddRunPlanResult {
  return &RunPlanManagementAddRunPlanResult{}
}

var RunPlanManagementAddRunPlanResult_Success_DEFAULT *Response
func (p *RunPlanManagementAddRunPlanResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunPlanManagementAddRunPlanResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunPlanManagementAddRunPlanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunPlanManagementAddRunPlanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunPlanManagementAddRunPlanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunPlanManagementAddRunPlanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addRunPlan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunPlanManagementAddRunPlanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunPlanManagementAddRunPlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunPlanManagementAddRunPlanResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - PlanId
type RunPlanManagementRemoveRunPlanArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  PlanId int32 `thrift:"planId,2" db:"planId" json:"planId"`
}

func NewRunPlanManagementRemoveRunPlanArgs() *RunPlanManagementRemoveRunPlanArgs {
  return &RunPlanManagementRemoveRunPlanArgs{}
}


func (p *RunPlanManagementRemoveRunPlanArgs) GetToken() string {
  return p.Token
}

func (p *RunPlanManagementRemoveRunPlanArgs) GetPlanId() int32 {
  return p.PlanId
}
func (p *RunPlanManagementRemoveRunPlanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunPlanManagementRemoveRunPlanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunPlanManagementRemoveRunPlanArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PlanId = v
}
  return nil
}

func (p *RunPlanManagementRemoveRunPlanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeRunPlan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunPlanManagementRemoveRunPlanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunPlanManagementRemoveRunPlanArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "planId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:planId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PlanId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.planId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:planId: ", p), err) }
  return err
}

func (p *RunPlanManagementRemoveRunPlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunPlanManagementRemoveRunPlanArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunPlanManagementRemoveRunPlanResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunPlanManagementRemoveRunPlanResult() *RunPlanManagementRemoveRunPlanResult {
  return &RunPlanManagementRemoveRunPlanResult{}
}

var RunPlanManagementRemoveRunPlanResult_Success_DEFAULT *Response
func (p *RunPlanManagementRemoveRunPlanResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunPlanManagementRemoveRunPlanResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunPlanManagementRemoveRunPlanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunPlanManagementRemoveRunPlanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunPlanManagementRemoveRunPlanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunPlanManagementRemoveRunPlanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeRunPlan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunPlanManagementRemoveRunPlanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunPlanManagementRemoveRunPlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunPlanManagementRemoveRunPlanResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - PlanId
//  - Runplan
type RunPlanManagementUpdateRunPlanArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  PlanId int32 `thrift:"planId,2" db:"planId" json:"planId"`
  Runplan *RunPlan `thrift:"runplan,3" db:"runplan" json:"runplan"`
}

func NewRunPlanManagementUpdateRunPlanArgs() *RunPlanManagementUpdateRunPlanArgs {
  return &RunPlanManagementUpdateRunPlanArgs{}
}


func (p *RunPlanManagementUpdateRunPlanArgs) GetToken() string {
  return p.Token
}

func (p *RunPlanManagementUpdateRunPlanArgs) GetPlanId() int32 {
  return p.PlanId
}
var RunPlanManagementUpdateRunPlanArgs_Runplan_DEFAULT *RunPlan
func (p *RunPlanManagementUpdateRunPlanArgs) GetRunplan() *RunPlan {
  if !p.IsSetRunplan() {
    return RunPlanManagementUpdateRunPlanArgs_Runplan_DEFAULT
  }
return p.Runplan
}
func (p *RunPlanManagementUpdateRunPlanArgs) IsSetRunplan() bool {
  return p.Runplan != nil
}

func (p *RunPlanManagementUpdateRunPlanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunPlanManagementUpdateRunPlanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunPlanManagementUpdateRunPlanArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PlanId = v
}
  return nil
}

func (p *RunPlanManagementUpdateRunPlanArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Runplan = &RunPlan{}
  if err := p.Runplan.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Runplan), err)
  }
  return nil
}

func (p *RunPlanManagementUpdateRunPlanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateRunPlan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunPlanManagementUpdateRunPlanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunPlanManagementUpdateRunPlanArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "planId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:planId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PlanId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.planId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:planId: ", p), err) }
  return err
}

func (p *RunPlanManagementUpdateRunPlanArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runplan", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:runplan: ", p), err) }
  if err := p.Runplan.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Runplan), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:runplan: ", p), err) }
  return err
}

func (p *RunPlanManagementUpdateRunPlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunPlanManagementUpdateRunPlanArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunPlanManagementUpdateRunPlanResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunPlanManagementUpdateRunPlanResult() *RunPlanManagementUpdateRunPlanResult {
  return &RunPlanManagementUpdateRunPlanResult{}
}

var RunPlanManagementUpdateRunPlanResult_Success_DEFAULT *Response
func (p *RunPlanManagementUpdateRunPlanResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunPlanManagementUpdateRunPlanResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunPlanManagementUpdateRunPlanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunPlanManagementUpdateRunPlanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunPlanManagementUpdateRunPlanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunPlanManagementUpdateRunPlanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateRunPlan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunPlanManagementUpdateRunPlanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunPlanManagementUpdateRunPlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunPlanManagementUpdateRunPlanResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - PlanId
type RunPlanManagementGetRunPlanArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  PlanId int32 `thrift:"planId,2" db:"planId" json:"planId"`
}

func NewRunPlanManagementGetRunPlanArgs() *RunPlanManagementGetRunPlanArgs {
  return &RunPlanManagementGetRunPlanArgs{}
}


func (p *RunPlanManagementGetRunPlanArgs) GetToken() string {
  return p.Token
}

func (p *RunPlanManagementGetRunPlanArgs) GetPlanId() int32 {
  return p.PlanId
}
func (p *RunPlanManagementGetRunPlanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunPlanManagementGetRunPlanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunPlanManagementGetRunPlanArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PlanId = v
}
  return nil
}

func (p *RunPlanManagementGetRunPlanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunPlan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunPlanManagementGetRunPlanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunPlanManagementGetRunPlanArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "planId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:planId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.PlanId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.planId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:planId: ", p), err) }
  return err
}

func (p *RunPlanManagementGetRunPlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunPlanManagementGetRunPlanArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunPlanManagementGetRunPlanResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunPlanManagementGetRunPlanResult() *RunPlanManagementGetRunPlanResult {
  return &RunPlanManagementGetRunPlanResult{}
}

var RunPlanManagementGetRunPlanResult_Success_DEFAULT *Response
func (p *RunPlanManagementGetRunPlanResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunPlanManagementGetRunPlanResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunPlanManagementGetRunPlanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunPlanManagementGetRunPlanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunPlanManagementGetRunPlanResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunPlanManagementGetRunPlanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunPlan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunPlanManagementGetRunPlanResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunPlanManagementGetRunPlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunPlanManagementGetRunPlanResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - SearchCriteria
//  - MaxNr
//  - OrderBy
type RunPlanManagementGetRunPlanListArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  SearchCriteria *SearchCriteria `thrift:"searchCriteria,2" db:"searchCriteria" json:"searchCriteria"`
  MaxNr int32 `thrift:"maxNr,3" db:"maxNr" json:"maxNr"`
  OrderBy int32 `thrift:"orderBy,4" db:"orderBy" json:"orderBy"`
}

func NewRunPlanManagementGetRunPlanListArgs() *RunPlanManagementGetRunPlanListArgs {
  return &RunPlanManagementGetRunPlanListArgs{}
}


func (p *RunPlanManagementGetRunPlanListArgs) GetToken() string {
  return p.Token
}
var RunPlanManagementGetRunPlanListArgs_SearchCriteria_DEFAULT *SearchCriteria
func (p *RunPlanManagementGetRunPlanListArgs) GetSearchCriteria() *SearchCriteria {
  if !p.IsSetSearchCriteria() {
    return RunPlanManagementGetRunPlanListArgs_SearchCriteria_DEFAULT
  }
return p.SearchCriteria
}

func (p *RunPlanManagementGetRunPlanListArgs) GetMaxNr() int32 {
  return p.MaxNr
}

func (p *RunPlanManagementGetRunPlanListArgs) GetOrderBy() int32 {
  return p.OrderBy
}
func (p *RunPlanManagementGetRunPlanListArgs) IsSetSearchCriteria() bool {
  return p.SearchCriteria != nil
}

func (p *RunPlanManagementGetRunPlanListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunPlanManagementGetRunPlanListArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunPlanManagementGetRunPlanListArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SearchCriteria = &SearchCriteria{}
  if err := p.SearchCriteria.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SearchCriteria), err)
  }
  return nil
}

func (p *RunPlanManagementGetRunPlanListArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxNr = v
}
  return nil
}

func (p *RunPlanManagementGetRunPlanListArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OrderBy = v
}
  return nil
}

func (p *RunPlanManagementGetRunPlanListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunPlanList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunPlanManagementGetRunPlanListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunPlanManagementGetRunPlanListArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchCriteria", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchCriteria: ", p), err) }
  if err := p.SearchCriteria.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SearchCriteria), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchCriteria: ", p), err) }
  return err
}

func (p *RunPlanManagementGetRunPlanListArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxNr", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxNr: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxNr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxNr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxNr: ", p), err) }
  return err
}

func (p *RunPlanManagementGetRunPlanListArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "orderBy", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:orderBy: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OrderBy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderBy (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:orderBy: ", p), err) }
  return err
}

func (p *RunPlanManagementGetRunPlanListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunPlanManagementGetRunPlanListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunPlanManagementGetRunPlanListResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunPlanManagementGetRunPlanListResult() *RunPlanManagementGetRunPlanListResult {
  return &RunPlanManagementGetRunPlanListResult{}
}

var RunPlanManagementGetRunPlanListResult_Success_DEFAULT *Response
func (p *RunPlanManagementGetRunPlanListResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunPlanManagementGetRunPlanListResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunPlanManagementGetRunPlanListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunPlanManagementGetRunPlanListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunPlanManagementGetRunPlanListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunPlanManagementGetRunPlanListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunPlanList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunPlanManagementGetRunPlanListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunPlanManagementGetRunPlanListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunPlanManagementGetRunPlanListResult(%+v)", *p)
}


