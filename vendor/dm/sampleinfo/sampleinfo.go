// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package sampleinfo

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// Attributes:
//  - SampleID
//  - Description
//  - Index1ID
//  - Index1
//  - Index2ID
//  - Index2
//  - Read1IndexID
//  - Read1Index
//  - RefGenome
type SingleSampleInfo struct {
  SampleID string `thrift:"sampleID,1,required" db:"sampleID" json:"sampleID"`
  Description string `thrift:"description,2" db:"description" json:"description"`
  Index1ID string `thrift:"index1ID,3" db:"index1ID" json:"index1ID"`
  Index1 string `thrift:"index1,4" db:"index1" json:"index1"`
  Index2ID string `thrift:"index2ID,5" db:"index2ID" json:"index2ID"`
  Index2 string `thrift:"index2,6" db:"index2" json:"index2"`
  Read1IndexID string `thrift:"read1IndexID,7" db:"read1IndexID" json:"read1IndexID"`
  Read1Index string `thrift:"read1Index,8" db:"read1Index" json:"read1Index"`
  RefGenome string `thrift:"refGenome,9" db:"refGenome" json:"refGenome"`
}

func NewSingleSampleInfo() *SingleSampleInfo {
  return &SingleSampleInfo{}
}


func (p *SingleSampleInfo) GetSampleID() string {
  return p.SampleID
}

func (p *SingleSampleInfo) GetDescription() string {
  return p.Description
}

func (p *SingleSampleInfo) GetIndex1ID() string {
  return p.Index1ID
}

func (p *SingleSampleInfo) GetIndex1() string {
  return p.Index1
}

func (p *SingleSampleInfo) GetIndex2ID() string {
  return p.Index2ID
}

func (p *SingleSampleInfo) GetIndex2() string {
  return p.Index2
}

func (p *SingleSampleInfo) GetRead1IndexID() string {
  return p.Read1IndexID
}

func (p *SingleSampleInfo) GetRead1Index() string {
  return p.Read1Index
}

func (p *SingleSampleInfo) GetRefGenome() string {
  return p.RefGenome
}
func (p *SingleSampleInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSampleID bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetSampleID = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSampleID{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SampleID is not set"));
  }
  return nil
}

func (p *SingleSampleInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SampleID = v
}
  return nil
}

func (p *SingleSampleInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *SingleSampleInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Index1ID = v
}
  return nil
}

func (p *SingleSampleInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Index1 = v
}
  return nil
}

func (p *SingleSampleInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Index2ID = v
}
  return nil
}

func (p *SingleSampleInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Index2 = v
}
  return nil
}

func (p *SingleSampleInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Read1IndexID = v
}
  return nil
}

func (p *SingleSampleInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Read1Index = v
}
  return nil
}

func (p *SingleSampleInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.RefGenome = v
}
  return nil
}

func (p *SingleSampleInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SingleSampleInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SingleSampleInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sampleID", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sampleID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SampleID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sampleID (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sampleID: ", p), err) }
  return err
}

func (p *SingleSampleInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "description", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:description: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:description: ", p), err) }
  return err
}

func (p *SingleSampleInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index1ID", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:index1ID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Index1ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index1ID (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:index1ID: ", p), err) }
  return err
}

func (p *SingleSampleInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index1", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:index1: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Index1)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index1 (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:index1: ", p), err) }
  return err
}

func (p *SingleSampleInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index2ID", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:index2ID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Index2ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index2ID (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:index2ID: ", p), err) }
  return err
}

func (p *SingleSampleInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "index2", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:index2: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Index2)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index2 (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:index2: ", p), err) }
  return err
}

func (p *SingleSampleInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "read1IndexID", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:read1IndexID: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Read1IndexID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.read1IndexID (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:read1IndexID: ", p), err) }
  return err
}

func (p *SingleSampleInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "read1Index", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:read1Index: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Read1Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.read1Index (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:read1Index: ", p), err) }
  return err
}

func (p *SingleSampleInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refGenome", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:refGenome: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefGenome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refGenome (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:refGenome: ", p), err) }
  return err
}

func (p *SingleSampleInfo) Equals(other *SingleSampleInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SampleID != other.SampleID { return false }
  if p.Description != other.Description { return false }
  if p.Index1ID != other.Index1ID { return false }
  if p.Index1 != other.Index1 { return false }
  if p.Index2ID != other.Index2ID { return false }
  if p.Index2 != other.Index2 { return false }
  if p.Read1IndexID != other.Read1IndexID { return false }
  if p.Read1Index != other.Read1Index { return false }
  if p.RefGenome != other.RefGenome { return false }
  return true
}

func (p *SingleSampleInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SingleSampleInfo(%+v)", *p)
}

// Attributes:
//  - Name
//  - LibPrepMethod
//  - Samples
//  - ID
//  - CreatorId
//  - Did
//  - CreatorName
//  - CreateTime
//  - LastUpdateTime
//  - LibPrepMethodKey
//  - Index1LengthKey
//  - Index1Length
//  - Index2LengthKey
//  - Index2Length
type SampleInfo struct {
  Name string `thrift:"name,1,required" db:"name" json:"name"`
  LibPrepMethod *string `thrift:"libPrepMethod,2" db:"libPrepMethod" json:"libPrepMethod,omitempty"`
  Samples []*SingleSampleInfo `thrift:"samples,3" db:"samples" json:"samples"`
  ID *int32 `thrift:"id,4" db:"id" json:"id,omitempty"`
  CreatorId int32 `thrift:"creatorId,5,required" db:"creatorId" json:"creatorId"`
  Did *int32 `thrift:"did,6" db:"did" json:"did,omitempty"`
  CreatorName *string `thrift:"creatorName,7" db:"creatorName" json:"creatorName,omitempty"`
  CreateTime *int64 `thrift:"createTime,8" db:"createTime" json:"createTime,omitempty"`
  LastUpdateTime *int64 `thrift:"lastUpdateTime,9" db:"lastUpdateTime" json:"lastUpdateTime,omitempty"`
  LibPrepMethodKey *int32 `thrift:"libPrepMethodKey,10" db:"libPrepMethodKey" json:"libPrepMethodKey,omitempty"`
  Index1LengthKey *int32 `thrift:"index1LengthKey,11" db:"index1LengthKey" json:"index1LengthKey,omitempty"`
  Index1Length *int32 `thrift:"index1Length,12" db:"index1Length" json:"index1Length,omitempty"`
  Index2LengthKey *int32 `thrift:"index2LengthKey,13" db:"index2LengthKey" json:"index2LengthKey,omitempty"`
  Index2Length *int32 `thrift:"index2Length,14" db:"index2Length" json:"index2Length,omitempty"`
}

func NewSampleInfo() *SampleInfo {
  return &SampleInfo{}
}


func (p *SampleInfo) GetName() string {
  return p.Name
}
var SampleInfo_LibPrepMethod_DEFAULT string
func (p *SampleInfo) GetLibPrepMethod() string {
  if !p.IsSetLibPrepMethod() {
    return SampleInfo_LibPrepMethod_DEFAULT
  }
return *p.LibPrepMethod
}

func (p *SampleInfo) GetSamples() []*SingleSampleInfo {
  return p.Samples
}
var SampleInfo_ID_DEFAULT int32
func (p *SampleInfo) GetID() int32 {
  if !p.IsSetID() {
    return SampleInfo_ID_DEFAULT
  }
return *p.ID
}

func (p *SampleInfo) GetCreatorId() int32 {
  return p.CreatorId
}
var SampleInfo_Did_DEFAULT int32
func (p *SampleInfo) GetDid() int32 {
  if !p.IsSetDid() {
    return SampleInfo_Did_DEFAULT
  }
return *p.Did
}
var SampleInfo_CreatorName_DEFAULT string
func (p *SampleInfo) GetCreatorName() string {
  if !p.IsSetCreatorName() {
    return SampleInfo_CreatorName_DEFAULT
  }
return *p.CreatorName
}
var SampleInfo_CreateTime_DEFAULT int64
func (p *SampleInfo) GetCreateTime() int64 {
  if !p.IsSetCreateTime() {
    return SampleInfo_CreateTime_DEFAULT
  }
return *p.CreateTime
}
var SampleInfo_LastUpdateTime_DEFAULT int64
func (p *SampleInfo) GetLastUpdateTime() int64 {
  if !p.IsSetLastUpdateTime() {
    return SampleInfo_LastUpdateTime_DEFAULT
  }
return *p.LastUpdateTime
}
var SampleInfo_LibPrepMethodKey_DEFAULT int32
func (p *SampleInfo) GetLibPrepMethodKey() int32 {
  if !p.IsSetLibPrepMethodKey() {
    return SampleInfo_LibPrepMethodKey_DEFAULT
  }
return *p.LibPrepMethodKey
}
var SampleInfo_Index1LengthKey_DEFAULT int32
func (p *SampleInfo) GetIndex1LengthKey() int32 {
  if !p.IsSetIndex1LengthKey() {
    return SampleInfo_Index1LengthKey_DEFAULT
  }
return *p.Index1LengthKey
}
var SampleInfo_Index1Length_DEFAULT int32
func (p *SampleInfo) GetIndex1Length() int32 {
  if !p.IsSetIndex1Length() {
    return SampleInfo_Index1Length_DEFAULT
  }
return *p.Index1Length
}
var SampleInfo_Index2LengthKey_DEFAULT int32
func (p *SampleInfo) GetIndex2LengthKey() int32 {
  if !p.IsSetIndex2LengthKey() {
    return SampleInfo_Index2LengthKey_DEFAULT
  }
return *p.Index2LengthKey
}
var SampleInfo_Index2Length_DEFAULT int32
func (p *SampleInfo) GetIndex2Length() int32 {
  if !p.IsSetIndex2Length() {
    return SampleInfo_Index2Length_DEFAULT
  }
return *p.Index2Length
}
func (p *SampleInfo) IsSetLibPrepMethod() bool {
  return p.LibPrepMethod != nil
}

func (p *SampleInfo) IsSetID() bool {
  return p.ID != nil
}

func (p *SampleInfo) IsSetDid() bool {
  return p.Did != nil
}

func (p *SampleInfo) IsSetCreatorName() bool {
  return p.CreatorName != nil
}

func (p *SampleInfo) IsSetCreateTime() bool {
  return p.CreateTime != nil
}

func (p *SampleInfo) IsSetLastUpdateTime() bool {
  return p.LastUpdateTime != nil
}

func (p *SampleInfo) IsSetLibPrepMethodKey() bool {
  return p.LibPrepMethodKey != nil
}

func (p *SampleInfo) IsSetIndex1LengthKey() bool {
  return p.Index1LengthKey != nil
}

func (p *SampleInfo) IsSetIndex1Length() bool {
  return p.Index1Length != nil
}

func (p *SampleInfo) IsSetIndex2LengthKey() bool {
  return p.Index2LengthKey != nil
}

func (p *SampleInfo) IsSetIndex2Length() bool {
  return p.Index2Length != nil
}

func (p *SampleInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetName bool = false;
  var issetCreatorId bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetName = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
        issetCreatorId = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Name is not set"));
  }
  if !issetCreatorId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CreatorId is not set"));
  }
  return nil
}

func (p *SampleInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *SampleInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.LibPrepMethod = &v
}
  return nil
}

func (p *SampleInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SingleSampleInfo, 0, size)
  p.Samples =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &SingleSampleInfo{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Samples = append(p.Samples, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SampleInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ID = &v
}
  return nil
}

func (p *SampleInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CreatorId = v
}
  return nil
}

func (p *SampleInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Did = &v
}
  return nil
}

func (p *SampleInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.CreatorName = &v
}
  return nil
}

func (p *SampleInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.CreateTime = &v
}
  return nil
}

func (p *SampleInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.LastUpdateTime = &v
}
  return nil
}

func (p *SampleInfo)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.LibPrepMethodKey = &v
}
  return nil
}

func (p *SampleInfo)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Index1LengthKey = &v
}
  return nil
}

func (p *SampleInfo)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Index1Length = &v
}
  return nil
}

func (p *SampleInfo)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Index2LengthKey = &v
}
  return nil
}

func (p *SampleInfo)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Index2Length = &v
}
  return nil
}

func (p *SampleInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SampleInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SampleInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *SampleInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLibPrepMethod() {
    if err := oprot.WriteFieldBegin(ctx, "libPrepMethod", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:libPrepMethod: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LibPrepMethod)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.libPrepMethod (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:libPrepMethod: ", p), err) }
  }
  return err
}

func (p *SampleInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "samples", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:samples: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Samples)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Samples {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:samples: ", p), err) }
  return err
}

func (p *SampleInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetID() {
    if err := oprot.WriteFieldBegin(ctx, "id", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  }
  return err
}

func (p *SampleInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "creatorId", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:creatorId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.CreatorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.creatorId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:creatorId: ", p), err) }
  return err
}

func (p *SampleInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDid() {
    if err := oprot.WriteFieldBegin(ctx, "did", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:did: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Did)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.did (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:did: ", p), err) }
  }
  return err
}

func (p *SampleInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatorName() {
    if err := oprot.WriteFieldBegin(ctx, "creatorName", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:creatorName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.CreatorName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creatorName (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:creatorName: ", p), err) }
  }
  return err
}

func (p *SampleInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreateTime() {
    if err := oprot.WriteFieldBegin(ctx, "createTime", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:createTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.CreateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.createTime (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:createTime: ", p), err) }
  }
  return err
}

func (p *SampleInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLastUpdateTime() {
    if err := oprot.WriteFieldBegin(ctx, "lastUpdateTime", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:lastUpdateTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.LastUpdateTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastUpdateTime (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:lastUpdateTime: ", p), err) }
  }
  return err
}

func (p *SampleInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLibPrepMethodKey() {
    if err := oprot.WriteFieldBegin(ctx, "libPrepMethodKey", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:libPrepMethodKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.LibPrepMethodKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.libPrepMethodKey (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:libPrepMethodKey: ", p), err) }
  }
  return err
}

func (p *SampleInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex1LengthKey() {
    if err := oprot.WriteFieldBegin(ctx, "index1LengthKey", thrift.I32, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:index1LengthKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Index1LengthKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index1LengthKey (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:index1LengthKey: ", p), err) }
  }
  return err
}

func (p *SampleInfo) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex1Length() {
    if err := oprot.WriteFieldBegin(ctx, "index1Length", thrift.I32, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:index1Length: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Index1Length)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index1Length (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:index1Length: ", p), err) }
  }
  return err
}

func (p *SampleInfo) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex2LengthKey() {
    if err := oprot.WriteFieldBegin(ctx, "index2LengthKey", thrift.I32, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:index2LengthKey: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Index2LengthKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index2LengthKey (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:index2LengthKey: ", p), err) }
  }
  return err
}

func (p *SampleInfo) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex2Length() {
    if err := oprot.WriteFieldBegin(ctx, "index2Length", thrift.I32, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:index2Length: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Index2Length)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index2Length (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:index2Length: ", p), err) }
  }
  return err
}

func (p *SampleInfo) Equals(other *SampleInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.LibPrepMethod != other.LibPrepMethod {
    if p.LibPrepMethod == nil || other.LibPrepMethod == nil {
      return false
    }
    if (*p.LibPrepMethod) != (*other.LibPrepMethod) { return false }
  }
  if len(p.Samples) != len(other.Samples) { return false }
  for i, _tgt := range p.Samples {
    _src1 := other.Samples[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if p.ID != other.ID {
    if p.ID == nil || other.ID == nil {
      return false
    }
    if (*p.ID) != (*other.ID) { return false }
  }
  if p.CreatorId != other.CreatorId { return false }
  if p.Did != other.Did {
    if p.Did == nil || other.Did == nil {
      return false
    }
    if (*p.Did) != (*other.Did) { return false }
  }
  if p.CreatorName != other.CreatorName {
    if p.CreatorName == nil || other.CreatorName == nil {
      return false
    }
    if (*p.CreatorName) != (*other.CreatorName) { return false }
  }
  if p.CreateTime != other.CreateTime {
    if p.CreateTime == nil || other.CreateTime == nil {
      return false
    }
    if (*p.CreateTime) != (*other.CreateTime) { return false }
  }
  if p.LastUpdateTime != other.LastUpdateTime {
    if p.LastUpdateTime == nil || other.LastUpdateTime == nil {
      return false
    }
    if (*p.LastUpdateTime) != (*other.LastUpdateTime) { return false }
  }
  if p.LibPrepMethodKey != other.LibPrepMethodKey {
    if p.LibPrepMethodKey == nil || other.LibPrepMethodKey == nil {
      return false
    }
    if (*p.LibPrepMethodKey) != (*other.LibPrepMethodKey) { return false }
  }
  if p.Index1LengthKey != other.Index1LengthKey {
    if p.Index1LengthKey == nil || other.Index1LengthKey == nil {
      return false
    }
    if (*p.Index1LengthKey) != (*other.Index1LengthKey) { return false }
  }
  if p.Index1Length != other.Index1Length {
    if p.Index1Length == nil || other.Index1Length == nil {
      return false
    }
    if (*p.Index1Length) != (*other.Index1Length) { return false }
  }
  if p.Index2LengthKey != other.Index2LengthKey {
    if p.Index2LengthKey == nil || other.Index2LengthKey == nil {
      return false
    }
    if (*p.Index2LengthKey) != (*other.Index2LengthKey) { return false }
  }
  if p.Index2Length != other.Index2Length {
    if p.Index2Length == nil || other.Index2Length == nil {
      return false
    }
    if (*p.Index2Length) != (*other.Index2Length) { return false }
  }
  return true
}

func (p *SampleInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SampleInfo(%+v)", *p)
}

// Attributes:
//  - SampleId
//  - SampleInfoList
//  - SampleInfo
//  - SampleTotalCount
//  - CurrentPage
type ReturnData struct {
  SampleId *int32 `thrift:"sampleId,1" db:"sampleId" json:"sampleId,omitempty"`
  SampleInfoList []*SampleInfo `thrift:"sampleInfoList,2" db:"sampleInfoList" json:"sampleInfoList,omitempty"`
  SampleInfo *SampleInfo `thrift:"sampleInfo,3" db:"sampleInfo" json:"sampleInfo,omitempty"`
  SampleTotalCount *int32 `thrift:"sampleTotalCount,4" db:"sampleTotalCount" json:"sampleTotalCount,omitempty"`
  CurrentPage *int32 `thrift:"currentPage,5" db:"currentPage" json:"currentPage,omitempty"`
}

func NewReturnData() *ReturnData {
  return &ReturnData{}
}

var ReturnData_SampleId_DEFAULT int32
func (p *ReturnData) GetSampleId() int32 {
  if !p.IsSetSampleId() {
    return ReturnData_SampleId_DEFAULT
  }
return *p.SampleId
}
var ReturnData_SampleInfoList_DEFAULT []*SampleInfo

func (p *ReturnData) GetSampleInfoList() []*SampleInfo {
  return p.SampleInfoList
}
var ReturnData_SampleInfo_DEFAULT *SampleInfo
func (p *ReturnData) GetSampleInfo() *SampleInfo {
  if !p.IsSetSampleInfo() {
    return ReturnData_SampleInfo_DEFAULT
  }
return p.SampleInfo
}
var ReturnData_SampleTotalCount_DEFAULT int32
func (p *ReturnData) GetSampleTotalCount() int32 {
  if !p.IsSetSampleTotalCount() {
    return ReturnData_SampleTotalCount_DEFAULT
  }
return *p.SampleTotalCount
}
var ReturnData_CurrentPage_DEFAULT int32
func (p *ReturnData) GetCurrentPage() int32 {
  if !p.IsSetCurrentPage() {
    return ReturnData_CurrentPage_DEFAULT
  }
return *p.CurrentPage
}
func (p *ReturnData) IsSetSampleId() bool {
  return p.SampleId != nil
}

func (p *ReturnData) IsSetSampleInfoList() bool {
  return p.SampleInfoList != nil
}

func (p *ReturnData) IsSetSampleInfo() bool {
  return p.SampleInfo != nil
}

func (p *ReturnData) IsSetSampleTotalCount() bool {
  return p.SampleTotalCount != nil
}

func (p *ReturnData) IsSetCurrentPage() bool {
  return p.CurrentPage != nil
}

func (p *ReturnData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReturnData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SampleId = &v
}
  return nil
}

func (p *ReturnData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*SampleInfo, 0, size)
  p.SampleInfoList =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &SampleInfo{}
    if err := _elem2.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.SampleInfoList = append(p.SampleInfoList, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReturnData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.SampleInfo = &SampleInfo{}
  if err := p.SampleInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SampleInfo), err)
  }
  return nil
}

func (p *ReturnData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SampleTotalCount = &v
}
  return nil
}

func (p *ReturnData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CurrentPage = &v
}
  return nil
}

func (p *ReturnData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReturnData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReturnData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampleId() {
    if err := oprot.WriteFieldBegin(ctx, "sampleId", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:sampleId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.SampleId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sampleId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:sampleId: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampleInfoList() {
    if err := oprot.WriteFieldBegin(ctx, "sampleInfoList", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sampleInfoList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.SampleInfoList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SampleInfoList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sampleInfoList: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampleInfo() {
    if err := oprot.WriteFieldBegin(ctx, "sampleInfo", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sampleInfo: ", p), err) }
    if err := p.SampleInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SampleInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sampleInfo: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampleTotalCount() {
    if err := oprot.WriteFieldBegin(ctx, "sampleTotalCount", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:sampleTotalCount: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.SampleTotalCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sampleTotalCount (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:sampleTotalCount: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCurrentPage() {
    if err := oprot.WriteFieldBegin(ctx, "currentPage", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:currentPage: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.CurrentPage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.currentPage (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:currentPage: ", p), err) }
  }
  return err
}

func (p *ReturnData) Equals(other *ReturnData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SampleId != other.SampleId {
    if p.SampleId == nil || other.SampleId == nil {
      return false
    }
    if (*p.SampleId) != (*other.SampleId) { return false }
  }
  if len(p.SampleInfoList) != len(other.SampleInfoList) { return false }
  for i, _tgt := range p.SampleInfoList {
    _src3 := other.SampleInfoList[i]
    if !_tgt.Equals(_src3) { return false }
  }
  if !p.SampleInfo.Equals(other.SampleInfo) { return false }
  if p.SampleTotalCount != other.SampleTotalCount {
    if p.SampleTotalCount == nil || other.SampleTotalCount == nil {
      return false
    }
    if (*p.SampleTotalCount) != (*other.SampleTotalCount) { return false }
  }
  if p.CurrentPage != other.CurrentPage {
    if p.CurrentPage == nil || other.CurrentPage == nil {
      return false
    }
    if (*p.CurrentPage) != (*other.CurrentPage) { return false }
  }
  return true
}

func (p *ReturnData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReturnData(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Message
//  - Data
type Response struct {
  ErrorCode int32 `thrift:"errorCode,1,required" db:"errorCode" json:"errorCode"`
  Message *string `thrift:"message,2" db:"message" json:"message,omitempty"`
  Data *ReturnData `thrift:"data,3" db:"data" json:"data,omitempty"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetErrorCode() int32 {
  return p.ErrorCode
}
var Response_Message_DEFAULT string
func (p *Response) GetMessage() string {
  if !p.IsSetMessage() {
    return Response_Message_DEFAULT
  }
return *p.Message
}
var Response_Data_DEFAULT *ReturnData
func (p *Response) GetData() *ReturnData {
  if !p.IsSetData() {
    return Response_Data_DEFAULT
  }
return p.Data
}
func (p *Response) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Response) IsSetData() bool {
  return p.Data != nil
}

func (p *Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *Response)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorCode = v
}
  return nil
}

func (p *Response)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *Response)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &ReturnData{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *Response) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  }
  return err
}

func (p *Response) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := p.Data.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *Response) Equals(other *Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if p.Message != other.Message {
    if p.Message == nil || other.Message == nil {
      return false
    }
    if (*p.Message) != (*other.Message) { return false }
  }
  if !p.Data.Equals(other.Data) { return false }
  return true
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

// Attributes:
//  - TimeFrom
//  - TimeTo
//  - PageNum
//  - PageSize
//  - SampleName
//  - CreatorName
//  - LibPrepMethod
//  - Index1Length
//  - Index2Length
type SearchCriteria struct {
  TimeFrom *int64 `thrift:"timeFrom,1" db:"timeFrom" json:"timeFrom,omitempty"`
  TimeTo *int64 `thrift:"timeTo,2" db:"timeTo" json:"timeTo,omitempty"`
  PageNum *int32 `thrift:"pageNum,3" db:"pageNum" json:"pageNum,omitempty"`
  PageSize *int32 `thrift:"pageSize,4" db:"pageSize" json:"pageSize,omitempty"`
  SampleName *string `thrift:"sampleName,5" db:"sampleName" json:"sampleName,omitempty"`
  CreatorName *string `thrift:"creatorName,6" db:"creatorName" json:"creatorName,omitempty"`
  LibPrepMethod *string `thrift:"libPrepMethod,7" db:"libPrepMethod" json:"libPrepMethod,omitempty"`
  Index1Length *int32 `thrift:"index1Length,8" db:"index1Length" json:"index1Length,omitempty"`
  Index2Length *int32 `thrift:"index2Length,9" db:"index2Length" json:"index2Length,omitempty"`
}

func NewSearchCriteria() *SearchCriteria {
  return &SearchCriteria{}
}

var SearchCriteria_TimeFrom_DEFAULT int64
func (p *SearchCriteria) GetTimeFrom() int64 {
  if !p.IsSetTimeFrom() {
    return SearchCriteria_TimeFrom_DEFAULT
  }
return *p.TimeFrom
}
var SearchCriteria_TimeTo_DEFAULT int64
func (p *SearchCriteria) GetTimeTo() int64 {
  if !p.IsSetTimeTo() {
    return SearchCriteria_TimeTo_DEFAULT
  }
return *p.TimeTo
}
var SearchCriteria_PageNum_DEFAULT int32
func (p *SearchCriteria) GetPageNum() int32 {
  if !p.IsSetPageNum() {
    return SearchCriteria_PageNum_DEFAULT
  }
return *p.PageNum
}
var SearchCriteria_PageSize_DEFAULT int32
func (p *SearchCriteria) GetPageSize() int32 {
  if !p.IsSetPageSize() {
    return SearchCriteria_PageSize_DEFAULT
  }
return *p.PageSize
}
var SearchCriteria_SampleName_DEFAULT string
func (p *SearchCriteria) GetSampleName() string {
  if !p.IsSetSampleName() {
    return SearchCriteria_SampleName_DEFAULT
  }
return *p.SampleName
}
var SearchCriteria_CreatorName_DEFAULT string
func (p *SearchCriteria) GetCreatorName() string {
  if !p.IsSetCreatorName() {
    return SearchCriteria_CreatorName_DEFAULT
  }
return *p.CreatorName
}
var SearchCriteria_LibPrepMethod_DEFAULT string
func (p *SearchCriteria) GetLibPrepMethod() string {
  if !p.IsSetLibPrepMethod() {
    return SearchCriteria_LibPrepMethod_DEFAULT
  }
return *p.LibPrepMethod
}
var SearchCriteria_Index1Length_DEFAULT int32
func (p *SearchCriteria) GetIndex1Length() int32 {
  if !p.IsSetIndex1Length() {
    return SearchCriteria_Index1Length_DEFAULT
  }
return *p.Index1Length
}
var SearchCriteria_Index2Length_DEFAULT int32
func (p *SearchCriteria) GetIndex2Length() int32 {
  if !p.IsSetIndex2Length() {
    return SearchCriteria_Index2Length_DEFAULT
  }
return *p.Index2Length
}
func (p *SearchCriteria) IsSetTimeFrom() bool {
  return p.TimeFrom != nil
}

func (p *SearchCriteria) IsSetTimeTo() bool {
  return p.TimeTo != nil
}

func (p *SearchCriteria) IsSetPageNum() bool {
  return p.PageNum != nil
}

func (p *SearchCriteria) IsSetPageSize() bool {
  return p.PageSize != nil
}

func (p *SearchCriteria) IsSetSampleName() bool {
  return p.SampleName != nil
}

func (p *SearchCriteria) IsSetCreatorName() bool {
  return p.CreatorName != nil
}

func (p *SearchCriteria) IsSetLibPrepMethod() bool {
  return p.LibPrepMethod != nil
}

func (p *SearchCriteria) IsSetIndex1Length() bool {
  return p.Index1Length != nil
}

func (p *SearchCriteria) IsSetIndex2Length() bool {
  return p.Index2Length != nil
}

func (p *SearchCriteria) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchCriteria)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TimeFrom = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeTo = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PageNum = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.PageSize = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SampleName = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.CreatorName = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LibPrepMethod = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Index1Length = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Index2Length = &v
}
  return nil
}

func (p *SearchCriteria) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SearchCriteria"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchCriteria) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeFrom() {
    if err := oprot.WriteFieldBegin(ctx, "timeFrom", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timeFrom: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TimeFrom)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeFrom (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timeFrom: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeTo() {
    if err := oprot.WriteFieldBegin(ctx, "timeTo", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeTo: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TimeTo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeTo (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeTo: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageNum() {
    if err := oprot.WriteFieldBegin(ctx, "pageNum", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pageNum: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageNum (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pageNum: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageSize() {
    if err := oprot.WriteFieldBegin(ctx, "pageSize", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pageSize: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageSize (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pageSize: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampleName() {
    if err := oprot.WriteFieldBegin(ctx, "sampleName", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:sampleName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.SampleName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sampleName (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:sampleName: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCreatorName() {
    if err := oprot.WriteFieldBegin(ctx, "creatorName", thrift.STRING, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:creatorName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.CreatorName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.creatorName (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:creatorName: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLibPrepMethod() {
    if err := oprot.WriteFieldBegin(ctx, "libPrepMethod", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:libPrepMethod: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.LibPrepMethod)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.libPrepMethod (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:libPrepMethod: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex1Length() {
    if err := oprot.WriteFieldBegin(ctx, "index1Length", thrift.I32, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:index1Length: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Index1Length)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index1Length (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:index1Length: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIndex2Length() {
    if err := oprot.WriteFieldBegin(ctx, "index2Length", thrift.I32, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:index2Length: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Index2Length)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.index2Length (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:index2Length: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) Equals(other *SearchCriteria) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TimeFrom != other.TimeFrom {
    if p.TimeFrom == nil || other.TimeFrom == nil {
      return false
    }
    if (*p.TimeFrom) != (*other.TimeFrom) { return false }
  }
  if p.TimeTo != other.TimeTo {
    if p.TimeTo == nil || other.TimeTo == nil {
      return false
    }
    if (*p.TimeTo) != (*other.TimeTo) { return false }
  }
  if p.PageNum != other.PageNum {
    if p.PageNum == nil || other.PageNum == nil {
      return false
    }
    if (*p.PageNum) != (*other.PageNum) { return false }
  }
  if p.PageSize != other.PageSize {
    if p.PageSize == nil || other.PageSize == nil {
      return false
    }
    if (*p.PageSize) != (*other.PageSize) { return false }
  }
  if p.SampleName != other.SampleName {
    if p.SampleName == nil || other.SampleName == nil {
      return false
    }
    if (*p.SampleName) != (*other.SampleName) { return false }
  }
  if p.CreatorName != other.CreatorName {
    if p.CreatorName == nil || other.CreatorName == nil {
      return false
    }
    if (*p.CreatorName) != (*other.CreatorName) { return false }
  }
  if p.LibPrepMethod != other.LibPrepMethod {
    if p.LibPrepMethod == nil || other.LibPrepMethod == nil {
      return false
    }
    if (*p.LibPrepMethod) != (*other.LibPrepMethod) { return false }
  }
  if p.Index1Length != other.Index1Length {
    if p.Index1Length == nil || other.Index1Length == nil {
      return false
    }
    if (*p.Index1Length) != (*other.Index1Length) { return false }
  }
  if p.Index2Length != other.Index2Length {
    if p.Index2Length == nil || other.Index2Length == nil {
      return false
    }
    if (*p.Index2Length) != (*other.Index2Length) { return false }
  }
  return true
}

func (p *SearchCriteria) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchCriteria(%+v)", *p)
}

type SampleManagement interface {
  // Parameters:
  //  - Token
  //  - SampleInfo
  AddSampleInfo(ctx context.Context, token string, sampleInfo *SampleInfo) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - SampleId
  RemoveSampleInfo(ctx context.Context, token string, sampleId int32) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - SampleId
  //  - SampleInfo
  UpdateSampleInfo(ctx context.Context, token string, sampleId int32, sampleInfo *SampleInfo) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - SampleId
  GetSampleInfo(ctx context.Context, token string, sampleId int32) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - SearchCriteria
  //  - MaxNr
  //  - OrderBy
  GetSampleInfoList(ctx context.Context, token string, searchCriteria *SearchCriteria, maxNr int32, orderBy int32) (_r *Response, _err error)
}

type SampleManagementClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewSampleManagementClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SampleManagementClient {
  return &SampleManagementClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSampleManagementClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SampleManagementClient {
  return &SampleManagementClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSampleManagementClient(c thrift.TClient) *SampleManagementClient {
  return &SampleManagementClient{
    c: c,
  }
}

func (p *SampleManagementClient) Client_() thrift.TClient {
  return p.c
}

func (p *SampleManagementClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *SampleManagementClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Token
//  - SampleInfo
func (p *SampleManagementClient) AddSampleInfo(ctx context.Context, token string, sampleInfo *SampleInfo) (_r *Response, _err error) {
  var _args4 SampleManagementAddSampleInfoArgs
  _args4.Token = token
  _args4.SampleInfo = sampleInfo
  var _result6 SampleManagementAddSampleInfoResult
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "addSampleInfo", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  if _ret7 := _result6.GetSuccess(); _ret7 != nil {
    return _ret7, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addSampleInfo failed: unknown result")
}

// Parameters:
//  - Token
//  - SampleId
func (p *SampleManagementClient) RemoveSampleInfo(ctx context.Context, token string, sampleId int32) (_r *Response, _err error) {
  var _args8 SampleManagementRemoveSampleInfoArgs
  _args8.Token = token
  _args8.SampleId = sampleId
  var _result10 SampleManagementRemoveSampleInfoResult
  var _meta9 thrift.ResponseMeta
  _meta9, _err = p.Client_().Call(ctx, "removeSampleInfo", &_args8, &_result10)
  p.SetLastResponseMeta_(_meta9)
  if _err != nil {
    return
  }
  if _ret11 := _result10.GetSuccess(); _ret11 != nil {
    return _ret11, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "removeSampleInfo failed: unknown result")
}

// Parameters:
//  - Token
//  - SampleId
//  - SampleInfo
func (p *SampleManagementClient) UpdateSampleInfo(ctx context.Context, token string, sampleId int32, sampleInfo *SampleInfo) (_r *Response, _err error) {
  var _args12 SampleManagementUpdateSampleInfoArgs
  _args12.Token = token
  _args12.SampleId = sampleId
  _args12.SampleInfo = sampleInfo
  var _result14 SampleManagementUpdateSampleInfoResult
  var _meta13 thrift.ResponseMeta
  _meta13, _err = p.Client_().Call(ctx, "updateSampleInfo", &_args12, &_result14)
  p.SetLastResponseMeta_(_meta13)
  if _err != nil {
    return
  }
  if _ret15 := _result14.GetSuccess(); _ret15 != nil {
    return _ret15, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "updateSampleInfo failed: unknown result")
}

// Parameters:
//  - Token
//  - SampleId
func (p *SampleManagementClient) GetSampleInfo(ctx context.Context, token string, sampleId int32) (_r *Response, _err error) {
  var _args16 SampleManagementGetSampleInfoArgs
  _args16.Token = token
  _args16.SampleId = sampleId
  var _result18 SampleManagementGetSampleInfoResult
  var _meta17 thrift.ResponseMeta
  _meta17, _err = p.Client_().Call(ctx, "getSampleInfo", &_args16, &_result18)
  p.SetLastResponseMeta_(_meta17)
  if _err != nil {
    return
  }
  if _ret19 := _result18.GetSuccess(); _ret19 != nil {
    return _ret19, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSampleInfo failed: unknown result")
}

// Parameters:
//  - Token
//  - SearchCriteria
//  - MaxNr
//  - OrderBy
func (p *SampleManagementClient) GetSampleInfoList(ctx context.Context, token string, searchCriteria *SearchCriteria, maxNr int32, orderBy int32) (_r *Response, _err error) {
  var _args20 SampleManagementGetSampleInfoListArgs
  _args20.Token = token
  _args20.SearchCriteria = searchCriteria
  _args20.MaxNr = maxNr
  _args20.OrderBy = orderBy
  var _result22 SampleManagementGetSampleInfoListResult
  var _meta21 thrift.ResponseMeta
  _meta21, _err = p.Client_().Call(ctx, "getSampleInfoList", &_args20, &_result22)
  p.SetLastResponseMeta_(_meta21)
  if _err != nil {
    return
  }
  if _ret23 := _result22.GetSuccess(); _ret23 != nil {
    return _ret23, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getSampleInfoList failed: unknown result")
}

type SampleManagementProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SampleManagement
}

func (p *SampleManagementProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SampleManagementProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SampleManagementProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSampleManagementProcessor(handler SampleManagement) *SampleManagementProcessor {

  self24 := &SampleManagementProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self24.processorMap["addSampleInfo"] = &sampleManagementProcessorAddSampleInfo{handler:handler}
  self24.processorMap["removeSampleInfo"] = &sampleManagementProcessorRemoveSampleInfo{handler:handler}
  self24.processorMap["updateSampleInfo"] = &sampleManagementProcessorUpdateSampleInfo{handler:handler}
  self24.processorMap["getSampleInfo"] = &sampleManagementProcessorGetSampleInfo{handler:handler}
  self24.processorMap["getSampleInfoList"] = &sampleManagementProcessorGetSampleInfoList{handler:handler}
return self24
}

func (p *SampleManagementProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x25.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x25

}

type sampleManagementProcessorAddSampleInfo struct {
  handler SampleManagement
}

func (p *sampleManagementProcessorAddSampleInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SampleManagementAddSampleInfoArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addSampleInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SampleManagementAddSampleInfoResult{}
  var retval *Response
  if retval, err2 = p.handler.AddSampleInfo(ctx, args.Token, args.SampleInfo); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSampleInfo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "addSampleInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "addSampleInfo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sampleManagementProcessorRemoveSampleInfo struct {
  handler SampleManagement
}

func (p *sampleManagementProcessorRemoveSampleInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SampleManagementRemoveSampleInfoArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeSampleInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SampleManagementRemoveSampleInfoResult{}
  var retval *Response
  if retval, err2 = p.handler.RemoveSampleInfo(ctx, args.Token, args.SampleId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeSampleInfo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeSampleInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeSampleInfo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sampleManagementProcessorUpdateSampleInfo struct {
  handler SampleManagement
}

func (p *sampleManagementProcessorUpdateSampleInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SampleManagementUpdateSampleInfoArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateSampleInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SampleManagementUpdateSampleInfoResult{}
  var retval *Response
  if retval, err2 = p.handler.UpdateSampleInfo(ctx, args.Token, args.SampleId, args.SampleInfo); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateSampleInfo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateSampleInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateSampleInfo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sampleManagementProcessorGetSampleInfo struct {
  handler SampleManagement
}

func (p *sampleManagementProcessorGetSampleInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SampleManagementGetSampleInfoArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSampleInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SampleManagementGetSampleInfoResult{}
  var retval *Response
  if retval, err2 = p.handler.GetSampleInfo(ctx, args.Token, args.SampleId); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSampleInfo: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSampleInfo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSampleInfo", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type sampleManagementProcessorGetSampleInfoList struct {
  handler SampleManagement
}

func (p *sampleManagementProcessorGetSampleInfoList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SampleManagementGetSampleInfoListArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getSampleInfoList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := SampleManagementGetSampleInfoListResult{}
  var retval *Response
  if retval, err2 = p.handler.GetSampleInfoList(ctx, args.Token, args.SearchCriteria, args.MaxNr, args.OrderBy); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSampleInfoList: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getSampleInfoList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getSampleInfoList", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Token
//  - SampleInfo
type SampleManagementAddSampleInfoArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  SampleInfo *SampleInfo `thrift:"sampleInfo,2" db:"sampleInfo" json:"sampleInfo"`
}

func NewSampleManagementAddSampleInfoArgs() *SampleManagementAddSampleInfoArgs {
  return &SampleManagementAddSampleInfoArgs{}
}


func (p *SampleManagementAddSampleInfoArgs) GetToken() string {
  return p.Token
}
var SampleManagementAddSampleInfoArgs_SampleInfo_DEFAULT *SampleInfo
func (p *SampleManagementAddSampleInfoArgs) GetSampleInfo() *SampleInfo {
  if !p.IsSetSampleInfo() {
    return SampleManagementAddSampleInfoArgs_SampleInfo_DEFAULT
  }
return p.SampleInfo
}
func (p *SampleManagementAddSampleInfoArgs) IsSetSampleInfo() bool {
  return p.SampleInfo != nil
}

func (p *SampleManagementAddSampleInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SampleManagementAddSampleInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *SampleManagementAddSampleInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SampleInfo = &SampleInfo{}
  if err := p.SampleInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SampleInfo), err)
  }
  return nil
}

func (p *SampleManagementAddSampleInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addSampleInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SampleManagementAddSampleInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *SampleManagementAddSampleInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sampleInfo", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sampleInfo: ", p), err) }
  if err := p.SampleInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SampleInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sampleInfo: ", p), err) }
  return err
}

func (p *SampleManagementAddSampleInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SampleManagementAddSampleInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SampleManagementAddSampleInfoResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSampleManagementAddSampleInfoResult() *SampleManagementAddSampleInfoResult {
  return &SampleManagementAddSampleInfoResult{}
}

var SampleManagementAddSampleInfoResult_Success_DEFAULT *Response
func (p *SampleManagementAddSampleInfoResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return SampleManagementAddSampleInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *SampleManagementAddSampleInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SampleManagementAddSampleInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SampleManagementAddSampleInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SampleManagementAddSampleInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addSampleInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SampleManagementAddSampleInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SampleManagementAddSampleInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SampleManagementAddSampleInfoResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - SampleId
type SampleManagementRemoveSampleInfoArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  SampleId int32 `thrift:"sampleId,2" db:"sampleId" json:"sampleId"`
}

func NewSampleManagementRemoveSampleInfoArgs() *SampleManagementRemoveSampleInfoArgs {
  return &SampleManagementRemoveSampleInfoArgs{}
}


func (p *SampleManagementRemoveSampleInfoArgs) GetToken() string {
  return p.Token
}

func (p *SampleManagementRemoveSampleInfoArgs) GetSampleId() int32 {
  return p.SampleId
}
func (p *SampleManagementRemoveSampleInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SampleManagementRemoveSampleInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *SampleManagementRemoveSampleInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SampleId = v
}
  return nil
}

func (p *SampleManagementRemoveSampleInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeSampleInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SampleManagementRemoveSampleInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *SampleManagementRemoveSampleInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sampleId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sampleId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SampleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sampleId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sampleId: ", p), err) }
  return err
}

func (p *SampleManagementRemoveSampleInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SampleManagementRemoveSampleInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SampleManagementRemoveSampleInfoResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSampleManagementRemoveSampleInfoResult() *SampleManagementRemoveSampleInfoResult {
  return &SampleManagementRemoveSampleInfoResult{}
}

var SampleManagementRemoveSampleInfoResult_Success_DEFAULT *Response
func (p *SampleManagementRemoveSampleInfoResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return SampleManagementRemoveSampleInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *SampleManagementRemoveSampleInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SampleManagementRemoveSampleInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SampleManagementRemoveSampleInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SampleManagementRemoveSampleInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeSampleInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SampleManagementRemoveSampleInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SampleManagementRemoveSampleInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SampleManagementRemoveSampleInfoResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - SampleId
//  - SampleInfo
type SampleManagementUpdateSampleInfoArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  SampleId int32 `thrift:"sampleId,2" db:"sampleId" json:"sampleId"`
  SampleInfo *SampleInfo `thrift:"sampleInfo,3" db:"sampleInfo" json:"sampleInfo"`
}

func NewSampleManagementUpdateSampleInfoArgs() *SampleManagementUpdateSampleInfoArgs {
  return &SampleManagementUpdateSampleInfoArgs{}
}


func (p *SampleManagementUpdateSampleInfoArgs) GetToken() string {
  return p.Token
}

func (p *SampleManagementUpdateSampleInfoArgs) GetSampleId() int32 {
  return p.SampleId
}
var SampleManagementUpdateSampleInfoArgs_SampleInfo_DEFAULT *SampleInfo
func (p *SampleManagementUpdateSampleInfoArgs) GetSampleInfo() *SampleInfo {
  if !p.IsSetSampleInfo() {
    return SampleManagementUpdateSampleInfoArgs_SampleInfo_DEFAULT
  }
return p.SampleInfo
}
func (p *SampleManagementUpdateSampleInfoArgs) IsSetSampleInfo() bool {
  return p.SampleInfo != nil
}

func (p *SampleManagementUpdateSampleInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SampleManagementUpdateSampleInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *SampleManagementUpdateSampleInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SampleId = v
}
  return nil
}

func (p *SampleManagementUpdateSampleInfoArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.SampleInfo = &SampleInfo{}
  if err := p.SampleInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SampleInfo), err)
  }
  return nil
}

func (p *SampleManagementUpdateSampleInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateSampleInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SampleManagementUpdateSampleInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *SampleManagementUpdateSampleInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sampleId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sampleId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SampleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sampleId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sampleId: ", p), err) }
  return err
}

func (p *SampleManagementUpdateSampleInfoArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sampleInfo", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sampleInfo: ", p), err) }
  if err := p.SampleInfo.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SampleInfo), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sampleInfo: ", p), err) }
  return err
}

func (p *SampleManagementUpdateSampleInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SampleManagementUpdateSampleInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SampleManagementUpdateSampleInfoResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSampleManagementUpdateSampleInfoResult() *SampleManagementUpdateSampleInfoResult {
  return &SampleManagementUpdateSampleInfoResult{}
}

var SampleManagementUpdateSampleInfoResult_Success_DEFAULT *Response
func (p *SampleManagementUpdateSampleInfoResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return SampleManagementUpdateSampleInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *SampleManagementUpdateSampleInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SampleManagementUpdateSampleInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SampleManagementUpdateSampleInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SampleManagementUpdateSampleInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateSampleInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SampleManagementUpdateSampleInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SampleManagementUpdateSampleInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SampleManagementUpdateSampleInfoResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - SampleId
type SampleManagementGetSampleInfoArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  SampleId int32 `thrift:"sampleId,2" db:"sampleId" json:"sampleId"`
}

func NewSampleManagementGetSampleInfoArgs() *SampleManagementGetSampleInfoArgs {
  return &SampleManagementGetSampleInfoArgs{}
}


func (p *SampleManagementGetSampleInfoArgs) GetToken() string {
  return p.Token
}

func (p *SampleManagementGetSampleInfoArgs) GetSampleId() int32 {
  return p.SampleId
}
func (p *SampleManagementGetSampleInfoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SampleManagementGetSampleInfoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *SampleManagementGetSampleInfoArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SampleId = v
}
  return nil
}

func (p *SampleManagementGetSampleInfoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSampleInfo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SampleManagementGetSampleInfoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *SampleManagementGetSampleInfoArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sampleId", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sampleId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SampleId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sampleId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sampleId: ", p), err) }
  return err
}

func (p *SampleManagementGetSampleInfoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SampleManagementGetSampleInfoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SampleManagementGetSampleInfoResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSampleManagementGetSampleInfoResult() *SampleManagementGetSampleInfoResult {
  return &SampleManagementGetSampleInfoResult{}
}

var SampleManagementGetSampleInfoResult_Success_DEFAULT *Response
func (p *SampleManagementGetSampleInfoResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return SampleManagementGetSampleInfoResult_Success_DEFAULT
  }
return p.Success
}
func (p *SampleManagementGetSampleInfoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SampleManagementGetSampleInfoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SampleManagementGetSampleInfoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SampleManagementGetSampleInfoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSampleInfo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SampleManagementGetSampleInfoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SampleManagementGetSampleInfoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SampleManagementGetSampleInfoResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - SearchCriteria
//  - MaxNr
//  - OrderBy
type SampleManagementGetSampleInfoListArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  SearchCriteria *SearchCriteria `thrift:"searchCriteria,2" db:"searchCriteria" json:"searchCriteria"`
  MaxNr int32 `thrift:"maxNr,3" db:"maxNr" json:"maxNr"`
  OrderBy int32 `thrift:"orderBy,4" db:"orderBy" json:"orderBy"`
}

func NewSampleManagementGetSampleInfoListArgs() *SampleManagementGetSampleInfoListArgs {
  return &SampleManagementGetSampleInfoListArgs{}
}


func (p *SampleManagementGetSampleInfoListArgs) GetToken() string {
  return p.Token
}
var SampleManagementGetSampleInfoListArgs_SearchCriteria_DEFAULT *SearchCriteria
func (p *SampleManagementGetSampleInfoListArgs) GetSearchCriteria() *SearchCriteria {
  if !p.IsSetSearchCriteria() {
    return SampleManagementGetSampleInfoListArgs_SearchCriteria_DEFAULT
  }
return p.SearchCriteria
}

func (p *SampleManagementGetSampleInfoListArgs) GetMaxNr() int32 {
  return p.MaxNr
}

func (p *SampleManagementGetSampleInfoListArgs) GetOrderBy() int32 {
  return p.OrderBy
}
func (p *SampleManagementGetSampleInfoListArgs) IsSetSearchCriteria() bool {
  return p.SearchCriteria != nil
}

func (p *SampleManagementGetSampleInfoListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SampleManagementGetSampleInfoListArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *SampleManagementGetSampleInfoListArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SearchCriteria = &SearchCriteria{}
  if err := p.SearchCriteria.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SearchCriteria), err)
  }
  return nil
}

func (p *SampleManagementGetSampleInfoListArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxNr = v
}
  return nil
}

func (p *SampleManagementGetSampleInfoListArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OrderBy = v
}
  return nil
}

func (p *SampleManagementGetSampleInfoListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSampleInfoList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SampleManagementGetSampleInfoListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *SampleManagementGetSampleInfoListArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchCriteria", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchCriteria: ", p), err) }
  if err := p.SearchCriteria.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SearchCriteria), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchCriteria: ", p), err) }
  return err
}

func (p *SampleManagementGetSampleInfoListArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxNr", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxNr: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxNr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxNr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxNr: ", p), err) }
  return err
}

func (p *SampleManagementGetSampleInfoListArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "orderBy", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:orderBy: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OrderBy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderBy (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:orderBy: ", p), err) }
  return err
}

func (p *SampleManagementGetSampleInfoListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SampleManagementGetSampleInfoListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SampleManagementGetSampleInfoListResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSampleManagementGetSampleInfoListResult() *SampleManagementGetSampleInfoListResult {
  return &SampleManagementGetSampleInfoListResult{}
}

var SampleManagementGetSampleInfoListResult_Success_DEFAULT *Response
func (p *SampleManagementGetSampleInfoListResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return SampleManagementGetSampleInfoListResult_Success_DEFAULT
  }
return p.Success
}
func (p *SampleManagementGetSampleInfoListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SampleManagementGetSampleInfoListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SampleManagementGetSampleInfoListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SampleManagementGetSampleInfoListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getSampleInfoList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SampleManagementGetSampleInfoListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SampleManagementGetSampleInfoListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SampleManagementGetSampleInfoListResult(%+v)", *p)
}


