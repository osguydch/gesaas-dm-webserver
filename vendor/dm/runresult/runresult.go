// Code generated by Thrift Compiler (0.15.0). DO NOT EDIT.

package runresult

import (
	"bytes"
	"context"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"dm/sampleinfo"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

var _ = sampleinfo.GoUnusedProtection__
// Attributes:
//  - RefGenome
//  - RefRatio
//  - RefReadLengthMedian
//  - RefReadLengthDistributionImage
//  - RefErrorRateMean50
//  - RefErrorRateMeanAll
//  - RefErrorRateDistributionImage
//  - RefAq30Rate50
//  - RefAq30Rate100
//  - RefAq30Rate150
//  - RefAq30RateAll
//  - RefLomanErrorRate
//  - RefScoreDistribution50Image
//  - RefScoreDistribution100Image
//  - RefScoreDistribution150Image
//  - RefScoreDistributionAllImage
//  - RefLomanImage
//  - RefBaseCoverageImage
//  - RefGCCoverageImage
//  - RefDplCoverageImage
type ReferenceSummary struct {
  RefGenome string `thrift:"refGenome,1" db:"refGenome" json:"refGenome"`
  RefRatio float64 `thrift:"refRatio,2" db:"refRatio" json:"refRatio"`
  RefReadLengthMedian float64 `thrift:"refReadLengthMedian,3" db:"refReadLengthMedian" json:"refReadLengthMedian"`
  RefReadLengthDistributionImage string `thrift:"refReadLengthDistributionImage,4" db:"refReadLengthDistributionImage" json:"refReadLengthDistributionImage"`
  RefErrorRateMean50 float64 `thrift:"refErrorRateMean50,5" db:"refErrorRateMean50" json:"refErrorRateMean50"`
  RefErrorRateMeanAll float64 `thrift:"refErrorRateMeanAll,6" db:"refErrorRateMeanAll" json:"refErrorRateMeanAll"`
  RefErrorRateDistributionImage string `thrift:"refErrorRateDistributionImage,7" db:"refErrorRateDistributionImage" json:"refErrorRateDistributionImage"`
  RefAq30Rate50 float64 `thrift:"refAq30Rate50,8" db:"refAq30Rate50" json:"refAq30Rate50"`
  RefAq30Rate100 float64 `thrift:"refAq30Rate100,9" db:"refAq30Rate100" json:"refAq30Rate100"`
  RefAq30Rate150 float64 `thrift:"refAq30Rate150,10" db:"refAq30Rate150" json:"refAq30Rate150"`
  RefAq30RateAll float64 `thrift:"refAq30RateAll,11" db:"refAq30RateAll" json:"refAq30RateAll"`
  RefLomanErrorRate float64 `thrift:"refLomanErrorRate,12" db:"refLomanErrorRate" json:"refLomanErrorRate"`
  RefScoreDistribution50Image string `thrift:"refScoreDistribution50Image,13" db:"refScoreDistribution50Image" json:"refScoreDistribution50Image"`
  RefScoreDistribution100Image string `thrift:"refScoreDistribution100Image,14" db:"refScoreDistribution100Image" json:"refScoreDistribution100Image"`
  RefScoreDistribution150Image string `thrift:"refScoreDistribution150Image,15" db:"refScoreDistribution150Image" json:"refScoreDistribution150Image"`
  RefScoreDistributionAllImage string `thrift:"refScoreDistributionAllImage,16" db:"refScoreDistributionAllImage" json:"refScoreDistributionAllImage"`
  RefLomanImage string `thrift:"refLomanImage,17" db:"refLomanImage" json:"refLomanImage"`
  RefBaseCoverageImage string `thrift:"refBaseCoverageImage,18" db:"refBaseCoverageImage" json:"refBaseCoverageImage"`
  RefGCCoverageImage string `thrift:"refGCCoverageImage,19" db:"refGCCoverageImage" json:"refGCCoverageImage"`
  RefDplCoverageImage string `thrift:"refDplCoverageImage,20" db:"refDplCoverageImage" json:"refDplCoverageImage"`
}

func NewReferenceSummary() *ReferenceSummary {
  return &ReferenceSummary{}
}


func (p *ReferenceSummary) GetRefGenome() string {
  return p.RefGenome
}

func (p *ReferenceSummary) GetRefRatio() float64 {
  return p.RefRatio
}

func (p *ReferenceSummary) GetRefReadLengthMedian() float64 {
  return p.RefReadLengthMedian
}

func (p *ReferenceSummary) GetRefReadLengthDistributionImage() string {
  return p.RefReadLengthDistributionImage
}

func (p *ReferenceSummary) GetRefErrorRateMean50() float64 {
  return p.RefErrorRateMean50
}

func (p *ReferenceSummary) GetRefErrorRateMeanAll() float64 {
  return p.RefErrorRateMeanAll
}

func (p *ReferenceSummary) GetRefErrorRateDistributionImage() string {
  return p.RefErrorRateDistributionImage
}

func (p *ReferenceSummary) GetRefAq30Rate50() float64 {
  return p.RefAq30Rate50
}

func (p *ReferenceSummary) GetRefAq30Rate100() float64 {
  return p.RefAq30Rate100
}

func (p *ReferenceSummary) GetRefAq30Rate150() float64 {
  return p.RefAq30Rate150
}

func (p *ReferenceSummary) GetRefAq30RateAll() float64 {
  return p.RefAq30RateAll
}

func (p *ReferenceSummary) GetRefLomanErrorRate() float64 {
  return p.RefLomanErrorRate
}

func (p *ReferenceSummary) GetRefScoreDistribution50Image() string {
  return p.RefScoreDistribution50Image
}

func (p *ReferenceSummary) GetRefScoreDistribution100Image() string {
  return p.RefScoreDistribution100Image
}

func (p *ReferenceSummary) GetRefScoreDistribution150Image() string {
  return p.RefScoreDistribution150Image
}

func (p *ReferenceSummary) GetRefScoreDistributionAllImage() string {
  return p.RefScoreDistributionAllImage
}

func (p *ReferenceSummary) GetRefLomanImage() string {
  return p.RefLomanImage
}

func (p *ReferenceSummary) GetRefBaseCoverageImage() string {
  return p.RefBaseCoverageImage
}

func (p *ReferenceSummary) GetRefGCCoverageImage() string {
  return p.RefGCCoverageImage
}

func (p *ReferenceSummary) GetRefDplCoverageImage() string {
  return p.RefDplCoverageImage
}
func (p *ReferenceSummary) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReferenceSummary)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.RefGenome = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RefRatio = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RefReadLengthMedian = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.RefReadLengthDistributionImage = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RefErrorRateMean50 = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RefErrorRateMeanAll = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.RefErrorRateDistributionImage = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.RefAq30Rate50 = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.RefAq30Rate100 = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.RefAq30Rate150 = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.RefAq30RateAll = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.RefLomanErrorRate = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.RefScoreDistribution50Image = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.RefScoreDistribution100Image = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.RefScoreDistribution150Image = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.RefScoreDistributionAllImage = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.RefLomanImage = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.RefBaseCoverageImage = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.RefGCCoverageImage = v
}
  return nil
}

func (p *ReferenceSummary)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.RefDplCoverageImage = v
}
  return nil
}

func (p *ReferenceSummary) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReferenceSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReferenceSummary) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refGenome", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:refGenome: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefGenome)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refGenome (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:refGenome: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refRatio", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:refRatio: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RefRatio)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refRatio (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:refRatio: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refReadLengthMedian", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:refReadLengthMedian: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RefReadLengthMedian)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refReadLengthMedian (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:refReadLengthMedian: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refReadLengthDistributionImage", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:refReadLengthDistributionImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefReadLengthDistributionImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refReadLengthDistributionImage (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:refReadLengthDistributionImage: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refErrorRateMean50", thrift.DOUBLE, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:refErrorRateMean50: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RefErrorRateMean50)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refErrorRateMean50 (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:refErrorRateMean50: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refErrorRateMeanAll", thrift.DOUBLE, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:refErrorRateMeanAll: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RefErrorRateMeanAll)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refErrorRateMeanAll (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:refErrorRateMeanAll: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refErrorRateDistributionImage", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:refErrorRateDistributionImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefErrorRateDistributionImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refErrorRateDistributionImage (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:refErrorRateDistributionImage: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refAq30Rate50", thrift.DOUBLE, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:refAq30Rate50: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RefAq30Rate50)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refAq30Rate50 (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:refAq30Rate50: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refAq30Rate100", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:refAq30Rate100: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RefAq30Rate100)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refAq30Rate100 (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:refAq30Rate100: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refAq30Rate150", thrift.DOUBLE, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:refAq30Rate150: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RefAq30Rate150)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refAq30Rate150 (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:refAq30Rate150: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refAq30RateAll", thrift.DOUBLE, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:refAq30RateAll: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RefAq30RateAll)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refAq30RateAll (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:refAq30RateAll: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refLomanErrorRate", thrift.DOUBLE, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:refLomanErrorRate: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.RefLomanErrorRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refLomanErrorRate (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:refLomanErrorRate: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refScoreDistribution50Image", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:refScoreDistribution50Image: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefScoreDistribution50Image)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refScoreDistribution50Image (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:refScoreDistribution50Image: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refScoreDistribution100Image", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:refScoreDistribution100Image: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefScoreDistribution100Image)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refScoreDistribution100Image (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:refScoreDistribution100Image: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refScoreDistribution150Image", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:refScoreDistribution150Image: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefScoreDistribution150Image)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refScoreDistribution150Image (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:refScoreDistribution150Image: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refScoreDistributionAllImage", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:refScoreDistributionAllImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefScoreDistributionAllImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refScoreDistributionAllImage (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:refScoreDistributionAllImage: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refLomanImage", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:refLomanImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefLomanImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refLomanImage (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:refLomanImage: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refBaseCoverageImage", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:refBaseCoverageImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefBaseCoverageImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refBaseCoverageImage (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:refBaseCoverageImage: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refGCCoverageImage", thrift.STRING, 19); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:refGCCoverageImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefGCCoverageImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refGCCoverageImage (19) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 19:refGCCoverageImage: ", p), err) }
  return err
}

func (p *ReferenceSummary) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "refDplCoverageImage", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:refDplCoverageImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RefDplCoverageImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.refDplCoverageImage (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:refDplCoverageImage: ", p), err) }
  return err
}

func (p *ReferenceSummary) Equals(other *ReferenceSummary) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RefGenome != other.RefGenome { return false }
  if p.RefRatio != other.RefRatio { return false }
  if p.RefReadLengthMedian != other.RefReadLengthMedian { return false }
  if p.RefReadLengthDistributionImage != other.RefReadLengthDistributionImage { return false }
  if p.RefErrorRateMean50 != other.RefErrorRateMean50 { return false }
  if p.RefErrorRateMeanAll != other.RefErrorRateMeanAll { return false }
  if p.RefErrorRateDistributionImage != other.RefErrorRateDistributionImage { return false }
  if p.RefAq30Rate50 != other.RefAq30Rate50 { return false }
  if p.RefAq30Rate100 != other.RefAq30Rate100 { return false }
  if p.RefAq30Rate150 != other.RefAq30Rate150 { return false }
  if p.RefAq30RateAll != other.RefAq30RateAll { return false }
  if p.RefLomanErrorRate != other.RefLomanErrorRate { return false }
  if p.RefScoreDistribution50Image != other.RefScoreDistribution50Image { return false }
  if p.RefScoreDistribution100Image != other.RefScoreDistribution100Image { return false }
  if p.RefScoreDistribution150Image != other.RefScoreDistribution150Image { return false }
  if p.RefScoreDistributionAllImage != other.RefScoreDistributionAllImage { return false }
  if p.RefLomanImage != other.RefLomanImage { return false }
  if p.RefBaseCoverageImage != other.RefBaseCoverageImage { return false }
  if p.RefGCCoverageImage != other.RefGCCoverageImage { return false }
  if p.RefDplCoverageImage != other.RefDplCoverageImage { return false }
  return true
}

func (p *ReferenceSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReferenceSummary(%+v)", *p)
}

// Attributes:
//  - LoadingRateMean
//  - AmpUnitMean
//  - PolycloneRate
//  - DuplicationRate
//  - LoadingImage
//  - AmpUnitDistributionImage
//  - AmpUnitTilemapImage
type AmplificationSummary struct {
  LoadingRateMean float64 `thrift:"loadingRateMean,1" db:"loadingRateMean" json:"loadingRateMean"`
  AmpUnitMean float64 `thrift:"ampUnitMean,2" db:"ampUnitMean" json:"ampUnitMean"`
  PolycloneRate float64 `thrift:"polycloneRate,3" db:"polycloneRate" json:"polycloneRate"`
  DuplicationRate float64 `thrift:"duplicationRate,4" db:"duplicationRate" json:"duplicationRate"`
  LoadingImage string `thrift:"loadingImage,5" db:"loadingImage" json:"loadingImage"`
  AmpUnitDistributionImage string `thrift:"ampUnitDistributionImage,6" db:"ampUnitDistributionImage" json:"ampUnitDistributionImage"`
  AmpUnitTilemapImage string `thrift:"ampUnitTilemapImage,7" db:"ampUnitTilemapImage" json:"ampUnitTilemapImage"`
}

func NewAmplificationSummary() *AmplificationSummary {
  return &AmplificationSummary{}
}


func (p *AmplificationSummary) GetLoadingRateMean() float64 {
  return p.LoadingRateMean
}

func (p *AmplificationSummary) GetAmpUnitMean() float64 {
  return p.AmpUnitMean
}

func (p *AmplificationSummary) GetPolycloneRate() float64 {
  return p.PolycloneRate
}

func (p *AmplificationSummary) GetDuplicationRate() float64 {
  return p.DuplicationRate
}

func (p *AmplificationSummary) GetLoadingImage() string {
  return p.LoadingImage
}

func (p *AmplificationSummary) GetAmpUnitDistributionImage() string {
  return p.AmpUnitDistributionImage
}

func (p *AmplificationSummary) GetAmpUnitTilemapImage() string {
  return p.AmpUnitTilemapImage
}
func (p *AmplificationSummary) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AmplificationSummary)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.LoadingRateMean = v
}
  return nil
}

func (p *AmplificationSummary)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AmpUnitMean = v
}
  return nil
}

func (p *AmplificationSummary)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PolycloneRate = v
}
  return nil
}

func (p *AmplificationSummary)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DuplicationRate = v
}
  return nil
}

func (p *AmplificationSummary)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.LoadingImage = v
}
  return nil
}

func (p *AmplificationSummary)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AmpUnitDistributionImage = v
}
  return nil
}

func (p *AmplificationSummary)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.AmpUnitTilemapImage = v
}
  return nil
}

func (p *AmplificationSummary) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "AmplificationSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AmplificationSummary) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "loadingRateMean", thrift.DOUBLE, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:loadingRateMean: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.LoadingRateMean)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loadingRateMean (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:loadingRateMean: ", p), err) }
  return err
}

func (p *AmplificationSummary) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ampUnitMean", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ampUnitMean: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.AmpUnitMean)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ampUnitMean (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ampUnitMean: ", p), err) }
  return err
}

func (p *AmplificationSummary) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "polycloneRate", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:polycloneRate: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.PolycloneRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.polycloneRate (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:polycloneRate: ", p), err) }
  return err
}

func (p *AmplificationSummary) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "duplicationRate", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:duplicationRate: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.DuplicationRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.duplicationRate (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:duplicationRate: ", p), err) }
  return err
}

func (p *AmplificationSummary) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "loadingImage", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:loadingImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LoadingImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.loadingImage (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:loadingImage: ", p), err) }
  return err
}

func (p *AmplificationSummary) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ampUnitDistributionImage", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ampUnitDistributionImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AmpUnitDistributionImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ampUnitDistributionImage (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ampUnitDistributionImage: ", p), err) }
  return err
}

func (p *AmplificationSummary) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ampUnitTilemapImage", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:ampUnitTilemapImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AmpUnitTilemapImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ampUnitTilemapImage (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:ampUnitTilemapImage: ", p), err) }
  return err
}

func (p *AmplificationSummary) Equals(other *AmplificationSummary) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.LoadingRateMean != other.LoadingRateMean { return false }
  if p.AmpUnitMean != other.AmpUnitMean { return false }
  if p.PolycloneRate != other.PolycloneRate { return false }
  if p.DuplicationRate != other.DuplicationRate { return false }
  if p.LoadingImage != other.LoadingImage { return false }
  if p.AmpUnitDistributionImage != other.AmpUnitDistributionImage { return false }
  if p.AmpUnitTilemapImage != other.AmpUnitTilemapImage { return false }
  return true
}

func (p *AmplificationSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AmplificationSummary(%+v)", *p)
}

// Attributes:
//  - TotalReads
//  - MeanReadsLength
//  - TotalBases
//  - Aq30Ratio
type ReadSummary struct {
  TotalReads int64 `thrift:"totalReads,1" db:"totalReads" json:"totalReads"`
  MeanReadsLength float64 `thrift:"meanReadsLength,2" db:"meanReadsLength" json:"meanReadsLength"`
  TotalBases int64 `thrift:"totalBases,3" db:"totalBases" json:"totalBases"`
  Aq30Ratio float64 `thrift:"aq30Ratio,4" db:"aq30Ratio" json:"aq30Ratio"`
}

func NewReadSummary() *ReadSummary {
  return &ReadSummary{}
}


func (p *ReadSummary) GetTotalReads() int64 {
  return p.TotalReads
}

func (p *ReadSummary) GetMeanReadsLength() float64 {
  return p.MeanReadsLength
}

func (p *ReadSummary) GetTotalBases() int64 {
  return p.TotalBases
}

func (p *ReadSummary) GetAq30Ratio() float64 {
  return p.Aq30Ratio
}
func (p *ReadSummary) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReadSummary)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TotalReads = v
}
  return nil
}

func (p *ReadSummary)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MeanReadsLength = v
}
  return nil
}

func (p *ReadSummary)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TotalBases = v
}
  return nil
}

func (p *ReadSummary)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Aq30Ratio = v
}
  return nil
}

func (p *ReadSummary) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReadSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReadSummary) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalReads", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalReads: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TotalReads)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalReads (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalReads: ", p), err) }
  return err
}

func (p *ReadSummary) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "meanReadsLength", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:meanReadsLength: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.MeanReadsLength)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.meanReadsLength (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:meanReadsLength: ", p), err) }
  return err
}

func (p *ReadSummary) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalBases", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:totalBases: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TotalBases)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalBases (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:totalBases: ", p), err) }
  return err
}

func (p *ReadSummary) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "aq30Ratio", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:aq30Ratio: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Aq30Ratio)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aq30Ratio (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:aq30Ratio: ", p), err) }
  return err
}

func (p *ReadSummary) Equals(other *ReadSummary) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TotalReads != other.TotalReads { return false }
  if p.MeanReadsLength != other.MeanReadsLength { return false }
  if p.TotalBases != other.TotalBases { return false }
  if p.Aq30Ratio != other.Aq30Ratio { return false }
  return true
}

func (p *ReadSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReadSummary(%+v)", *p)
}

// Attributes:
//  - Read1
//  - Read2
//  - QcResult_
type RunSummary struct {
  Read1 *ReadSummary `thrift:"read1,1" db:"read1" json:"read1"`
  Read2 *ReadSummary `thrift:"read2,2" db:"read2" json:"read2,omitempty"`
  QcResult_ int32 `thrift:"qcResult,3" db:"qcResult" json:"qcResult"`
}

func NewRunSummary() *RunSummary {
  return &RunSummary{}
}

var RunSummary_Read1_DEFAULT *ReadSummary
func (p *RunSummary) GetRead1() *ReadSummary {
  if !p.IsSetRead1() {
    return RunSummary_Read1_DEFAULT
  }
return p.Read1
}
var RunSummary_Read2_DEFAULT *ReadSummary
func (p *RunSummary) GetRead2() *ReadSummary {
  if !p.IsSetRead2() {
    return RunSummary_Read2_DEFAULT
  }
return p.Read2
}

func (p *RunSummary) GetQcResult_() int32 {
  return p.QcResult_
}
func (p *RunSummary) IsSetRead1() bool {
  return p.Read1 != nil
}

func (p *RunSummary) IsSetRead2() bool {
  return p.Read2 != nil
}

func (p *RunSummary) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunSummary)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Read1 = &ReadSummary{}
  if err := p.Read1.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Read1), err)
  }
  return nil
}

func (p *RunSummary)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Read2 = &ReadSummary{}
  if err := p.Read2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Read2), err)
  }
  return nil
}

func (p *RunSummary)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.QcResult_ = v
}
  return nil
}

func (p *RunSummary) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RunSummary"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunSummary) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "read1", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:read1: ", p), err) }
  if err := p.Read1.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Read1), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:read1: ", p), err) }
  return err
}

func (p *RunSummary) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRead2() {
    if err := oprot.WriteFieldBegin(ctx, "read2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:read2: ", p), err) }
    if err := p.Read2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Read2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:read2: ", p), err) }
  }
  return err
}

func (p *RunSummary) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "qcResult", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:qcResult: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.QcResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.qcResult (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:qcResult: ", p), err) }
  return err
}

func (p *RunSummary) Equals(other *RunSummary) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Read1.Equals(other.Read1) { return false }
  if !p.Read2.Equals(other.Read2) { return false }
  if p.QcResult_ != other.QcResult_ { return false }
  return true
}

func (p *RunSummary) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunSummary(%+v)", *p)
}

// Attributes:
//  - TotalReads
//  - GcRate
//  - Aq30
//  - Aq30Count
//  - BaseCount
//  - ReadLengthDistributionImage
//  - ID
//  - Type
//  - AverageReadLength
type LibraryInfo struct {
  TotalReads int64 `thrift:"totalReads,1" db:"totalReads" json:"totalReads"`
  GcRate float64 `thrift:"gcRate,2" db:"gcRate" json:"gcRate"`
  Aq30 float64 `thrift:"aq30,3" db:"aq30" json:"aq30"`
  Aq30Count int64 `thrift:"aq30Count,4" db:"aq30Count" json:"aq30Count"`
  BaseCount int64 `thrift:"baseCount,5" db:"baseCount" json:"baseCount"`
  ReadLengthDistributionImage string `thrift:"readLengthDistributionImage,6" db:"readLengthDistributionImage" json:"readLengthDistributionImage"`
  ID string `thrift:"id,7" db:"id" json:"id"`
  Type string `thrift:"type,8" db:"type" json:"type"`
  AverageReadLength float64 `thrift:"averageReadLength,9" db:"averageReadLength" json:"averageReadLength"`
}

func NewLibraryInfo() *LibraryInfo {
  return &LibraryInfo{}
}


func (p *LibraryInfo) GetTotalReads() int64 {
  return p.TotalReads
}

func (p *LibraryInfo) GetGcRate() float64 {
  return p.GcRate
}

func (p *LibraryInfo) GetAq30() float64 {
  return p.Aq30
}

func (p *LibraryInfo) GetAq30Count() int64 {
  return p.Aq30Count
}

func (p *LibraryInfo) GetBaseCount() int64 {
  return p.BaseCount
}

func (p *LibraryInfo) GetReadLengthDistributionImage() string {
  return p.ReadLengthDistributionImage
}

func (p *LibraryInfo) GetID() string {
  return p.ID
}

func (p *LibraryInfo) GetType() string {
  return p.Type
}

func (p *LibraryInfo) GetAverageReadLength() float64 {
  return p.AverageReadLength
}
func (p *LibraryInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LibraryInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TotalReads = v
}
  return nil
}

func (p *LibraryInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.GcRate = v
}
  return nil
}

func (p *LibraryInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Aq30 = v
}
  return nil
}

func (p *LibraryInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Aq30Count = v
}
  return nil
}

func (p *LibraryInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.BaseCount = v
}
  return nil
}

func (p *LibraryInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ReadLengthDistributionImage = v
}
  return nil
}

func (p *LibraryInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *LibraryInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Type = v
}
  return nil
}

func (p *LibraryInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.AverageReadLength = v
}
  return nil
}

func (p *LibraryInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LibraryInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LibraryInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "totalReads", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:totalReads: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.TotalReads)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.totalReads (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:totalReads: ", p), err) }
  return err
}

func (p *LibraryInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "gcRate", thrift.DOUBLE, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:gcRate: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.GcRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.gcRate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:gcRate: ", p), err) }
  return err
}

func (p *LibraryInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "aq30", thrift.DOUBLE, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:aq30: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.Aq30)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aq30 (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:aq30: ", p), err) }
  return err
}

func (p *LibraryInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "aq30Count", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:aq30Count: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Aq30Count)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.aq30Count (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:aq30Count: ", p), err) }
  return err
}

func (p *LibraryInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "baseCount", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:baseCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BaseCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.baseCount (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:baseCount: ", p), err) }
  return err
}

func (p *LibraryInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "readLengthDistributionImage", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:readLengthDistributionImage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ReadLengthDistributionImage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.readLengthDistributionImage (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:readLengthDistributionImage: ", p), err) }
  return err
}

func (p *LibraryInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:id: ", p), err) }
  return err
}

func (p *LibraryInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:type: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:type: ", p), err) }
  return err
}

func (p *LibraryInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "averageReadLength", thrift.DOUBLE, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:averageReadLength: ", p), err) }
  if err := oprot.WriteDouble(ctx, float64(p.AverageReadLength)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.averageReadLength (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:averageReadLength: ", p), err) }
  return err
}

func (p *LibraryInfo) Equals(other *LibraryInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TotalReads != other.TotalReads { return false }
  if p.GcRate != other.GcRate { return false }
  if p.Aq30 != other.Aq30 { return false }
  if p.Aq30Count != other.Aq30Count { return false }
  if p.BaseCount != other.BaseCount { return false }
  if p.ReadLengthDistributionImage != other.ReadLengthDistributionImage { return false }
  if p.ID != other.ID { return false }
  if p.Type != other.Type { return false }
  if p.AverageReadLength != other.AverageReadLength { return false }
  return true
}

func (p *LibraryInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LibraryInfo(%+v)", *p)
}

// Attributes:
//  - AnalysisId
//  - RunId
//  - StartTime
//  - FinishTime
//  - Status
//  - AnalysisPipeline
//  - ServerMac
//  - SaveDir
//  - LayoutVersion
//  - ReferenceSummary
//  - AmplificationSummary
//  - LibrarySummary
//  - RunSummary
//  - Sampleid
//  - SeqDir
//  - ProjectDir
//  - AnalysisCmdStr
//  - IsDelete
//  - RefAnalysisId
//  - TotalSpaceOccupied
//  - Sampleinfo
type RunResult_ struct {
  AnalysisId string `thrift:"analysisId,1" db:"analysisId" json:"analysisId"`
  RunId string `thrift:"runId,2" db:"runId" json:"runId"`
  StartTime int64 `thrift:"startTime,3" db:"startTime" json:"startTime"`
  FinishTime int64 `thrift:"finishTime,4" db:"finishTime" json:"finishTime"`
  Status int32 `thrift:"status,5" db:"status" json:"status"`
  AnalysisPipeline string `thrift:"analysisPipeline,6" db:"analysisPipeline" json:"analysisPipeline"`
  ServerMac string `thrift:"serverMac,7" db:"serverMac" json:"serverMac"`
  SaveDir string `thrift:"saveDir,8" db:"saveDir" json:"saveDir"`
  LayoutVersion string `thrift:"layoutVersion,9" db:"layoutVersion" json:"layoutVersion"`
  ReferenceSummary *ReferenceSummary `thrift:"referenceSummary,10" db:"referenceSummary" json:"referenceSummary,omitempty"`
  AmplificationSummary *AmplificationSummary `thrift:"amplificationSummary,11" db:"amplificationSummary" json:"amplificationSummary,omitempty"`
  LibrarySummary []*LibraryInfo `thrift:"librarySummary,12" db:"librarySummary" json:"librarySummary,omitempty"`
  RunSummary *RunSummary `thrift:"runSummary,13" db:"runSummary" json:"runSummary,omitempty"`
  Sampleid *int32 `thrift:"sampleid,14" db:"sampleid" json:"sampleid,omitempty"`
  SeqDir string `thrift:"seqDir,15" db:"seqDir" json:"seqDir"`
  ProjectDir string `thrift:"projectDir,16" db:"projectDir" json:"projectDir"`
  AnalysisCmdStr string `thrift:"analysisCmdStr,17" db:"analysisCmdStr" json:"analysisCmdStr"`
  IsDelete bool `thrift:"isDelete,18" db:"isDelete" json:"isDelete"`
  RefAnalysisId *string `thrift:"refAnalysisId,19" db:"refAnalysisId" json:"refAnalysisId,omitempty"`
  TotalSpaceOccupied *float64 `thrift:"totalSpaceOccupied,20" db:"totalSpaceOccupied" json:"totalSpaceOccupied,omitempty"`
  Sampleinfo *sampleinfo.SampleInfo `thrift:"sampleinfo,21" db:"sampleinfo" json:"sampleinfo,omitempty"`
}

func NewRunResult_() *RunResult_ {
  return &RunResult_{}
}


func (p *RunResult_) GetAnalysisId() string {
  return p.AnalysisId
}

func (p *RunResult_) GetRunId() string {
  return p.RunId
}

func (p *RunResult_) GetStartTime() int64 {
  return p.StartTime
}

func (p *RunResult_) GetFinishTime() int64 {
  return p.FinishTime
}

func (p *RunResult_) GetStatus() int32 {
  return p.Status
}

func (p *RunResult_) GetAnalysisPipeline() string {
  return p.AnalysisPipeline
}

func (p *RunResult_) GetServerMac() string {
  return p.ServerMac
}

func (p *RunResult_) GetSaveDir() string {
  return p.SaveDir
}

func (p *RunResult_) GetLayoutVersion() string {
  return p.LayoutVersion
}
var RunResult__ReferenceSummary_DEFAULT *ReferenceSummary
func (p *RunResult_) GetReferenceSummary() *ReferenceSummary {
  if !p.IsSetReferenceSummary() {
    return RunResult__ReferenceSummary_DEFAULT
  }
return p.ReferenceSummary
}
var RunResult__AmplificationSummary_DEFAULT *AmplificationSummary
func (p *RunResult_) GetAmplificationSummary() *AmplificationSummary {
  if !p.IsSetAmplificationSummary() {
    return RunResult__AmplificationSummary_DEFAULT
  }
return p.AmplificationSummary
}
var RunResult__LibrarySummary_DEFAULT []*LibraryInfo

func (p *RunResult_) GetLibrarySummary() []*LibraryInfo {
  return p.LibrarySummary
}
var RunResult__RunSummary_DEFAULT *RunSummary
func (p *RunResult_) GetRunSummary() *RunSummary {
  if !p.IsSetRunSummary() {
    return RunResult__RunSummary_DEFAULT
  }
return p.RunSummary
}
var RunResult__Sampleid_DEFAULT int32
func (p *RunResult_) GetSampleid() int32 {
  if !p.IsSetSampleid() {
    return RunResult__Sampleid_DEFAULT
  }
return *p.Sampleid
}

func (p *RunResult_) GetSeqDir() string {
  return p.SeqDir
}

func (p *RunResult_) GetProjectDir() string {
  return p.ProjectDir
}

func (p *RunResult_) GetAnalysisCmdStr() string {
  return p.AnalysisCmdStr
}

func (p *RunResult_) GetIsDelete() bool {
  return p.IsDelete
}
var RunResult__RefAnalysisId_DEFAULT string
func (p *RunResult_) GetRefAnalysisId() string {
  if !p.IsSetRefAnalysisId() {
    return RunResult__RefAnalysisId_DEFAULT
  }
return *p.RefAnalysisId
}
var RunResult__TotalSpaceOccupied_DEFAULT float64
func (p *RunResult_) GetTotalSpaceOccupied() float64 {
  if !p.IsSetTotalSpaceOccupied() {
    return RunResult__TotalSpaceOccupied_DEFAULT
  }
return *p.TotalSpaceOccupied
}
var RunResult__Sampleinfo_DEFAULT *sampleinfo.SampleInfo
func (p *RunResult_) GetSampleinfo() *sampleinfo.SampleInfo {
  if !p.IsSetSampleinfo() {
    return RunResult__Sampleinfo_DEFAULT
  }
return p.Sampleinfo
}
func (p *RunResult_) IsSetReferenceSummary() bool {
  return p.ReferenceSummary != nil
}

func (p *RunResult_) IsSetAmplificationSummary() bool {
  return p.AmplificationSummary != nil
}

func (p *RunResult_) IsSetLibrarySummary() bool {
  return p.LibrarySummary != nil
}

func (p *RunResult_) IsSetRunSummary() bool {
  return p.RunSummary != nil
}

func (p *RunResult_) IsSetSampleid() bool {
  return p.Sampleid != nil
}

func (p *RunResult_) IsSetRefAnalysisId() bool {
  return p.RefAnalysisId != nil
}

func (p *RunResult_) IsSetTotalSpaceOccupied() bool {
  return p.TotalSpaceOccupied != nil
}

func (p *RunResult_) IsSetSampleinfo() bool {
  return p.Sampleinfo != nil
}

func (p *RunResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AnalysisId = v
}
  return nil
}

func (p *RunResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.RunId = v
}
  return nil
}

func (p *RunResult_)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *RunResult_)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.FinishTime = v
}
  return nil
}

func (p *RunResult_)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *RunResult_)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.AnalysisPipeline = v
}
  return nil
}

func (p *RunResult_)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.ServerMac = v
}
  return nil
}

func (p *RunResult_)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.SaveDir = v
}
  return nil
}

func (p *RunResult_)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.LayoutVersion = v
}
  return nil
}

func (p *RunResult_)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.ReferenceSummary = &ReferenceSummary{}
  if err := p.ReferenceSummary.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ReferenceSummary), err)
  }
  return nil
}

func (p *RunResult_)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  p.AmplificationSummary = &AmplificationSummary{}
  if err := p.AmplificationSummary.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.AmplificationSummary), err)
  }
  return nil
}

func (p *RunResult_)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LibraryInfo, 0, size)
  p.LibrarySummary =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &LibraryInfo{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.LibrarySummary = append(p.LibrarySummary, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RunResult_)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  p.RunSummary = &RunSummary{}
  if err := p.RunSummary.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.RunSummary), err)
  }
  return nil
}

func (p *RunResult_)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.Sampleid = &v
}
  return nil
}

func (p *RunResult_)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.SeqDir = v
}
  return nil
}

func (p *RunResult_)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.ProjectDir = v
}
  return nil
}

func (p *RunResult_)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.AnalysisCmdStr = v
}
  return nil
}

func (p *RunResult_)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.IsDelete = v
}
  return nil
}

func (p *RunResult_)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.RefAnalysisId = &v
}
  return nil
}

func (p *RunResult_)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.TotalSpaceOccupied = &v
}
  return nil
}

func (p *RunResult_)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  p.Sampleinfo = &sampleinfo.SampleInfo{}
  if err := p.Sampleinfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sampleinfo), err)
  }
  return nil
}

func (p *RunResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "RunResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:analysisId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AnalysisId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:analysisId: ", p), err) }
  return err
}

func (p *RunResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.RunId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.runId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runId: ", p), err) }
  return err
}

func (p *RunResult_) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err) }
  return err
}

func (p *RunResult_) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "finishTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:finishTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.FinishTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.finishTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:finishTime: ", p), err) }
  return err
}

func (p *RunResult_) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  return err
}

func (p *RunResult_) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisPipeline", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:analysisPipeline: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AnalysisPipeline)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisPipeline (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:analysisPipeline: ", p), err) }
  return err
}

func (p *RunResult_) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serverMac", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:serverMac: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ServerMac)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serverMac (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:serverMac: ", p), err) }
  return err
}

func (p *RunResult_) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "saveDir", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:saveDir: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SaveDir)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.saveDir (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:saveDir: ", p), err) }
  return err
}

func (p *RunResult_) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "layoutVersion", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:layoutVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LayoutVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.layoutVersion (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:layoutVersion: ", p), err) }
  return err
}

func (p *RunResult_) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetReferenceSummary() {
    if err := oprot.WriteFieldBegin(ctx, "referenceSummary", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:referenceSummary: ", p), err) }
    if err := p.ReferenceSummary.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ReferenceSummary), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:referenceSummary: ", p), err) }
  }
  return err
}

func (p *RunResult_) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAmplificationSummary() {
    if err := oprot.WriteFieldBegin(ctx, "amplificationSummary", thrift.STRUCT, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:amplificationSummary: ", p), err) }
    if err := p.AmplificationSummary.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.AmplificationSummary), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:amplificationSummary: ", p), err) }
  }
  return err
}

func (p *RunResult_) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLibrarySummary() {
    if err := oprot.WriteFieldBegin(ctx, "librarySummary", thrift.LIST, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:librarySummary: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.LibrarySummary)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.LibrarySummary {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:librarySummary: ", p), err) }
  }
  return err
}

func (p *RunResult_) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunSummary() {
    if err := oprot.WriteFieldBegin(ctx, "runSummary", thrift.STRUCT, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:runSummary: ", p), err) }
    if err := p.RunSummary.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.RunSummary), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:runSummary: ", p), err) }
  }
  return err
}

func (p *RunResult_) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampleid() {
    if err := oprot.WriteFieldBegin(ctx, "sampleid", thrift.I32, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:sampleid: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Sampleid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sampleid (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:sampleid: ", p), err) }
  }
  return err
}

func (p *RunResult_) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "seqDir", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:seqDir: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SeqDir)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seqDir (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:seqDir: ", p), err) }
  return err
}

func (p *RunResult_) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "projectDir", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:projectDir: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ProjectDir)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.projectDir (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:projectDir: ", p), err) }
  return err
}

func (p *RunResult_) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisCmdStr", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:analysisCmdStr: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AnalysisCmdStr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisCmdStr (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:analysisCmdStr: ", p), err) }
  return err
}

func (p *RunResult_) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isDelete", thrift.BOOL, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:isDelete: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsDelete)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isDelete (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:isDelete: ", p), err) }
  return err
}

func (p *RunResult_) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRefAnalysisId() {
    if err := oprot.WriteFieldBegin(ctx, "refAnalysisId", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:refAnalysisId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RefAnalysisId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.refAnalysisId (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:refAnalysisId: ", p), err) }
  }
  return err
}

func (p *RunResult_) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTotalSpaceOccupied() {
    if err := oprot.WriteFieldBegin(ctx, "totalSpaceOccupied", thrift.DOUBLE, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:totalSpaceOccupied: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.TotalSpaceOccupied)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.totalSpaceOccupied (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:totalSpaceOccupied: ", p), err) }
  }
  return err
}

func (p *RunResult_) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampleinfo() {
    if err := oprot.WriteFieldBegin(ctx, "sampleinfo", thrift.STRUCT, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:sampleinfo: ", p), err) }
    if err := p.Sampleinfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sampleinfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:sampleinfo: ", p), err) }
  }
  return err
}

func (p *RunResult_) Equals(other *RunResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AnalysisId != other.AnalysisId { return false }
  if p.RunId != other.RunId { return false }
  if p.StartTime != other.StartTime { return false }
  if p.FinishTime != other.FinishTime { return false }
  if p.Status != other.Status { return false }
  if p.AnalysisPipeline != other.AnalysisPipeline { return false }
  if p.ServerMac != other.ServerMac { return false }
  if p.SaveDir != other.SaveDir { return false }
  if p.LayoutVersion != other.LayoutVersion { return false }
  if !p.ReferenceSummary.Equals(other.ReferenceSummary) { return false }
  if !p.AmplificationSummary.Equals(other.AmplificationSummary) { return false }
  if len(p.LibrarySummary) != len(other.LibrarySummary) { return false }
  for i, _tgt := range p.LibrarySummary {
    _src1 := other.LibrarySummary[i]
    if !_tgt.Equals(_src1) { return false }
  }
  if !p.RunSummary.Equals(other.RunSummary) { return false }
  if p.Sampleid != other.Sampleid {
    if p.Sampleid == nil || other.Sampleid == nil {
      return false
    }
    if (*p.Sampleid) != (*other.Sampleid) { return false }
  }
  if p.SeqDir != other.SeqDir { return false }
  if p.ProjectDir != other.ProjectDir { return false }
  if p.AnalysisCmdStr != other.AnalysisCmdStr { return false }
  if p.IsDelete != other.IsDelete { return false }
  if p.RefAnalysisId != other.RefAnalysisId {
    if p.RefAnalysisId == nil || other.RefAnalysisId == nil {
      return false
    }
    if (*p.RefAnalysisId) != (*other.RefAnalysisId) { return false }
  }
  if p.TotalSpaceOccupied != other.TotalSpaceOccupied {
    if p.TotalSpaceOccupied == nil || other.TotalSpaceOccupied == nil {
      return false
    }
    if (*p.TotalSpaceOccupied) != (*other.TotalSpaceOccupied) { return false }
  }
  if !p.Sampleinfo.Equals(other.Sampleinfo) { return false }
  return true
}

func (p *RunResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResult_(%+v)", *p)
}

// Attributes:
//  - Status
//  - RunResultList
//  - Runresult
//  - TotalCount
//  - CurrentPage
type ReturnData struct {
  Status *int32 `thrift:"status,1" db:"status" json:"status,omitempty"`
  RunResultList []*RunResult_ `thrift:"runResultList,2" db:"runResultList" json:"runResultList,omitempty"`
  Runresult *RunResult_ `thrift:"runresult,3" db:"runresult" json:"runresult,omitempty"`
  TotalCount *int32 `thrift:"totalCount,4" db:"totalCount" json:"totalCount,omitempty"`
  CurrentPage *int32 `thrift:"currentPage,5" db:"currentPage" json:"currentPage,omitempty"`
}

func NewReturnData() *ReturnData {
  return &ReturnData{}
}

var ReturnData_Status_DEFAULT int32
func (p *ReturnData) GetStatus() int32 {
  if !p.IsSetStatus() {
    return ReturnData_Status_DEFAULT
  }
return *p.Status
}
var ReturnData_RunResultList_DEFAULT []*RunResult_

func (p *ReturnData) GetRunResultList() []*RunResult_ {
  return p.RunResultList
}
var ReturnData_Runresult_DEFAULT *RunResult_
func (p *ReturnData) GetRunresult() *RunResult_ {
  if !p.IsSetRunresult() {
    return ReturnData_Runresult_DEFAULT
  }
return p.Runresult
}
var ReturnData_TotalCount_DEFAULT int32
func (p *ReturnData) GetTotalCount() int32 {
  if !p.IsSetTotalCount() {
    return ReturnData_TotalCount_DEFAULT
  }
return *p.TotalCount
}
var ReturnData_CurrentPage_DEFAULT int32
func (p *ReturnData) GetCurrentPage() int32 {
  if !p.IsSetCurrentPage() {
    return ReturnData_CurrentPage_DEFAULT
  }
return *p.CurrentPage
}
func (p *ReturnData) IsSetStatus() bool {
  return p.Status != nil
}

func (p *ReturnData) IsSetRunResultList() bool {
  return p.RunResultList != nil
}

func (p *ReturnData) IsSetRunresult() bool {
  return p.Runresult != nil
}

func (p *ReturnData) IsSetTotalCount() bool {
  return p.TotalCount != nil
}

func (p *ReturnData) IsSetCurrentPage() bool {
  return p.CurrentPage != nil
}

func (p *ReturnData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ReturnData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = &v
}
  return nil
}

func (p *ReturnData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*RunResult_, 0, size)
  p.RunResultList =  tSlice
  for i := 0; i < size; i ++ {
    _elem2 := &RunResult_{}
    if err := _elem2.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem2), err)
    }
    p.RunResultList = append(p.RunResultList, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *ReturnData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Runresult = &RunResult_{}
  if err := p.Runresult.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Runresult), err)
  }
  return nil
}

func (p *ReturnData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TotalCount = &v
}
  return nil
}

func (p *ReturnData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.CurrentPage = &v
}
  return nil
}

func (p *ReturnData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ReturnData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ReturnData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunResultList() {
    if err := oprot.WriteFieldBegin(ctx, "runResultList", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runResultList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.RunResultList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.RunResultList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runResultList: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunresult() {
    if err := oprot.WriteFieldBegin(ctx, "runresult", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:runresult: ", p), err) }
    if err := p.Runresult.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Runresult), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:runresult: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTotalCount() {
    if err := oprot.WriteFieldBegin(ctx, "totalCount", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:totalCount: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.TotalCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.totalCount (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:totalCount: ", p), err) }
  }
  return err
}

func (p *ReturnData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCurrentPage() {
    if err := oprot.WriteFieldBegin(ctx, "currentPage", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:currentPage: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.CurrentPage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.currentPage (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:currentPage: ", p), err) }
  }
  return err
}

func (p *ReturnData) Equals(other *ReturnData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  if len(p.RunResultList) != len(other.RunResultList) { return false }
  for i, _tgt := range p.RunResultList {
    _src3 := other.RunResultList[i]
    if !_tgt.Equals(_src3) { return false }
  }
  if !p.Runresult.Equals(other.Runresult) { return false }
  if p.TotalCount != other.TotalCount {
    if p.TotalCount == nil || other.TotalCount == nil {
      return false
    }
    if (*p.TotalCount) != (*other.TotalCount) { return false }
  }
  if p.CurrentPage != other.CurrentPage {
    if p.CurrentPage == nil || other.CurrentPage == nil {
      return false
    }
    if (*p.CurrentPage) != (*other.CurrentPage) { return false }
  }
  return true
}

func (p *ReturnData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ReturnData(%+v)", *p)
}

// Attributes:
//  - ErrorCode
//  - Message
//  - Data
type Response struct {
  ErrorCode int32 `thrift:"errorCode,1,required" db:"errorCode" json:"errorCode"`
  Message *string `thrift:"message,2" db:"message" json:"message,omitempty"`
  Data *ReturnData `thrift:"data,3" db:"data" json:"data,omitempty"`
}

func NewResponse() *Response {
  return &Response{}
}


func (p *Response) GetErrorCode() int32 {
  return p.ErrorCode
}
var Response_Message_DEFAULT string
func (p *Response) GetMessage() string {
  if !p.IsSetMessage() {
    return Response_Message_DEFAULT
  }
return *p.Message
}
var Response_Data_DEFAULT *ReturnData
func (p *Response) GetData() *ReturnData {
  if !p.IsSetData() {
    return Response_Data_DEFAULT
  }
return p.Data
}
func (p *Response) IsSetMessage() bool {
  return p.Message != nil
}

func (p *Response) IsSetData() bool {
  return p.Data != nil
}

func (p *Response) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetErrorCode bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
        issetErrorCode = true
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetErrorCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ErrorCode is not set"));
  }
  return nil
}

func (p *Response)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ErrorCode = v
}
  return nil
}

func (p *Response)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *Response)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Data = &ReturnData{}
  if err := p.Data.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Data), err)
  }
  return nil
}

func (p *Response) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Response"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Response) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:errorCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.errorCode (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:errorCode: ", p), err) }
  return err
}

func (p *Response) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  }
  return err
}

func (p *Response) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetData() {
    if err := oprot.WriteFieldBegin(ctx, "data", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
    if err := p.Data.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Data), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  }
  return err
}

func (p *Response) Equals(other *Response) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ErrorCode != other.ErrorCode { return false }
  if p.Message != other.Message {
    if p.Message == nil || other.Message == nil {
      return false
    }
    if (*p.Message) != (*other.Message) { return false }
  }
  if !p.Data.Equals(other.Data) { return false }
  return true
}

func (p *Response) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Response(%+v)", *p)
}

// Attributes:
//  - TimeFrom
//  - TimeTo
//  - Status
//  - Runid
//  - ServerMac
//  - PageNum
//  - PageSize
type SearchCriteria struct {
  TimeFrom *int64 `thrift:"timeFrom,1" db:"timeFrom" json:"timeFrom,omitempty"`
  TimeTo *int64 `thrift:"timeTo,2" db:"timeTo" json:"timeTo,omitempty"`
  Status *int32 `thrift:"status,3" db:"status" json:"status,omitempty"`
  Runid *string `thrift:"runid,4" db:"runid" json:"runid,omitempty"`
  ServerMac *string `thrift:"serverMac,5" db:"serverMac" json:"serverMac,omitempty"`
  PageNum *int32 `thrift:"pageNum,6" db:"pageNum" json:"pageNum,omitempty"`
  PageSize *int32 `thrift:"pageSize,7" db:"pageSize" json:"pageSize,omitempty"`
}

func NewSearchCriteria() *SearchCriteria {
  return &SearchCriteria{}
}

var SearchCriteria_TimeFrom_DEFAULT int64
func (p *SearchCriteria) GetTimeFrom() int64 {
  if !p.IsSetTimeFrom() {
    return SearchCriteria_TimeFrom_DEFAULT
  }
return *p.TimeFrom
}
var SearchCriteria_TimeTo_DEFAULT int64
func (p *SearchCriteria) GetTimeTo() int64 {
  if !p.IsSetTimeTo() {
    return SearchCriteria_TimeTo_DEFAULT
  }
return *p.TimeTo
}
var SearchCriteria_Status_DEFAULT int32
func (p *SearchCriteria) GetStatus() int32 {
  if !p.IsSetStatus() {
    return SearchCriteria_Status_DEFAULT
  }
return *p.Status
}
var SearchCriteria_Runid_DEFAULT string
func (p *SearchCriteria) GetRunid() string {
  if !p.IsSetRunid() {
    return SearchCriteria_Runid_DEFAULT
  }
return *p.Runid
}
var SearchCriteria_ServerMac_DEFAULT string
func (p *SearchCriteria) GetServerMac() string {
  if !p.IsSetServerMac() {
    return SearchCriteria_ServerMac_DEFAULT
  }
return *p.ServerMac
}
var SearchCriteria_PageNum_DEFAULT int32
func (p *SearchCriteria) GetPageNum() int32 {
  if !p.IsSetPageNum() {
    return SearchCriteria_PageNum_DEFAULT
  }
return *p.PageNum
}
var SearchCriteria_PageSize_DEFAULT int32
func (p *SearchCriteria) GetPageSize() int32 {
  if !p.IsSetPageSize() {
    return SearchCriteria_PageSize_DEFAULT
  }
return *p.PageSize
}
func (p *SearchCriteria) IsSetTimeFrom() bool {
  return p.TimeFrom != nil
}

func (p *SearchCriteria) IsSetTimeTo() bool {
  return p.TimeTo != nil
}

func (p *SearchCriteria) IsSetStatus() bool {
  return p.Status != nil
}

func (p *SearchCriteria) IsSetRunid() bool {
  return p.Runid != nil
}

func (p *SearchCriteria) IsSetServerMac() bool {
  return p.ServerMac != nil
}

func (p *SearchCriteria) IsSetPageNum() bool {
  return p.PageNum != nil
}

func (p *SearchCriteria) IsSetPageSize() bool {
  return p.PageSize != nil
}

func (p *SearchCriteria) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SearchCriteria)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TimeFrom = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeTo = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Runid = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ServerMac = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.PageNum = &v
}
  return nil
}

func (p *SearchCriteria)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PageSize = &v
}
  return nil
}

func (p *SearchCriteria) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "SearchCriteria"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SearchCriteria) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeFrom() {
    if err := oprot.WriteFieldBegin(ctx, "timeFrom", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:timeFrom: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TimeFrom)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeFrom (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:timeFrom: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeTo() {
    if err := oprot.WriteFieldBegin(ctx, "timeTo", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeTo: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TimeTo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeTo (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeTo: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRunid() {
    if err := oprot.WriteFieldBegin(ctx, "runid", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:runid: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Runid)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.runid (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:runid: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServerMac() {
    if err := oprot.WriteFieldBegin(ctx, "serverMac", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:serverMac: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ServerMac)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serverMac (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:serverMac: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageNum() {
    if err := oprot.WriteFieldBegin(ctx, "pageNum", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:pageNum: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageNum (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:pageNum: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPageSize() {
    if err := oprot.WriteFieldBegin(ctx, "pageSize", thrift.I32, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pageSize: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.PageSize)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pageSize (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pageSize: ", p), err) }
  }
  return err
}

func (p *SearchCriteria) Equals(other *SearchCriteria) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.TimeFrom != other.TimeFrom {
    if p.TimeFrom == nil || other.TimeFrom == nil {
      return false
    }
    if (*p.TimeFrom) != (*other.TimeFrom) { return false }
  }
  if p.TimeTo != other.TimeTo {
    if p.TimeTo == nil || other.TimeTo == nil {
      return false
    }
    if (*p.TimeTo) != (*other.TimeTo) { return false }
  }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  if p.Runid != other.Runid {
    if p.Runid == nil || other.Runid == nil {
      return false
    }
    if (*p.Runid) != (*other.Runid) { return false }
  }
  if p.ServerMac != other.ServerMac {
    if p.ServerMac == nil || other.ServerMac == nil {
      return false
    }
    if (*p.ServerMac) != (*other.ServerMac) { return false }
  }
  if p.PageNum != other.PageNum {
    if p.PageNum == nil || other.PageNum == nil {
      return false
    }
    if (*p.PageNum) != (*other.PageNum) { return false }
  }
  if p.PageSize != other.PageSize {
    if p.PageSize == nil || other.PageSize == nil {
      return false
    }
    if (*p.PageSize) != (*other.PageSize) { return false }
  }
  return true
}

func (p *SearchCriteria) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SearchCriteria(%+v)", *p)
}

type RunResultManagement interface {
  // Parameters:
  //  - Token
  //  - Runresult
  AddRunResult_(ctx context.Context, token string, runresult *RunResult_) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - Analysisid
  RemoveRunResult_(ctx context.Context, token string, analysisid string) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - Analysisid
  GetRunResult_(ctx context.Context, token string, analysisid string) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - Analysisid
  GetStatus(ctx context.Context, token string, analysisid string) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - Analysisid
  //  - Status
  UpdateStatus(ctx context.Context, token string, analysisid string, status int32) (_r *Response, _err error)
  // Parameters:
  //  - Token
  //  - SearchCriteria
  //  - MaxNr
  //  - OrderBy
  GetRunResultList(ctx context.Context, token string, searchCriteria *SearchCriteria, maxNr int32, orderBy int32) (_r *Response, _err error)
}

type RunResultManagementClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewRunResultManagementClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RunResultManagementClient {
  return &RunResultManagementClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewRunResultManagementClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RunResultManagementClient {
  return &RunResultManagementClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRunResultManagementClient(c thrift.TClient) *RunResultManagementClient {
  return &RunResultManagementClient{
    c: c,
  }
}

func (p *RunResultManagementClient) Client_() thrift.TClient {
  return p.c
}

func (p *RunResultManagementClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *RunResultManagementClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Parameters:
//  - Token
//  - Runresult
func (p *RunResultManagementClient) AddRunResult_(ctx context.Context, token string, runresult *RunResult_) (_r *Response, _err error) {
  var _args4 RunResultManagementAddRunResultArgs
  _args4.Token = token
  _args4.Runresult = runresult
  var _result6 RunResultManagementAddRunResultResult
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "addRunResult", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  if _ret7 := _result6.GetSuccess(); _ret7 != nil {
    return _ret7, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "addRunResult failed: unknown result")
}

// Parameters:
//  - Token
//  - Analysisid
func (p *RunResultManagementClient) RemoveRunResult_(ctx context.Context, token string, analysisid string) (_r *Response, _err error) {
  var _args8 RunResultManagementRemoveRunResultArgs
  _args8.Token = token
  _args8.Analysisid = analysisid
  var _result10 RunResultManagementRemoveRunResultResult
  var _meta9 thrift.ResponseMeta
  _meta9, _err = p.Client_().Call(ctx, "removeRunResult", &_args8, &_result10)
  p.SetLastResponseMeta_(_meta9)
  if _err != nil {
    return
  }
  if _ret11 := _result10.GetSuccess(); _ret11 != nil {
    return _ret11, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "removeRunResult failed: unknown result")
}

// Parameters:
//  - Token
//  - Analysisid
func (p *RunResultManagementClient) GetRunResult_(ctx context.Context, token string, analysisid string) (_r *Response, _err error) {
  var _args12 RunResultManagementGetRunResultArgs
  _args12.Token = token
  _args12.Analysisid = analysisid
  var _result14 RunResultManagementGetRunResultResult
  var _meta13 thrift.ResponseMeta
  _meta13, _err = p.Client_().Call(ctx, "getRunResult", &_args12, &_result14)
  p.SetLastResponseMeta_(_meta13)
  if _err != nil {
    return
  }
  if _ret15 := _result14.GetSuccess(); _ret15 != nil {
    return _ret15, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getRunResult failed: unknown result")
}

// Parameters:
//  - Token
//  - Analysisid
func (p *RunResultManagementClient) GetStatus(ctx context.Context, token string, analysisid string) (_r *Response, _err error) {
  var _args16 RunResultManagementGetStatusArgs
  _args16.Token = token
  _args16.Analysisid = analysisid
  var _result18 RunResultManagementGetStatusResult
  var _meta17 thrift.ResponseMeta
  _meta17, _err = p.Client_().Call(ctx, "getStatus", &_args16, &_result18)
  p.SetLastResponseMeta_(_meta17)
  if _err != nil {
    return
  }
  if _ret19 := _result18.GetSuccess(); _ret19 != nil {
    return _ret19, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getStatus failed: unknown result")
}

// Parameters:
//  - Token
//  - Analysisid
//  - Status
func (p *RunResultManagementClient) UpdateStatus(ctx context.Context, token string, analysisid string, status int32) (_r *Response, _err error) {
  var _args20 RunResultManagementUpdateStatusArgs
  _args20.Token = token
  _args20.Analysisid = analysisid
  _args20.Status = status
  var _result22 RunResultManagementUpdateStatusResult
  var _meta21 thrift.ResponseMeta
  _meta21, _err = p.Client_().Call(ctx, "updateStatus", &_args20, &_result22)
  p.SetLastResponseMeta_(_meta21)
  if _err != nil {
    return
  }
  if _ret23 := _result22.GetSuccess(); _ret23 != nil {
    return _ret23, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "updateStatus failed: unknown result")
}

// Parameters:
//  - Token
//  - SearchCriteria
//  - MaxNr
//  - OrderBy
func (p *RunResultManagementClient) GetRunResultList(ctx context.Context, token string, searchCriteria *SearchCriteria, maxNr int32, orderBy int32) (_r *Response, _err error) {
  var _args24 RunResultManagementGetRunResultListArgs
  _args24.Token = token
  _args24.SearchCriteria = searchCriteria
  _args24.MaxNr = maxNr
  _args24.OrderBy = orderBy
  var _result26 RunResultManagementGetRunResultListResult
  var _meta25 thrift.ResponseMeta
  _meta25, _err = p.Client_().Call(ctx, "getRunResultList", &_args24, &_result26)
  p.SetLastResponseMeta_(_meta25)
  if _err != nil {
    return
  }
  if _ret27 := _result26.GetSuccess(); _ret27 != nil {
    return _ret27, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "getRunResultList failed: unknown result")
}

type RunResultManagementProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RunResultManagement
}

func (p *RunResultManagementProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RunResultManagementProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RunResultManagementProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRunResultManagementProcessor(handler RunResultManagement) *RunResultManagementProcessor {

  self28 := &RunResultManagementProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self28.processorMap["addRunResult"] = &runResultManagementProcessorAddRunResult_{handler:handler}
  self28.processorMap["removeRunResult"] = &runResultManagementProcessorRemoveRunResult_{handler:handler}
  self28.processorMap["getRunResult"] = &runResultManagementProcessorGetRunResult_{handler:handler}
  self28.processorMap["getStatus"] = &runResultManagementProcessorGetStatus{handler:handler}
  self28.processorMap["updateStatus"] = &runResultManagementProcessorUpdateStatus{handler:handler}
  self28.processorMap["getRunResultList"] = &runResultManagementProcessorGetRunResultList{handler:handler}
return self28
}

func (p *RunResultManagementProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x29 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x29.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x29

}

type runResultManagementProcessorAddRunResult_ struct {
  handler RunResultManagement
}

func (p *runResultManagementProcessorAddRunResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunResultManagementAddRunResultArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "addRunResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunResultManagementAddRunResultResult{}
  var retval *Response
  if retval, err2 = p.handler.AddRunResult_(ctx, args.Token, args.Runresult); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addRunResult: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "addRunResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "addRunResult", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runResultManagementProcessorRemoveRunResult_ struct {
  handler RunResultManagement
}

func (p *runResultManagementProcessorRemoveRunResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunResultManagementRemoveRunResultArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "removeRunResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunResultManagementRemoveRunResultResult{}
  var retval *Response
  if retval, err2 = p.handler.RemoveRunResult_(ctx, args.Token, args.Analysisid); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeRunResult: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "removeRunResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "removeRunResult", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runResultManagementProcessorGetRunResult_ struct {
  handler RunResultManagement
}

func (p *runResultManagementProcessorGetRunResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunResultManagementGetRunResultArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunResultManagementGetRunResultResult{}
  var retval *Response
  if retval, err2 = p.handler.GetRunResult_(ctx, args.Token, args.Analysisid); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRunResult: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunResult", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRunResult", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runResultManagementProcessorGetStatus struct {
  handler RunResultManagement
}

func (p *runResultManagementProcessorGetStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunResultManagementGetStatusArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunResultManagementGetStatusResult{}
  var retval *Response
  if retval, err2 = p.handler.GetStatus(ctx, args.Token, args.Analysisid); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStatus: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getStatus", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runResultManagementProcessorUpdateStatus struct {
  handler RunResultManagement
}

func (p *runResultManagementProcessorUpdateStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunResultManagementUpdateStatusArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "updateStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunResultManagementUpdateStatusResult{}
  var retval *Response
  if retval, err2 = p.handler.UpdateStatus(ctx, args.Token, args.Analysisid, args.Status); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateStatus: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "updateStatus", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "updateStatus", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}

type runResultManagementProcessorGetRunResultList struct {
  handler RunResultManagement
}

func (p *runResultManagementProcessorGetRunResultList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RunResultManagementGetRunResultListArgs{}
  var err2 error
  if err2 = args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunResultList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := RunResultManagementGetRunResultListResult{}
  var retval *Response
  if retval, err2 = p.handler.GetRunResultList(ctx, args.Token, args.SearchCriteria, args.MaxNr, args.OrderBy); err2 != nil {
    tickerCancel()
    if err2 == thrift.ErrAbandonRequest {
      return false, thrift.WrapTException(err2)
    }
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRunResultList: " + err2.Error())
    oprot.WriteMessageBegin(ctx, "getRunResultList", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return true, thrift.WrapTException(err2)
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 = oprot.WriteMessageBegin(ctx, "getRunResultList", thrift.REPLY, seqId); err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = result.Write(ctx, oprot); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.WriteMessageEnd(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = thrift.WrapTException(err2)
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Token
//  - Runresult
type RunResultManagementAddRunResultArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Runresult *RunResult_ `thrift:"runresult,2" db:"runresult" json:"runresult"`
}

func NewRunResultManagementAddRunResultArgs() *RunResultManagementAddRunResultArgs {
  return &RunResultManagementAddRunResultArgs{}
}


func (p *RunResultManagementAddRunResultArgs) GetToken() string {
  return p.Token
}
var RunResultManagementAddRunResultArgs_Runresult_DEFAULT *RunResult_
func (p *RunResultManagementAddRunResultArgs) GetRunresult() *RunResult_ {
  if !p.IsSetRunresult() {
    return RunResultManagementAddRunResultArgs_Runresult_DEFAULT
  }
return p.Runresult
}
func (p *RunResultManagementAddRunResultArgs) IsSetRunresult() bool {
  return p.Runresult != nil
}

func (p *RunResultManagementAddRunResultArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResultManagementAddRunResultArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunResultManagementAddRunResultArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Runresult = &RunResult_{}
  if err := p.Runresult.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Runresult), err)
  }
  return nil
}

func (p *RunResultManagementAddRunResultArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addRunResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResultManagementAddRunResultArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunResultManagementAddRunResultArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "runresult", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:runresult: ", p), err) }
  if err := p.Runresult.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Runresult), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:runresult: ", p), err) }
  return err
}

func (p *RunResultManagementAddRunResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResultManagementAddRunResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunResultManagementAddRunResultResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunResultManagementAddRunResultResult() *RunResultManagementAddRunResultResult {
  return &RunResultManagementAddRunResultResult{}
}

var RunResultManagementAddRunResultResult_Success_DEFAULT *Response
func (p *RunResultManagementAddRunResultResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunResultManagementAddRunResultResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunResultManagementAddRunResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunResultManagementAddRunResultResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResultManagementAddRunResultResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunResultManagementAddRunResultResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "addRunResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResultManagementAddRunResultResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunResultManagementAddRunResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResultManagementAddRunResultResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Analysisid
type RunResultManagementRemoveRunResultArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Analysisid string `thrift:"analysisid,2" db:"analysisid" json:"analysisid"`
}

func NewRunResultManagementRemoveRunResultArgs() *RunResultManagementRemoveRunResultArgs {
  return &RunResultManagementRemoveRunResultArgs{}
}


func (p *RunResultManagementRemoveRunResultArgs) GetToken() string {
  return p.Token
}

func (p *RunResultManagementRemoveRunResultArgs) GetAnalysisid() string {
  return p.Analysisid
}
func (p *RunResultManagementRemoveRunResultArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResultManagementRemoveRunResultArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunResultManagementRemoveRunResultArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Analysisid = v
}
  return nil
}

func (p *RunResultManagementRemoveRunResultArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeRunResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResultManagementRemoveRunResultArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunResultManagementRemoveRunResultArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:analysisid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Analysisid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:analysisid: ", p), err) }
  return err
}

func (p *RunResultManagementRemoveRunResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResultManagementRemoveRunResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunResultManagementRemoveRunResultResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunResultManagementRemoveRunResultResult() *RunResultManagementRemoveRunResultResult {
  return &RunResultManagementRemoveRunResultResult{}
}

var RunResultManagementRemoveRunResultResult_Success_DEFAULT *Response
func (p *RunResultManagementRemoveRunResultResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunResultManagementRemoveRunResultResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunResultManagementRemoveRunResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunResultManagementRemoveRunResultResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResultManagementRemoveRunResultResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunResultManagementRemoveRunResultResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "removeRunResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResultManagementRemoveRunResultResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunResultManagementRemoveRunResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResultManagementRemoveRunResultResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Analysisid
type RunResultManagementGetRunResultArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Analysisid string `thrift:"analysisid,2" db:"analysisid" json:"analysisid"`
}

func NewRunResultManagementGetRunResultArgs() *RunResultManagementGetRunResultArgs {
  return &RunResultManagementGetRunResultArgs{}
}


func (p *RunResultManagementGetRunResultArgs) GetToken() string {
  return p.Token
}

func (p *RunResultManagementGetRunResultArgs) GetAnalysisid() string {
  return p.Analysisid
}
func (p *RunResultManagementGetRunResultArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResultManagementGetRunResultArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunResultManagementGetRunResultArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Analysisid = v
}
  return nil
}

func (p *RunResultManagementGetRunResultArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResultManagementGetRunResultArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunResultManagementGetRunResultArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:analysisid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Analysisid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:analysisid: ", p), err) }
  return err
}

func (p *RunResultManagementGetRunResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResultManagementGetRunResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunResultManagementGetRunResultResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunResultManagementGetRunResultResult() *RunResultManagementGetRunResultResult {
  return &RunResultManagementGetRunResultResult{}
}

var RunResultManagementGetRunResultResult_Success_DEFAULT *Response
func (p *RunResultManagementGetRunResultResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunResultManagementGetRunResultResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunResultManagementGetRunResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunResultManagementGetRunResultResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResultManagementGetRunResultResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunResultManagementGetRunResultResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResultManagementGetRunResultResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunResultManagementGetRunResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResultManagementGetRunResultResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Analysisid
type RunResultManagementGetStatusArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Analysisid string `thrift:"analysisid,2" db:"analysisid" json:"analysisid"`
}

func NewRunResultManagementGetStatusArgs() *RunResultManagementGetStatusArgs {
  return &RunResultManagementGetStatusArgs{}
}


func (p *RunResultManagementGetStatusArgs) GetToken() string {
  return p.Token
}

func (p *RunResultManagementGetStatusArgs) GetAnalysisid() string {
  return p.Analysisid
}
func (p *RunResultManagementGetStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResultManagementGetStatusArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunResultManagementGetStatusArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Analysisid = v
}
  return nil
}

func (p *RunResultManagementGetStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResultManagementGetStatusArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunResultManagementGetStatusArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:analysisid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Analysisid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:analysisid: ", p), err) }
  return err
}

func (p *RunResultManagementGetStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResultManagementGetStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunResultManagementGetStatusResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunResultManagementGetStatusResult() *RunResultManagementGetStatusResult {
  return &RunResultManagementGetStatusResult{}
}

var RunResultManagementGetStatusResult_Success_DEFAULT *Response
func (p *RunResultManagementGetStatusResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunResultManagementGetStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunResultManagementGetStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunResultManagementGetStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResultManagementGetStatusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunResultManagementGetStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResultManagementGetStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunResultManagementGetStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResultManagementGetStatusResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - Analysisid
//  - Status
type RunResultManagementUpdateStatusArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  Analysisid string `thrift:"analysisid,2" db:"analysisid" json:"analysisid"`
  Status int32 `thrift:"status,3" db:"status" json:"status"`
}

func NewRunResultManagementUpdateStatusArgs() *RunResultManagementUpdateStatusArgs {
  return &RunResultManagementUpdateStatusArgs{}
}


func (p *RunResultManagementUpdateStatusArgs) GetToken() string {
  return p.Token
}

func (p *RunResultManagementUpdateStatusArgs) GetAnalysisid() string {
  return p.Analysisid
}

func (p *RunResultManagementUpdateStatusArgs) GetStatus() int32 {
  return p.Status
}
func (p *RunResultManagementUpdateStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResultManagementUpdateStatusArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunResultManagementUpdateStatusArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Analysisid = v
}
  return nil
}

func (p *RunResultManagementUpdateStatusArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *RunResultManagementUpdateStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResultManagementUpdateStatusArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunResultManagementUpdateStatusArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:analysisid: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Analysisid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:analysisid: ", p), err) }
  return err
}

func (p *RunResultManagementUpdateStatusArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:status: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:status: ", p), err) }
  return err
}

func (p *RunResultManagementUpdateStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResultManagementUpdateStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunResultManagementUpdateStatusResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunResultManagementUpdateStatusResult() *RunResultManagementUpdateStatusResult {
  return &RunResultManagementUpdateStatusResult{}
}

var RunResultManagementUpdateStatusResult_Success_DEFAULT *Response
func (p *RunResultManagementUpdateStatusResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunResultManagementUpdateStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunResultManagementUpdateStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunResultManagementUpdateStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResultManagementUpdateStatusResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunResultManagementUpdateStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "updateStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResultManagementUpdateStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunResultManagementUpdateStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResultManagementUpdateStatusResult(%+v)", *p)
}

// Attributes:
//  - Token
//  - SearchCriteria
//  - MaxNr
//  - OrderBy
type RunResultManagementGetRunResultListArgs struct {
  Token string `thrift:"token,1" db:"token" json:"token"`
  SearchCriteria *SearchCriteria `thrift:"searchCriteria,2" db:"searchCriteria" json:"searchCriteria"`
  MaxNr int32 `thrift:"maxNr,3" db:"maxNr" json:"maxNr"`
  OrderBy int32 `thrift:"orderBy,4" db:"orderBy" json:"orderBy"`
}

func NewRunResultManagementGetRunResultListArgs() *RunResultManagementGetRunResultListArgs {
  return &RunResultManagementGetRunResultListArgs{}
}


func (p *RunResultManagementGetRunResultListArgs) GetToken() string {
  return p.Token
}
var RunResultManagementGetRunResultListArgs_SearchCriteria_DEFAULT *SearchCriteria
func (p *RunResultManagementGetRunResultListArgs) GetSearchCriteria() *SearchCriteria {
  if !p.IsSetSearchCriteria() {
    return RunResultManagementGetRunResultListArgs_SearchCriteria_DEFAULT
  }
return p.SearchCriteria
}

func (p *RunResultManagementGetRunResultListArgs) GetMaxNr() int32 {
  return p.MaxNr
}

func (p *RunResultManagementGetRunResultListArgs) GetOrderBy() int32 {
  return p.OrderBy
}
func (p *RunResultManagementGetRunResultListArgs) IsSetSearchCriteria() bool {
  return p.SearchCriteria != nil
}

func (p *RunResultManagementGetRunResultListArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResultManagementGetRunResultListArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Token = v
}
  return nil
}

func (p *RunResultManagementGetRunResultListArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.SearchCriteria = &SearchCriteria{}
  if err := p.SearchCriteria.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.SearchCriteria), err)
  }
  return nil
}

func (p *RunResultManagementGetRunResultListArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.MaxNr = v
}
  return nil
}

func (p *RunResultManagementGetRunResultListArgs)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.OrderBy = v
}
  return nil
}

func (p *RunResultManagementGetRunResultListArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunResultList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResultManagementGetRunResultListArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "token", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:token: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Token)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.token (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:token: ", p), err) }
  return err
}

func (p *RunResultManagementGetRunResultListArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "searchCriteria", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:searchCriteria: ", p), err) }
  if err := p.SearchCriteria.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.SearchCriteria), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:searchCriteria: ", p), err) }
  return err
}

func (p *RunResultManagementGetRunResultListArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "maxNr", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxNr: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.MaxNr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.maxNr (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxNr: ", p), err) }
  return err
}

func (p *RunResultManagementGetRunResultListArgs) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "orderBy", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:orderBy: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.OrderBy)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.orderBy (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:orderBy: ", p), err) }
  return err
}

func (p *RunResultManagementGetRunResultListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResultManagementGetRunResultListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RunResultManagementGetRunResultListResult struct {
  Success *Response `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRunResultManagementGetRunResultListResult() *RunResultManagementGetRunResultListResult {
  return &RunResultManagementGetRunResultListResult{}
}

var RunResultManagementGetRunResultListResult_Success_DEFAULT *Response
func (p *RunResultManagementGetRunResultListResult) GetSuccess() *Response {
  if !p.IsSetSuccess() {
    return RunResultManagementGetRunResultListResult_Success_DEFAULT
  }
return p.Success
}
func (p *RunResultManagementGetRunResultListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RunResultManagementGetRunResultListResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RunResultManagementGetRunResultListResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Response{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RunResultManagementGetRunResultListResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "getRunResultList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RunResultManagementGetRunResultListResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RunResultManagementGetRunResultListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RunResultManagementGetRunResultListResult(%+v)", *p)
}


